<?xml version="1.0" encoding="utf-8"?>
<modules:VisuModuleBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx" 
						xmlns:modules="com.ithaca.visu.modules.*"
						
						width="100%" height="100%" 
						creationComplete="visumodulebase1_creationCompleteHandler(event)" 
						configure="visumodulebase1_configureHandler(event)" 
						xmlns:maps="maps.*" xmlns:mate="http://mate.asfusion.com/"	
						xmlns:timeline="com.ithaca.visu.controls.timeline.*"
						xmlns:controls="com.lyon2.controls.*" > 
	<fx:Script>
		<![CDATA[ 
			import com.ithaca.traces.Obsel;
			import com.ithaca.traces.model.TraceModel;
			import com.ithaca.traces.view.ObselLine;
			import com.ithaca.traces.view.ObselTime;
			import com.ithaca.utils.UtilFunction;
			import com.ithaca.visu.controls.timeline.TraceLineB;
			import com.ithaca.visu.controls.timeline.TraceLineComment;
			import com.ithaca.visu.events.InitMapEvent;
			import com.ithaca.visu.events.MessageEvent;
			import com.ithaca.visu.events.ObselEvent;
			import com.ithaca.visu.events.SessionEvent;
			import com.ithaca.visu.events.TraceLineEvent;
			import com.ithaca.visu.events.VisuModuleEvent;
			import com.ithaca.visu.model.Model;
			import com.ithaca.visu.model.Session;
			import com.ithaca.visu.model.User;
			import com.ithaca.visu.renderer.SessionRetroRenderer;
			import com.ithaca.visu.ui.utils.ConnectionStatus;
			import com.ithaca.visu.ui.utils.RoleEnum;
			import com.ithaca.visu.view.session.SessionViewSalonRetro;
			
			import gnu.as3.gettext.FxGettext;
			import gnu.as3.gettext._FxGettext;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var fxgt:_FxGettext;
			
			private var testCursor:ObselLine;
			private var testTimeLine:TraceLineB;
			
			[Bindable]
			private var timer:Timer;
			
			public var listSessionOpen : ArrayCollection;
			
			[Bindable]
			public var listSessionClose : ArrayCollection;
					
			private var timeStart:Number;
			private var deltaTime:Number = 0;
			private var timePause:Number = 0;
			private var checkingSumFluxVideo:Number = 0;
			
			private var pickCheryClick:Number = 0;
			private var commentTimeLine:TraceLineComment;
			private var currentSessionDateRecording:Date = null;
			
			protected function visumodulebase1_configureHandler(event:VisuModuleEvent):void
			{			
				if((event.currentTarget as RetrospectionModule).parameters != null)
				{
					var param:Object = (event.currentTarget as RetrospectionModule).parameters ;
				}
				fxgt = FxGettext;
				// set current module
				Model.getInstance().setCurrentRetroModule(this);
				
				var initMapEvent:InitMapEvent = new InitMapEvent(InitMapEvent.INIT_MAP_RETROSPECTION);
				this.dispatchEvent(initMapEvent); 
			}
			
			protected function visumodulebase1_creationCompleteHandler(event:FlexEvent):void
			{
				// add sessionView
				this.addSessionView(this.groupOpenSession, this.listSessionOpen, onMouseClickSessionViewOpenSession);
				// only for admin, can see all closed session
				if(Model.getInstance().getLoggedUser().role >= RoleEnum.RESPONSABLE)
				{
					this.currentState="vciel";
					// get list all closed session
					var getAllClosedSessionEvent:SessionEvent = new SessionEvent(SessionEvent.GET_LIST_CLOSED_SESSION_ALL);
					this.dispatchEvent(getAllClosedSessionEvent);
				}
				else if(Model.getInstance().checkServeurVisuVciel())
				{
					this.currentState="vciel";
					// get list closed session where was(have to been) logged user
					var getClosedSessionEvent:SessionEvent = new SessionEvent(SessionEvent.GET_LIST_CLOSED_SESSION);
					this.dispatchEvent(getClosedSessionEvent);
				}
				// check status logged user
				var loggedUser:User =  Model.getInstance().getLoggedUser();
				var statusLoggedUser:int =loggedUser.status; 
				if(statusLoggedUser == ConnectionStatus.CONNECTED)
				{
					Model.getInstance().updateStatusLoggedUser(ConnectionStatus.PENDING);
					var outSession:SessionEvent = new SessionEvent(SessionEvent.OUT_SESSION);
					outSession.userId = loggedUser.id_user;
					this.dispatchEvent(outSession);
				}
				/* var getSessionEvent:SessionEvent = new SessionEvent(SessionEvent.GET_LIST_SESSION);
				this.dispatchEvent(getSessionEvent); */
				
 				this.visio.connection = Model.getInstance().getNetConnection();
				
				// removing module from the stage
				this.addEventListener(Event.REMOVED_FROM_STAGE, onRemovedModuleFromStage);
				this.sessionTimeLine.addEventListener(MessageEvent.CHECK_SEEK_STREAM, onCheckSeekStream);
			}
			
			private function onAddObselComment(event:ObselEvent):void
			{
				var addObselComment:TraceLineEvent = new TraceLineEvent(TraceLineEvent.ADD_COMMENT_OBSEL);
				addObselComment.traceComment = Model.getInstance().getCurrentCommentTraceId()
				addObselComment.traceParent = Model.getInstance().getCurrentTraceId();
				addObselComment.typeObsel  = TraceModel.SET_TEXT_COMMENT;
				addObselComment.textComment = "...."; 
				var beginTime:String = (commentTimeLine.startTimeSession + this.testCursor.getBegin()).toString();
				var deltaXObselTime:Number = 0;
				if(!event.clickOnButtonAdd)
				{
					var localX:Number = event.clickLocalX + deltaXObselTime;
					var timeStartSession:Number = this.testTimeLine.startTimeSession;
					var duration:Number = this.testTimeLine.durationSession;
					var wightGroup:Number = commentTimeLine.traceTitleLoggedUser.width;
					var delta:Number = Math.round(((localX*duration)/wightGroup)/1);
					var begin :Number = delta + timeStartSession;
					beginTime = begin.toString();
				}
				addObselComment.beginTime = beginTime;
				addObselComment.endTime = beginTime;
				addObselComment.forUserId = Model.getInstance().getLoggedUser().id_user;
				addObselComment.sessionId = Model.getInstance().getCurrentSessionId();
				addObselComment.timeStamp = 0;
				this.dispatchEvent(addObselComment);
			}
			
			private function onEditObselComment(event:ObselEvent):void
			{
 				var addObselComment:TraceLineEvent = new TraceLineEvent(TraceLineEvent.UPDATE_COMMENT_OBSEL);
				addObselComment.traceComment = Model.getInstance().getCurrentCommentTraceId()
				addObselComment.traceParent = Model.getInstance().getCurrentTraceId();
				addObselComment.typeObsel  = TraceModel.UPDATE_TEXT_COMMENT;
				var text:String = event.textObsel; 
				// check if message empty
				if(UtilFunction.isEmptyMessage(text))
				{
					text = fxgt.gettext("(vide)");
				}
				addObselComment.textComment = text;
				addObselComment.beginTime = event.obsel.begin.toString();
				addObselComment.endTime = event.obsel.end.toString();
				addObselComment.forUserId = Model.getInstance().getLoggedUser().id_user;
				addObselComment.sessionId = Model.getInstance().getCurrentSessionId();
				addObselComment.timeStamp = event.obsel.props[TraceModel.TIMESTAMP];
				this.dispatchEvent(addObselComment); 
			}
			
			private function onDeleteObselComment(event:ObselEvent):void
			{
				var addObselComment:TraceLineEvent = new TraceLineEvent(TraceLineEvent.UPDATE_COMMENT_OBSEL);
				addObselComment.traceComment = Model.getInstance().getCurrentCommentTraceId()
				addObselComment.traceParent = Model.getInstance().getCurrentTraceId();
				addObselComment.typeObsel  = TraceModel.DELETE_TEXT_COMMENT;
				var text:String = event.textObsel; 
				// check if message empty
				if(UtilFunction.isEmptyMessage(text))
				{
					text = fxgt.gettext("(vide)");
				}
				addObselComment.textComment = text;
				addObselComment.beginTime = event.obsel.begin.toString();
				addObselComment.endTime = event.obsel.begin.toString();
				addObselComment.forUserId = Model.getInstance().getLoggedUser().id_user;
				addObselComment.sessionId = Model.getInstance().getCurrentSessionId();
				addObselComment.timeStamp = event.obsel.props[TraceModel.TIMESTAMP];
				this.dispatchEvent(addObselComment);
			}
			/**
			 * Removing all streams and local devices
			 */
			private function onRemovedModuleFromStage(event:Event):void{
				if(this.visio != null)
				{
					this.removeAllStreams();
					if(this.timer)
					{
						this.timer.stop();			
					}
				}
			}
			
			/**
			 * remove all listeners the stream here and remove the streams from VisuVisio
			 */
			// FIXME it's not necessary to remove all listeners
			private function removeAllStreams():void
			{
			//	var streams:Object = this.visio.getStreams();
				// remove listeners
			//	for (var n: String in streams)
			//	{
			//		streams[n].removeEventListener( NetStatusEvent.NET_STATUS, remoteStreamStatusHandler);						
			//	}
				// remove streams
				this.visio.removeAllStreams();
			}
			
			/**
			 * play/pause of the streams
			 */
			private function onCheckSeekStream(event:MessageEvent):void
			{
				var typeMessage:String = event.message;
				switch (typeMessage)
				{
					case "play" :
						this.visio.resumeStreams();
						// set status play
						this.visio.status = VisuVisio.STATUS_REPLAY;
						// decale the time start for time on paused
						var timePausedNumber:Number = new Date().time -  this.timePause;
						this.timeStart = this.timeStart  + timePausedNumber;
						this.timer.start();
						this.timePause = 0;
						break;
					case "pause" :
						this.visio.pauseStreams();
						// set status pause
						this.visio.status = VisuVisio.STATUS_PAUSE;
						this.timer.stop();
						// set time pause
						this.timePause = new Date().time;
						break;
					default :
						break;
				}
			}
			
			private function createSessionTimeLine(durationSession:Number,startSession:Number):void
			{
				this.sessionTimeLine.sessionTimeLineLayout.durationSession = durationSession;
				this.sessionTimeLine.sessionTimeLineLayout.startTime = startSession;
				// TODO calcul number of labels
				var nbrLabelTime:int = 6;
				var deltaTime:int = durationSession/nbrLabelTime;
				for(var nPart:int = 0 ; nPart < nbrLabelTime; nPart++)
				{
					var beginTimeObsel:Number = nPart*deltaTime;
					// in seconds
					var labelTextSec:String = (beginTimeObsel/1000).toString();
					var labelTextMin:String = Math.round((beginTimeObsel/1000)/60).toString();
					var obselTime:ObselTime = new ObselTime()
					obselTime.setBegin(beginTimeObsel);
					obselTime.setEnd(beginTimeObsel);
					obselTime.text = labelTextMin+" min.";
					this.sessionTimeLine.sessionTimeLineLoggedUser.addElement(obselTime);
				}
			}
			private function updateListClosedSession(event:SessionEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					this.listSessionClose = event.listSession;
					// add sessionView
					this.addSessionView(this.groupCloseSession, this.listSessionClose,onMouseClickSessionViewCloseSession);
				}
			}
						
			private function updateListSession(event:SessionEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					this.listSessionOpen = event.listSession;				
				}
			}
			
			private function addSessionView(group:Group,listSession:ArrayCollection, clickListener:Function):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					
					var nbrSession:int = listSession.length;
					for(var nSession:int = 0 ; nSession < nbrSession ; nSession++)
					{
						var session:Object = listSession.getItemAt(nSession) as Object;
						//	label:sessionTheme, traceId:traceId, sessionId:sessionId, dateRecording:"waiting.....";
						var sessionView:SessionViewSalonRetro = new SessionViewSalonRetro();
						sessionView.percentWidth = 100;
						sessionView.theme = session.label;
						var sessionId:int = int(session.sessionId);
						sessionView.sessionId = sessionId;
						sessionView.traceId = session.traceId;
						//sessionView.ownerSession = Model.getInstance().getLoggedUser();
						sessionView.addEventListener(MouseEvent.CLICK, clickListener);
						group.addElement(sessionView);
						// get detaile the session for salon retro
						var sessionSalonRetroEvent:SessionEvent = new SessionEvent(SessionEvent.GET_SESSION_SALON_RETRO);
						sessionSalonRetroEvent.sessionId = sessionId;
						this.dispatchEvent(sessionSalonRetroEvent);
					}
				}
			}
			
			/**
			 * set date, time and owner for the session 
			 */
			private function updateSessionDate(event:SessionEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var session:Session = event.session;
					setDateRecording(this.groupOpenSession, session);
					// only for admin and instence visuvciel
					if(this.groupCloseSession != null)
					{
						setDateRecording(this.groupCloseSession, session);		
					}
				}
			}
			
			private function setDateRecording(group:Group, session:Session):void
			{
				var value:int = session.id_session;
				var nbrSessionView:int = group.numElements;
				for(var nSessionView:int = 0; nSessionView < nbrSessionView ; nSessionView++)
				{
					var sessionView:SessionViewSalonRetro = group.getElementAt(nSessionView) as SessionViewSalonRetro;
					if(value == sessionView.sessionId)
					{
						var dateStartRecording:Date = session.date_start_recording;
						// set date session
						sessionView.dateRecorded = session.date_start_recording;
						// set owner session
						sessionView.ownerSession = Model.getInstance().getUserPlateformeByUserId(session.id_user);
						return;
					}
				}
			}
			
			private function updateTimeLine(event:SessionEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					this.currentSessionDateRecording = event.dateStartRecording;
					var durationSession:Number = event.durationSessionRetro;
					var startRecordingSession:Number = event.dateStartRecording.time;
					// update label start session recording
					var dateStartRecording:Date = event.dateStartRecording;
					this.panelTimeLine.title = this.panelTimeLine.title + ""+ 
						fxgt.gettext("(la séance a été enregistrée le ")+dateStartRecording.getDate().toString()+"-"+
						(dateStartRecording.getMonth() + 1).toString()+"-"+dateStartRecording.getFullYear().toString()+fxgt.gettext(" à ")+	 
						dateStartRecording.getHours().toString()+":"+dateStartRecording.getMinutes().toString()+")";
					this.setObsels();
					var listTraceLines:ArrayCollection = Model.getInstance().getListTraceLines();
					if(listTraceLines != null)
					{
						var nbrTraceLines:int = listTraceLines.length;
						for(var nTraceLine:int =0; nTraceLine < nbrTraceLines ; nTraceLine++)
						{
							var traceLineObj:Object = listTraceLines[nTraceLine] as Object;						
							this.addTraceLineOnViewTraceLineGroup(traceLineObj,durationSession,startRecordingSession);
						}
					}
					// add view Obsel comment 
					this.commentTimeLine = new TraceLineComment();
					this.commentTimeLine.percentWidth = 100; 
					this.commentTimeLine.top = 40; 
					this.commentTimeLine.left = 1; 
					this.commentTimeLine.right = 1; 
					this.commentTimeLine.addEventListener(ObselEvent.ADD_OBSEL, onAddObselComment);
					this.commentTimeLine.addEventListener(ObselEvent.EDIT_OBSEL, onEditObselComment, true);
					this.commentTimeLine.addEventListener(ObselEvent.DELETE_OBSEL, onDeleteObselComment, true);
					this.commentTimeLine.visible = true;
					var nbrElement:int = groupTimeLine.numElements;
					groupTimeLine.addElementAt(this.commentTimeLine,nbrElement);
					commentTimeLine.durationSession = durationSession;
					commentTimeLine.startTimeSession = startRecordingSession;
					var obj:Object =  Model.getInstance().getTraceLineByUserId(Model.getInstance().getLoggedUser().id_user);
					if(obj == null)
					{
						obj =  Model.getInstance().getTraceLineByUserId(0);
					}
					var backGroundColorObsel:uint = obj.userColor;
					this.commentTimeLine.backGroundColor = backGroundColorObsel;
					var listObselComment:ArrayCollection = Model.getInstance().getListViewObselComment();	
					commentTimeLine.listTitleObsels = listObselComment;		
					// update sliders
					this.startTimeSessionSlider.minimum = startRecordingSession;
					this.startTimeSessionSlider.maximum = startRecordingSession + durationSession;
					this.startTimeSessionSlider.value = startRecordingSession;
					//this.startTimeSessionSlider.dataTipFormatFunction = formatStartTimeSlider;
					//this.startTimeSessionSlider.toolTip = "Temps debut de la séance";			
					// creation slider session duration
					if(durationSession < 60000)
					{
						this.durationSessionSlider.enabled = false;
					}else
					{
						this.durationSessionSlider.enabled = true;
						this.durationSessionSlider.minimum = 60000;
						this.durationSessionSlider.maximum = durationSession;
						this.durationSessionSlider.value  = durationSession;		
					}
					//this.durationSessionSlider.dataTipFormatFunction = formatDurationSlider;
					//this.durationSessionSlider.toolTip = "Durée de la séance"
					
				}
			}
			
			private function addTraceLineOnViewTraceLineGroup(traceLineObj:Object, durationSession:Number,startRecordingSession:Number):void
			{
				var userId:int = traceLineObj.userId;
				var traceLine:TraceLineB = new TraceLineB()
				traceLine.percentWidth = 100;
				//	traceLine.height = 30;
				traceLine.left = 0;
				traceLine.right = 0;
				traceLine.sourceImageUserTraceLine = traceLineObj.userAvatar;
				traceLine.nameUserTraceLine = traceLineObj.userName;
				traceLine.colorUserTraceLine = traceLineObj.userColor;
				traceLine.durationSession = durationSession;
				traceLine.startTimeSession = startRecordingSession;								
				traceLine.idUserTraceLine = userId;		
				traceLine.tempList = traceLineObj.listTitleObsels;
				traceLine.listElementTraceline = traceLineObj.listElementTraceLine;
 				traceLine.addEventListener(TraceLineEvent.ADD_LIST_OBSEL, onAddListObsel);
				traceLine.addEventListener(TraceLineEvent.REMOVE_LIST_OBSEL, onRemoveListObsel); 
				
				traceLine.addEventListener(FlexEvent.CREATION_COMPLETE, onCreationCompletTraceLine);
			
				if(userId == Model.getInstance().getLoggedUser().id_user)
				{
					// create sessionTimeLine
					this.createSessionTimeLine(durationSession,0); 
					this.testTimeLine = traceLine;
					
					traceLine.nameUserTraceLine = fxgt.gettext("Ma trace");
					this.traceLineGroup.addElementAt(traceLine, 0); 
					
				}else
				{
					this.traceLineGroup.addElement(traceLine);
				}
				traceLineObj.show = true;
			}
			
			private function onMouseClickOnTimeLine(event:MouseEvent):void
			{
				var target:Object = event.target as Object;
				var deltaXObselTime:Number = 0;
				// checing if user clicked on ObselTime
				if (target is ObselTime)
				{
					deltaXObselTime = target.x;
				}
				var localX:Number = event.localX + deltaXObselTime;
				var timeStartSession:Number = this.testTimeLine.startTimeSession;
				var duration:Number = this.testTimeLine.durationSession;
				var groupTimeLine:Group = event.currentTarget as Group;
				var wightGroup:Number = groupTimeLine.width;
				var delta:Number = Math.round(((localX*duration)/wightGroup)/1);
				updateTimeCursor(delta);
				var begin :Number = delta + timeStartSession;
				this.pickCheryClick = begin;
				
				// remove all streams and listeners
				this.removeAllStreams();
				var listObselSessionIn:ArrayCollection = Model.getInstance().getObselSessionInByTimestamp(begin);
				// update checking sum flux video
				this.checkingSumFluxVideo = this.getSumBeginTimeObselSI(listObselSessionIn);
				this.addFluxVideo(listObselSessionIn);
				// running the flux video
				if(!this.timer.running)
				{
					var timePausedNumber:Number = new Date().time -  this.timePause;
					this.timeStart = this.timeStart  + timePausedNumber;
					this.timer.start();
					this.sessionTimeLine.setShowButtonNavigation(true);
				}
				// update buttons play/stop
				this.sessionTimeLine.setStatusPlay(true);
				/* panelTimeLine.title = begin.toString();
				panelTimeLine.title += "  >>> "+listObselSessionIn.length.toString(); */
				
			}
			
			 private function addFluxVideo(listObselSessionIn:ArrayCollection):void
			 {
				 var nbrObsel:int = listObselSessionIn.length;
				 for(var nObsel:int= 0; nObsel < nbrObsel; nObsel++ )
				 {
					 var obsel:Obsel = listObselSessionIn.getItemAt(nObsel) as Obsel;
					 var pathVideo:String = obsel.props[TraceModel.PATH];
					 var stream:NetStream = this.visio.addVideoStream(pathVideo);
					 // add listener for this stream
					 if (stream != null)
					 {
						 stream.addEventListener( NetStatusEvent.NET_STATUS, remoteStreamStatusHandler);
					 }
				 }
			 }
			
			private function remoteStreamStatusHandler(event:NetStatusEvent):void
			{
				var stream:NetStream = event.currentTarget as NetStream;
				switch( event.info.code)
				{
					case "NetStream.Play.Start" :
						// set status play
						this.visio.status = VisuVisio.STATUS_REPLAY;
						stream.removeEventListener( NetStatusEvent.NET_STATUS, remoteStreamStatusHandler);
						var streamId:String = event.info.details;
						var obsel:Obsel = Model.getInstance().getObselSessionInByPathStream(streamId);
						if(obsel == null)
						{
							Alert.show("Salon retrospection, hasn't obsel with path = "+streamId,"Message ....."); 
						}
						// here error ???
						var timeBeginRFN:Number = obsel.begin;
						var deltaSecond:Number = (this.pickCheryClick - timeBeginRFN)/1000;
						//panelTimeLine.title = deltaSecond.toString() + "cherry pick = "+ this.pickCheryClick.toString();
						stream.seek(deltaSecond);		
						break;
				}
				
			}
					
			private function startTimer():void
			{
				this.timeStart = new Date().time;
				if(!timer)
				{
					timer = new Timer(1000,0);
					timer.addEventListener(TimerEvent.TIMER, updateTime);
				}
				timer.start();
			}
			
			private function updateTime(event:TimerEvent):void
			{
				var beginTime:Number = new Date().time - this.timeStart + this.deltaTime;
				this.testCursor.setBegin(beginTime);
				this.testCursor.setEnd(beginTime);
				this.sessionTimeLine.labelCurrentTimeSession.text = updateLabelTimer(beginTime);
				this.sessionTimeLine.sessionTimeLineLoggedUser.invalidateDisplayList();
				this.checkFluxVideo(beginTime + this.testTimeLine.startTimeSession);
			}
			
			private function updateTimeCursor(value:Number):void
			{
				this.timeStart = new Date().time;
				this.deltaTime = value;
			}
			
			private function checkFluxVideo(value:Number):void
			{
				var sumBeginTimeStamp:Number = 0;
				var listObselSI:ArrayCollection = Model.getInstance().getObselSessionInByTimestamp(value);
				var nbrObsel:int = listObselSI.length;
				if(nbrObsel == 0 ){this.removeAllStreams(); return;}
				// get sem the begin of obsels sessionIn 
				sumBeginTimeStamp = this.getSumBeginTimeObselSI(listObselSI);
				if(sumBeginTimeStamp != this.checkingSumFluxVideo)
				{
					this.removeAllStreams();
					this.addFluxVideo(listObselSI);
					this.checkingSumFluxVideo = sumBeginTimeStamp;
				}	
			}
			
			private function getSumBeginTimeObselSI(listObselSI:ArrayCollection):Number
			{
				var result:Number = 0;
				var nbrObsel:int = listObselSI.length;
				for(var nObsel:int = 0; nObsel < nbrObsel ; nObsel++ )
				{
					var obsel:Obsel = listObselSI.getItemAt(nObsel) as Obsel;
					var begin:Number = obsel.begin;
					result += begin;
				}	
				return result;
			}
			
			private function updateLabelTimer(value:Number):String
			{
				var totalSecond:int = value/1000;
				var minNumber:int = new int(totalSecond/60);
				var hourNumber:int = new int(totalSecond/3600);
				var secString:String="";
				var minString:String="";
				var hourString:String="";
				var secons:Number = totalSecond - minNumber*60;
				secString = secons.toString();
				if(secons < 10)
				{
					secString = "0"+secString;
				}
				var min:Number = minNumber - hourNumber*60;
				minString = min.toString();
				if(min < 10)
				{
					minString = "0" + minString;
				}
				hourString = hourNumber.toString();
				if(hourNumber < 10)
				{
					hourString = "0"+hourString;	
				}
				return  hourString+":"+minString+":"+secString;
				
			}
			
			private function onAddListObsel(event:TraceLineEvent):void{
				var listObsel:ArrayCollection = event.listObsel;
				var userTraceLineId:int = (event.currentTarget as TraceLineB).idUserTraceLine;
				Model.getInstance().addListObselTitleTraceLine(userTraceLineId, listObsel);
			}
			/**
			 * remove list obsel to Model 
			 */	
			private function onRemoveListObsel(event:TraceLineEvent):void{
				var listObsel:ArrayCollection = event.listObsel;
				var userTraceLineId:int = (event.currentTarget as TraceLineB).idUserTraceLine;
				Model.getInstance().removeListObselTitleTraceLine(userTraceLineId, listObsel);
			}
			private function onCreationCompletTraceLine(event:FlexEvent):void
			{
				var traceLine:TraceLineB = event.currentTarget as TraceLineB;
				traceLine.removeEventListener(FlexEvent.CREATION_COMPLETE, onCreationCompletTraceLine);
				traceLine.listTitleObsels = traceLine.tempList;		
 				var userId:int = traceLine.idUserTraceLine;
				traceLine.checkBoxMarkerObsel.selected = true;
				if(userId == Model.getInstance().getLoggedUser().id_user)
				{
					sessionTimeLine.sessionTimeLineLoggedUser.left = traceLine.traceLoggedUser.left;
					sessionTimeLine.sessionTimeLineLoggedUser.addEventListener(MouseEvent.CLICK, onMouseClickOnTimeLine);
					this.testCursor = new ObselLine();
					this.testCursor.height = 50;
					var beginTime:Number = new Date().time - this.testTimeLine.startTimeSession;
					this.testCursor.setBegin(beginTime);
					this.testCursor.setEnd(beginTime);
					this.sessionTimeLine.sessionTimeLineLoggedUser.addElement(this.testCursor); 
					// set pickCherryClick
					this.pickCheryClick = 0;
					this.startTimer();
					// show buttons navigation
					this.sessionTimeLine.setShowButtonNavigation(true);
					// set status play the buttos
					this.sessionTimeLine.setStatusPlay(true);
					durationSessionSlider.enabled = true;
					startTimeSessionSlider.enabled = true;
				} 
				
			}
			private function setObsels():void{
				// add obsels traceLine 
				var listObsels:ArrayCollection = Model.getInstance().getListObsels();
				if (listObsels != null)
				{	
					var nbrObsels:int = listObsels.length;
					for(var nObsel:int = 0 ; nObsel < nbrObsels; nObsel++)
					{
						var obsel:Obsel = listObsels[nObsel] as Obsel;
					//	this.addObsel(obsel);
						Model.getInstance().addObsel(obsel);
					}
				}
				// add obsels traceLineComment
				var listObselComment:ArrayCollection = Model.getInstance().getListObselComment();
				if (listObselComment != null)
				{	
					var nbrObselComment:int = listObselComment.length;
					for(var nObselComment:int = 0 ; nObselComment < nbrObselComment; nObselComment++)
					{
						var obselComment:Obsel = listObselComment[nObselComment] as Obsel;
						Model.getInstance().addObselComment(obselComment,false);
					}
				}
			}
			
			private function hasElement():Boolean
			{
				var nbrElm:int = this.groupTimeLine.numElements;
				for(var nElm:int = 0; nElm < nbrElm; nElm++)
				{
					var obj = this.groupTimeLine.getElementAt(nElm);
					if(obj is TraceLineComment)
					{
						return true;
					}
				}
				return false;
			}
			
			private function clearTraceLines():void
			{
				// init list traceLines
				Model.getInstance().initListTraceLine();
				this.traceLineGroup.removeAllElements();
				this.sessionTimeLine.sessionTimeLineLoggedUser.removeAllElements();
				if(hasElement())
				{
					var obj = this.groupTimeLine.removeElement(commentTimeLine);
					var t = 1;
				}
				this.deltaTime = 0;
				// set checksum in zero
				this.checkingSumFluxVideo = 0;
			}
			
			protected function onMouseClickSessionViewCloseSession(event:MouseEvent):void
			{
				
				this.clearTraceLines();
				
				var sessionView:SessionViewSalonRetro = event.currentTarget as SessionViewSalonRetro;
				var getListObselEvent:SessionEvent = new SessionEvent(SessionEvent.GET_LIST_OBSEL_CLOSED_SESSION);  
				getListObselEvent.sessionId = sessionView.sessionId;
				this.dispatchEvent(getListObselEvent);
				// update label panel
				panelTimeLine.title = fxgt.gettext("Résumé de l'activité la séance partagées: ")+sessionView.theme;
			}

			protected function onMouseClickSessionViewOpenSession(event:MouseEvent):void
			{

				this.clearTraceLines();
				
				var sessionView:SessionViewSalonRetro = event.currentTarget as SessionViewSalonRetro;
				var traceId:String = sessionView.traceId;
				var getListObselEvent:SessionEvent = new SessionEvent(SessionEvent.GET_LIST_OBSEL);
				getListObselEvent.traceId = traceId;
				getListObselEvent.sessionId = sessionView.sessionId;
				this.dispatchEvent(getListObselEvent);
				// update panel titre
				panelTimeLine.title = fxgt.gettext("Résumé de l'activité la séance : ")+sessionView.theme;
			}

			protected function durationSessionSlider_valueCommitHandler(event:FlexEvent):void
			{
				var hSlider:HSlider = event.currentTarget as HSlider;
				var duration:int = hSlider.value;
				// TODO gestion time the session
				this.sessionTimeLine.sessionTimeLineLayout.durationSession = duration;
				var nbrTraceLine:int = this.traceLineGroup.numElements;
				for(var nTraceLine:int = 0; nTraceLine < nbrTraceLine; nTraceLine++)
				{
					var traceLine:TraceLineB = this.traceLineGroup.getElementAt(nTraceLine) as TraceLineB;
					traceLine.durationSession = duration;
				}	
				this.commentTimeLine.durationSession = duration;
			}
			
			
			protected function startTimeSessionSlider_valueCommitHandler(event:FlexEvent):void
			{
				var hSlider:HSlider = event.currentTarget as HSlider;
				var startTime:Number = hSlider.value;
				// TODO gestion time the session`
				var startTimeSessionTimeLayout:Number = startTime -  this.currentSessionDateRecording.time;
				this.sessionTimeLine.sessionTimeLineLayout.startTime = startTimeSessionTimeLayout;
				var nbrTraceLine:int = this.traceLineGroup.numElements;
				for(var nTraceLine:int = 0; nTraceLine < nbrTraceLine; nTraceLine++)
				{
					var traceLine:TraceLineB = this.traceLineGroup.getElementAt(nTraceLine) as TraceLineB;
					traceLine.startTimeSession = startTime;
				}
				this.commentTimeLine.startTimeSession = startTime;
			}
		]]>
		
	</fx:Script>
	<modules:states>
		<s:State name="State1"/>
		<s:State name="vciel"/>
	</modules:states>
	<fx:Declarations>
		<maps:RetrospectionMap id="retrospectionMap"  dispatcher="{this}"/>
		<mate:Listener type="{SessionEvent.LOAD_LIST_SESSION_SALON_RETROSPECTION}"  method="updateListSession"/>
		<mate:Listener type="{SessionEvent.LOAD_LIST_CLOSED_SESSION_SALON_RETROSPECTION}"  method="updateListClosedSession"/>
		<mate:Listener type="{SessionEvent.LOAD_LIST_OBSEL_RETRO}"  method="updateTimeLine"/>
		<mate:Listener type="{SessionEvent.LOAD_SESSION_SALON_RETROSPECTION}"  method="updateSessionDate"/>
	</fx:Declarations>
<mx:HDividedBox height="100%" width="100%">
	<mx:VDividedBox width="100%" height="100%">
		<mx:HDividedBox width="100%" height="60%">
			<s:Panel height="100%" width="70%">
				<s:title>Video</s:title>
				<s:Group height="100%" width="100%">
					<s:layout>
						<s:HorizontalLayout gap="0"/>
					</s:layout>
					<controls:VisuVisio id="visio" width="100%" top="0"
										quality="80"
										bandwidth="15000" autoPlay="True" height="100%" />
					
				</s:Group>
			</s:Panel>
			<mx:VDividedBox width="30%" height="100%" maxWidth="330">
				<s:Panel width="100%" height="50%">
					<s:title>{fxgt.gettext("Mes séances(consernent uniquement vos activités dans les séances)")}</s:title>
					<!--<s:toolTip>{fxgt.gettext("(consernent uniquement vos activités dans les séances)")}</s:toolTip>-->
					<s:Group width="100%" height="100%" top="5">
						<s:layout >
							<s:VerticalLayout gap="0"/>
						</s:layout>
						<s:Group width="100%" height="100%">
							<s:Scroller  left="1" right="1" top="1" bottom="1">
								<s:Group  id="groupOpenSession"  width="100%" height="100%">
									<s:layout>
										<s:VerticalLayout gap="5"/>
									</s:layout>
								</s:Group>
							</s:Scroller>
						</s:Group>
					</s:Group>
				</s:Panel>
				<s:Panel width="100%" height="50%" includeIn="vciel">
					<s:title>{fxgt.gettext("Les séances partagées(consernent les séances fermés uniquement)")}</s:title>
					<!--<s:toolTip>{fxgt.gettext("(consernent les séances fermés uniquement)")}</s:toolTip>-->
					<s:Group width="100%" height="100%" top="5">
						<s:layout >
							<s:VerticalLayout gap="0"/>
						</s:layout>
						<s:Group width="100%" height="100%">
							<s:Scroller  left="1" right="1" top="1" bottom="1">
								<s:Group  id="groupCloseSession"  width="100%" height="100%">
									<s:layout>
										<s:VerticalLayout gap="5"/>
									</s:layout>
								</s:Group>
							</s:Scroller>
						</s:Group>
					</s:Group>
				</s:Panel>
			</mx:VDividedBox>
		</mx:HDividedBox>
		<s:Panel width="100%" height="40%" id="panelTimeLine">
			<s:title>{fxgt.gettext("Résumé de l'activité")}</s:title>
			<s:VGroup width="100%" height="100%" gap="0">
				<s:Group width="100%" height="100%" id="groupTimeLine">
					<timeline:TimeLineSession id="sessionTimeLine" width="100%"  showButtonNavigation="false" top="0"/>
					<s:Group width="100%" height="100%" top="75">
						<s:Scroller left="1" right="1" top="1" bottom="1" top.State1="1" left.State1="0" bottom.State1="1" right.State1="1">
							<s:Group width="100%" height="100%">
								<s:layout>
									<s:VerticalLayout gap="5"/>
								</s:layout>
								<s:Group id="traceLineGroup" width="100%" height="100%">
									<s:layout>
										<s:VerticalLayout gap="4"/>
									</s:layout>
								</s:Group>
							</s:Group>
						</s:Scroller>
					</s:Group>
				</s:Group>
				<s:HGroup>
					<s:HSlider id="startTimeSessionSlider" 
							   liveDragging="true" width="300"  valueCommit="startTimeSessionSlider_valueCommitHandler(event)" enabled="false"/>
					<s:HSlider id="durationSessionSlider" 						   
							   liveDragging="true" width="300" valueCommit="durationSessionSlider_valueCommitHandler(event)" enabled="false"/>
				</s:HGroup>
			</s:VGroup>
		</s:Panel>
	</mx:VDividedBox>
</mx:HDividedBox>
</modules:VisuModuleBase>