<?xml version="1.0" encoding="utf-8"?>
<modules:VisuModuleBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx" 
						xmlns:modules="com.ithaca.visu.modules.*"
						
						width="100%" height="100%" 
						creationComplete="visumodulebase1_creationCompleteHandler(event)" 
						configure="visumodulebase1_configureHandler(event)" 
						xmlns:maps="maps.*" xmlns:mate="http://mate.asfusion.com/"	
						xmlns:timeline="com.ithaca.visu.controls.timeline.*"
						xmlns:controls="com.lyon2.controls.*"  currentState="State1" xmlns:video="com.ithaca.visu.view.video.*" xmlns:components="com.ithaca.utils.components.*"> 
	<fx:Script>
		<![CDATA[ 
			import com.ithaca.documentarisation.RetroDocumentSegment;
			import com.ithaca.documentarisation.RetroDocumentTreeToolTip;
			import com.ithaca.documentarisation.RetroDocumentView;
			import com.ithaca.documentarisation.events.RetroDocumentEvent;
			import com.ithaca.documentarisation.model.RetroDocument;
			import com.ithaca.documentarisation.renderer.RetroDocumentRenderer;
			import com.ithaca.traces.Obsel;
			import com.ithaca.traces.model.TraceModel;
			import com.ithaca.traces.view.ObselLine;
			import com.ithaca.traces.view.ObselStich;
			import com.ithaca.utils.UtilFunction;
			import com.ithaca.visu.controls.timeline.TraceLineB;
			import com.ithaca.visu.controls.timeline.TraceLineComment;
			import com.ithaca.visu.events.InitMapEvent;
			import com.ithaca.visu.events.MessageEvent;
			import com.ithaca.visu.events.ObselEvent;
			import com.ithaca.visu.events.PanelButtonEvent;
			import com.ithaca.visu.events.PanelEditInfoEvent;
			import com.ithaca.visu.events.SalonRetroEvent;
			import com.ithaca.visu.events.SessionEvent;
			import com.ithaca.visu.events.TraceLineEvent;
			import com.ithaca.visu.events.VisuModuleEvent;
			import com.ithaca.visu.model.Model;
			import com.ithaca.visu.model.Session;
			import com.ithaca.visu.model.User;
			import com.ithaca.visu.model.vo.RetroDocumentVO;
			import com.ithaca.visu.ui.utils.ConnectionStatus;
			import com.ithaca.visu.ui.utils.IconEnum;
			import com.ithaca.visu.view.video.PanelEditComment;
			import com.ithaca.visu.view.video.PanelEditInfo;
			import com.ithaca.visu.view.video.VisuVisioAdvancedEvent;
			
			import gnu.as3.gettext.FxGettext;
			import gnu.as3.gettext._FxGettext;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Panel;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ToolTipEvent;
			import mx.managers.CursorManager;
			import mx.managers.DragManager;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TrackBaseEvent;
			
			[Bindable]
			private var fxgt:_FxGettext;
			
			private var testCursor:ObselLine;
			private var testTimeLine:TraceLineB;
			
			[Bindable]
		//	private var timer:Timer;
			
			private var timerSynchro:Timer;
			private var timerRetroDocumentSegment:Timer;
			private var currentTimeSessionMilliseconds:Number;
			
			public var listSessionOpen : ArrayCollection;
			
			[Bindable]
			public var listSessionClose : ArrayCollection;
			
			private var pickCheryClick:Number = 0;
			private var commentTimeLine:TraceLineComment;
			private var currentSessionDateRecording:Date = null;
			private var currentSessionDuration:Number;
			private var currentSessionId:int;
			private var DELTA_STICH:int = 20;
			private var currentRetroDocumentSegmentPlaying:RetroDocumentSegment = null;
			private var beginTimeCurrentSegment:Number= 0;
			private var clickOnTimeLine:Boolean = true;
			
			// interval the decalage max in seconds
			[Bindable]
			private var maxIntervalDecalage:Number = 1.1;
			// interval the contol of the decalage im microseconds 
			private var INTERVAL_CONTROL_DECALAGE:Number = 10000;
			// interval the check the decalage in seconds
			[Bindable]
			private var intervalCheckDecalage:Number = 5;
			// time start session plus time in this session 
			private var currentTime:Number;
			private var pointPanelEditComment:Point;
			
			private var selectedSessionIdWhenInit:Number = -1;
			private var selectedRetroDocumentIdWhenInit:Number = -1;
			
			protected function visumodulebase1_configureHandler(event:VisuModuleEvent):void
			{	
				// init list trace lines
				Model.getInstance().initListTraceLine();
				
				if((event.currentTarget as RetrospectionModule).parameters != null)
				{
					//var param:Object = (event.currentTarget as RetrospectionModule).parameters ;
					//Model.getInstance().setCurrentSession(param as Session);
					
					var param:Array = (event.currentTarget as RetrospectionModule).parameters as Array ;
					var cameFromModule:String = param[0];
					switch (cameFromModule)
					{
					case "CameFromHomeModule" :
						// 
						break;
					case "CameFromBilanModule" :
						this.selectedRetroDocumentIdWhenInit = param[2]; 
						break;
					}
					// set selected sessionId
					var session:Session = param[1];
					Model.getInstance().setCurrentSession(session);
					this.selectedSessionIdWhenInit = session.id_session;
				}
				
				fxgt = FxGettext;
				// set current module
				Model.getInstance().setCurrentRetroModule(this);
				
				var initMapEvent:InitMapEvent = new InitMapEvent(InitMapEvent.INIT_MAP_RETROSPECTION);
				this.dispatchEvent(initMapEvent); 
				

				var getListObselEvent:SessionEvent = new SessionEvent(SessionEvent.GET_LIST_OBSEL_CLOSED_SESSION);  
				getListObselEvent.sessionId = selectedSessionIdWhenInit;
				// set current sessionId
				this.currentSessionId = session.id_session;
				this.dispatchEvent(getListObselEvent);
			}
			
			protected function visumodulebase1_creationCompleteHandler(event:FlexEvent):void
			{

				// check status logged user
				var loggedUser:User =  Model.getInstance().getLoggedUser();
				var statusLoggedUser:int =loggedUser.status; 
				if(statusLoggedUser == ConnectionStatus.CONNECTED)
				{
					Model.getInstance().updateStatusLoggedUser(ConnectionStatus.PENDING);
					var outSession:SessionEvent = new SessionEvent(SessionEvent.OUT_SESSION);
					outSession.userId = loggedUser.id_user;
					this.dispatchEvent(outSession);
				}
				
 				this.visio.connection = Model.getInstance().getNetConnection();
				// removing module from the stage
				this.addEventListener(Event.REMOVED_FROM_STAGE, onRemovedModuleFromStage);
				this.sessionTimeLine.addEventListener(MessageEvent.CHECK_SEEK_STREAM, onCheckSeekStream);
				// add obsel join retro room
				var joinSalonRetro:VisuModuleEvent = new VisuModuleEvent(VisuModuleEvent.GO_IN_MODULE);
				this.dispatchEvent(joinSalonRetro);
				
				this.startTimeSessionSlider.dataTipFormatFunction = formatStartTimeSlider;
				this.durationSessionSlider.dataTipFormatFunction = formatDurationSlider;
				// enable button add bilan
//				addRetroDocument.enabled = true;
				
				if( Model.getInstance().getModeDebug())
				{
					this.setCurrentState("debug");
					
					Model.getInstance().clearListFrameSplit();
					buttomTraceFrame.visible = true;
//					this.visio.frameRateSplit = Model.getInstance().getFrameRateSplit();
//					this.visio.setDebugMode();

					timerSynchro = new Timer(intervalCheckDecalage*1000,0);
					timerSynchro.addEventListener(TimerEvent.TIMER, updateTimerSynchro);
					timerSynchro.start();
				}
				this.panelDocumentarisation.title = fxgt.gettext("Documentarisation");
			}
			
			private function updateTimerSynchro(event:TimerEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
//					this.visio.synchroStreamsByValue(this.maxIntervalDecalage);
				}
			}
			
			private function onAddObselComment(event:ObselEvent):void
			{
				//  add obsel action user
				var eventAddCommentObsel:SalonRetroEvent = new SalonRetroEvent(SalonRetroEvent.ACTION_ON_COMMENT_TRACE_LINE);
				var beginTime:String = (commentTimeLine.startTimeSession + this.testCursor.getBegin()).toString();
				var deltaXObselTime:Number = 0;
				// type of creation comment
				eventAddCommentObsel.typeAction = TraceModel.RETRO_CLICK_BUTTON_START_CREATE_COMMENT_EVENT;
				if(!event.clickOnButtonAdd)
				{
					eventAddCommentObsel.typeAction = TraceModel.RETRO_DOUBLE_CLICK_TRACE_LINE_START_CREATE_COMMENT_EVENT;
					var localX:Number = event.clickLocalX + deltaXObselTime;
					var timeStartSession:Number = this.testTimeLine.startTimeSession;
					var duration:Number = this.testTimeLine.durationSession;
					var wightGroup:Number = commentTimeLine.traceTitleLoggedUser.width;
					var delta:Number = Math.round(((localX*duration)/wightGroup)/1);
					var begin :Number = delta + timeStartSession;
					beginTime = begin.toString();
				}				
				var obsel:Obsel = new Obsel(TraceModel.SET_TEXT_COMMENT, 0, null, Number(beginTime));
				obsel.props[TraceModel.COMMENT_FOR_USER_ID] = Model.getInstance().getLoggedUser().id_user;
				obsel.props[TraceModel.TIMESTAMP] = 0;
				obsel.props[TraceModel.TEXT] = "....";
				Model.getInstance().addObselComment(obsel,true, commentTimeLine.traceTitleLoggedUser);
				
				eventAddCommentObsel.timeObselBegin = Number(beginTime);
				eventAddCommentObsel.timeObselEnd = Number(beginTime);
				this.dispatchEvent(eventAddCommentObsel);
			}
			
			private function onEditObselComment(event:ObselEvent):void
			{
 				var addObselComment:TraceLineEvent = new TraceLineEvent(TraceLineEvent.UPDATE_COMMENT_OBSEL);
				addObselComment.traceComment = Model.getInstance().getCurrentCommentTraceId()
				addObselComment.traceParent = Model.getInstance().getCurrentTraceId();
				addObselComment.typeObsel  = TraceModel.UPDATE_TEXT_COMMENT;
				var text:String = event.textObsel; 
				// check if message empty
				if(UtilFunction.isEmptyMessage(text))
				{
					text = fxgt.gettext("(vide)");
				}
				addObselComment.textComment = text;
				addObselComment.beginTime = event.obsel.begin.toString();
				addObselComment.endTime = event.obsel.end.toString();
				addObselComment.forUserId = Model.getInstance().getLoggedUser().id_user;
				addObselComment.sessionId = Model.getInstance().getCurrentSessionId();
				var timeStamp:Number = event.obsel.props[TraceModel.TIMESTAMP];
				if(timeStamp == 0)
				{
					addObselComment.typeObsel  = TraceModel.SET_TEXT_COMMENT;
				}
				addObselComment.timeStamp = timeStamp;
				this.dispatchEvent(addObselComment);	
				Model.getInstance().setCurrentObselComment(null,commentTimeLine.traceTitleLoggedUser);	
			}
			
			private function onDeleteObselComment(event:ObselEvent):void
			{
				var addObselComment:TraceLineEvent = new TraceLineEvent(TraceLineEvent.UPDATE_COMMENT_OBSEL);
				addObselComment.traceComment = Model.getInstance().getCurrentCommentTraceId()
				addObselComment.traceParent = Model.getInstance().getCurrentTraceId();
				addObselComment.typeObsel  = TraceModel.DELETE_TEXT_COMMENT;
				var text:String = event.textObsel; 
				// check if message empty
				if(UtilFunction.isEmptyMessage(text))
				{
					text = fxgt.gettext("(vide)");
				}
				addObselComment.textComment = text;
				addObselComment.beginTime = event.obsel.begin.toString();
				addObselComment.endTime = event.obsel.begin.toString();
				addObselComment.forUserId = Model.getInstance().getLoggedUser().id_user;
				addObselComment.sessionId = Model.getInstance().getCurrentSessionId();
				addObselComment.timeStamp = event.obsel.props[TraceModel.TIMESTAMP];
				this.dispatchEvent(addObselComment);
				Model.getInstance().setCurrentObselComment(null, null);	
			}
			
			private function onPreActionUserObselComment(event:SalonRetroEvent):void
			{
				var beginTime:Number;
				var endTime:Number;
				var timeStamp:Number;
				 var onActionUserStartEditCancelEditObsel:SalonRetroEvent = new SalonRetroEvent(SalonRetroEvent.ACTION_ON_OBSEL_COMMENT_START_EDIT_CANCEL_EDIT);
				onActionUserStartEditCancelEditObsel.editTypeCancel = event.editTypeCancel;
				onActionUserStartEditCancelEditObsel.text = event.text;
				onActionUserStartEditCancelEditObsel.typeAction = event.typeAction;
				var obsel:Obsel = event.obsel;
				if ( obsel == null)
				{
					beginTime = 0;
					endTime = 0;
					timeStamp = 0;
				}else
				{
					beginTime = obsel.begin;
					endTime = obsel.end;
					timeStamp = event.timeStamp;
				}
				onActionUserStartEditCancelEditObsel.timeStamp = timeStamp;
				onActionUserStartEditCancelEditObsel.timeObselBegin = beginTime;
				onActionUserStartEditCancelEditObsel.timeObselEnd = endTime;
				this.dispatchEvent(onActionUserStartEditCancelEditObsel);
			}
			/**
			 * Removing all streams and local devices
			 */
			private function onRemovedModuleFromStage(event:Event):void
			{
				if(this.visio != null)
				{
					this.removeAllStreams();
					this.visio.removeTimer();
					
					if(this.timerRetroDocumentSegment)
					{
						this.timerRetroDocumentSegment.stop();			
					}
					// add obsel user walk out from retro room
					var outFromSalonRetro:VisuModuleEvent = new VisuModuleEvent(VisuModuleEvent.WALK_OUT_MODULE);
					this.dispatchEvent(outFromSalonRetro);
				}
				// set current module null
				Model.getInstance().setCurrentRetroModule(null);
			}
			
			/**
			 * remove all listeners the stream here and remove the streams from VisuVisio
			 */
			// FIXME it's not necessary to remove all listeners
			private function removeAllStreams():void
			{
				this.visio.removeAllStreams();
			}
			

			
			private function setCurrentRetroDocumentSegmentPlaying(value:RetroDocumentSegment):void
			{
				this.currentRetroDocumentSegmentPlaying = value;
			}
			private function getCurrentRetroDocumentSegmentPlaying():RetroDocumentSegment
			{
				return this.currentRetroDocumentSegmentPlaying;
			}
			
			
			private function createSessionTimeLine(durationSession:Number,startSession:Number):void
			{
				// set current session duration 
				this.currentSessionDuration = durationSession;
				this.sessionTimeLine.sessionTimeLineLayout.durationSession = durationSession;
				this.sessionTimeLine.sessionTimeLineLayout.startTime = startSession;
				
				var widthGroup:Number = this.sessionTimeLine.sessionTimeLineLoggedUser.width;
				var nbrLabelTime:int = widthGroup/DELTA_STICH;
				nbrLabelTime = 50;
				var deltaTime:int = durationSession/nbrLabelTime;
				var every:int = 6;
				var count:int = 1;
				for(var nPart:int = 0 ; nPart < nbrLabelTime; nPart++)
				{
					var beginTimeObsel:Number = nPart*deltaTime;
					// in seconds
					
					var obselTime:ObselStich = new ObselStich()
					obselTime.setBegin(beginTimeObsel);
					obselTime.setEnd(beginTimeObsel);
					obselTime.height = 10;
					if(count == every)
					{
						obselTime.height = 20;
						count = 1;
						var minuts:int = (beginTimeObsel/1000)/60;
						var minutsString:String = minuts.toString();
						if(minuts<10){
							minutsString = "0"+minutsString; 
						}
						var seconds:int = (beginTimeObsel/1000)-minuts*60;
						var secondsString:String = seconds.toString();
						if(seconds < 10)
						{
							secondsString = "0"+secondsString;
						}
						obselTime.setLabel(minutsString+":"+secondsString);
					}
					count++;
					//obselTime.text = labelTextMin+" min.";
					this.sessionTimeLine.sessionTimeLineLoggedUser.addElement(obselTime);
				}
			}

			// creation the resume activity
			private function updateTimeLine(event:SessionEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					Model.getInstance().setCurrentObselComment(null, null);
					this.currentSessionDateRecording = event.dateStartRecording;
					var durationSession:Number = event.durationSessionRetro;
					var startRecordingSession:Number = event.dateStartRecording.time;
					// set timeStartSession in VisuVisioAdvaned
					this.visio.startTimeSession = startRecordingSession;
					// update label start session recording
					var dateStartRecording:Date = event.dateStartRecording;
					// show info the session 
					panelVideo.title = '"' + Model.getInstance().getCurrentSession().theme + '",' +
						fxgt.gettext(" enregistrée le ")+dateStartRecording.getDate().toString()+"-"+
						(dateStartRecording.getMonth() + 1).toString()+"-"+dateStartRecording.getFullYear().toString()+fxgt.gettext(" à ")+	 
						dateStartRecording.getHours().toString()+":"+dateStartRecording.getMinutes().toString();
					this.setObsels();
					var listTraceLines:ArrayCollection = Model.getInstance().getListTraceLines();
					if(listTraceLines != null)
					{
						var nbrTraceLines:int = listTraceLines.length;
						for(var nTraceLine:int =0; nTraceLine < nbrTraceLines ; nTraceLine++)
						{
							var traceLineObj:Object = listTraceLines[nTraceLine] as Object;						
							this.addTraceLineOnViewTraceLineGroup(traceLineObj,durationSession,startRecordingSession);
						}
					}
					// add view Obsel comment 
					this.commentTimeLine = new TraceLineComment();
					this.commentTimeLine.percentWidth = 100; 
					this.commentTimeLine.top = 40; 
					this.commentTimeLine.left = 1; 
					this.commentTimeLine.right = 1; 
					this.commentTimeLine.addEventListener(ObselEvent.ADD_OBSEL, onAddObselComment);
					this.commentTimeLine.addEventListener(ObselEvent.EDIT_OBSEL, onEditObselComment, true);
					this.commentTimeLine.addEventListener(ObselEvent.DELETE_OBSEL, onDeleteObselComment, true);
					this.commentTimeLine.addEventListener(SalonRetroEvent.PRE_ACTION_ON_OBSEL_COMMENT_START_EDIT_CANCEL_EDIT, onPreActionUserObselComment);
					this.commentTimeLine.visible = true;
					var nbrElement:int = groupTimeLine.numElements;
					groupTimeLine.addElementAt(this.commentTimeLine,nbrElement);
					commentTimeLine.durationSession = durationSession;
					commentTimeLine.startTimeSession = startRecordingSession;
					var obj:Object =  Model.getInstance().getTraceLineByUserId(Model.getInstance().getLoggedUser().id_user);
					if(obj == null)
					{
						// BUG ICI
						obj =  Model.getInstance().getTraceLineByUserId(0);
					}
					var backGroundColorObsel:uint = obj.userColor;
					this.commentTimeLine.backGroundColor = backGroundColorObsel;
					var listObselComment:ArrayCollection = Model.getInstance().getListViewObselComment();	
					commentTimeLine.listTitleObsels = listObselComment;		
					// update sliders
					this.startTimeSessionSlider.minimum = startRecordingSession;
					this.startTimeSessionSlider.maximum = startRecordingSession + durationSession;
					this.startTimeSessionSlider.value = startRecordingSession;		
					// creation slider session duration
					if(durationSession < 60000)
					{
						this.durationSessionSlider.enabled = false;
					}else
					{
						this.durationSessionSlider.enabled = true;
						this.durationSessionSlider.minimum = 60000;
						this.durationSessionSlider.maximum = durationSession;
						this.durationSessionSlider.value  = durationSession;		
					}
				}
				// add drag listener
				setListenerDragVideo();
			}
			
			private function addTraceLineOnViewTraceLineGroup(traceLineObj:Object, durationSession:Number,startRecordingSession:Number):void
			{
				var userId:int = traceLineObj.userId;
				var traceLine:TraceLineB = new TraceLineB()
				traceLine.percentWidth = 100;
				//	traceLine.height = 30;
				traceLine.left = 0;
				traceLine.right = 0;
				traceLine.sourceImageUserTraceLine = traceLineObj.userAvatar;
				traceLine.nameUserTraceLine = traceLineObj.userName;
				traceLine.colorUserTraceLine = traceLineObj.userColor;
				traceLine.durationSession = durationSession;
				traceLine.startTimeSession = startRecordingSession;								
				traceLine.idUserTraceLine = userId;		
				traceLine.tempList = traceLineObj.listTitleObsels;
				traceLine.listElementTraceline = traceLineObj.listElementTraceLine;
 				traceLine.addEventListener(TraceLineEvent.ADD_LIST_OBSEL, onAddListObsel);
				traceLine.addEventListener(TraceLineEvent.REMOVE_LIST_OBSEL, onRemoveListObsel); 
				
				traceLine.addEventListener(FlexEvent.CREATION_COMPLETE, onCreationCompletTraceLine);
				// listener activity user on observer the obsel
				traceLine.addEventListener(FlexEvent.CREATION_COMPLETE, onCreationCompletTraceLine);
			
				if(userId == Model.getInstance().getLoggedUser().id_user)
				{
					// create sessionTimeLine
					this.createSessionTimeLine(durationSession,0); 
					this.testTimeLine = traceLine;
					
					traceLine.nameUserTraceLine = fxgt.gettext("Ma trace");
					this.traceLineGroup.addElementAt(traceLine, 0); 
					
				}else
				{
					this.traceLineGroup.addElement(traceLine);
				}
				traceLineObj.show = true;
			}
			
			private function onMouseClickOnTimeLine(event:MouseEvent):void
			{	
				// stop play RetroDocumentSegment if playing
				this.clickOnTimeLine = true;
				// stop play video segment
				endVideoSegment();
				// update button play/pause
				sessionTimeLine.setLabelButtonPlayPause(false);
				var target:Object = event.target as Object;
				var deltaXObselTime:Number = 0;
				
				var localX:Number = event.stageX - event.currentTarget.x;
				
				var timeStartSession:Number = this.testTimeLine.startTimeSession;
				var duration:Number = this.testTimeLine.durationSession;
				var groupTimeLine:Group = event.currentTarget as Group;
				var wightGroup:Number = groupTimeLine.width;
				var delta:Number = Math.round(((localX*duration)/wightGroup)/1);
				// add value start session slider
				delta = delta + startTimeSessionSlider.value - this.currentSessionDateRecording.time;
				// pre play video flux
				prePlayVideoFlux(0,delta);						
			}
					
			private function removeTimerRetroDocumentSegment():void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{	
					if(timerRetroDocumentSegment != null)
					{
						timerRetroDocumentSegment.removeEventListener(TimerEvent.TIMER, endVideoSegment);
						timerRetroDocumentSegment = null;
					}
				}
			}
			
			private function startTimerRetroDocumentSegment(value:Number):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{	
					if(timerRetroDocumentSegment != null)
					{
						timerRetroDocumentSegment.removeEventListener(TimerEvent.TIMER, endVideoSegment);
						timerRetroDocumentSegment = null;
					}
					timerRetroDocumentSegment = new Timer(value,0);
					timerRetroDocumentSegment.addEventListener(TimerEvent.TIMER, endVideoSegment);
					timerRetroDocumentSegment.start();
				}
			}
			
			private function endVideoSegment(event:TimerEvent = null):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					// set time to current video segment 
					if(this.currentRetroDocumentSegmentPlaying != null)
					{
						var tempCurrentRetroDocumentSegment:RetroDocumentSegment = this.currentRetroDocumentSegmentPlaying;
						// set curentRetroDocumentSegment to null
						this.setCurrentRetroDocumentSegmentPlaying(null);
						tempCurrentRetroDocumentSegment.setBeginEndTime();
						
						if(!clickOnTimeLine)
						{
							// pause video if end playing video segment only
							this.pauseVideo();
						}
					}
					// check if timerRetroDocumentSegment not null, can be null if user see the VidoSegment => click on tileLine
					if(timerRetroDocumentSegment)
					{
						timerRetroDocumentSegment.stop();
						timerRetroDocumentSegment.removeEventListener(TimerEvent.TIMER, endVideoSegment);
						timerRetroDocumentSegment = null;
					}
					// init flag click on tume line
					clickOnTimeLine = false;
				}
			}
				
			private function updateLabelTimer(value:Number):String
			{
				var totalSecond:int = value/1000;
				var minNumber:int = new int(totalSecond/60);
				var hourNumber:int = new int(totalSecond/3600);
				var secString:String="";
				var minString:String="";
				var hourString:String="";
				var secons:Number = totalSecond - minNumber*60;
				secString = secons.toString();
				if(secons < 10)
				{
					secString = "0"+secString;
				}
				var min:Number = minNumber - hourNumber*60;
				minString = min.toString();
				if(min < 10)
				{
					minString = "0" + minString;
				}
				hourString = hourNumber.toString();
				if(hourNumber < 10)
				{
					hourString = "0"+hourString;	
				}
				return  hourString+":"+minString+":"+secString;
				
			}
			
			private function onAddListObsel(event:TraceLineEvent):void{
				var listObsel:ArrayCollection = event.listObsel;
				var userTraceLineId:int = (event.currentTarget as TraceLineB).idUserTraceLine;
				Model.getInstance().addListObselTitleTraceLine(userTraceLineId, listObsel);
			}
			/**
			 * remove list obsel to Model 
			 */	
			private function onRemoveListObsel(event:TraceLineEvent):void{
				var listObsel:ArrayCollection = event.listObsel;
				var userTraceLineId:int = (event.currentTarget as TraceLineB).idUserTraceLine;
				Model.getInstance().removeListObselTitleTraceLine(userTraceLineId, listObsel);
			}
			private function onCreationCompletTraceLine(event:FlexEvent):void
			{
				var traceLine:TraceLineB = event.currentTarget as TraceLineB;
				traceLine.removeEventListener(FlexEvent.CREATION_COMPLETE, onCreationCompletTraceLine);
				traceLine.listTitleObsels = traceLine.tempList;		
 				var userId:int = traceLine.idUserTraceLine;
				traceLine.checkBoxMarkerObsel.selected = true;
				if(userId == Model.getInstance().getLoggedUser().id_user)
				{
					sessionTimeLine.sessionTimeLineLoggedUser.left = traceLine.traceLoggedUser.left;
					sessionTimeLine.sessionTimeLineLoggedUser.addEventListener(MouseEvent.CLICK, onMouseClickOnTimeLine);
					this.testCursor = new ObselLine();
					this.testCursor.height = 50;
					var beginTime:Number = new Date().time - this.testTimeLine.startTimeSession;
					this.testCursor.setBegin(beginTime);
					this.testCursor.setEnd(beginTime);
					this.sessionTimeLine.sessionTimeLineLoggedUser.addElement(this.testCursor); 
					
					
					var listStreamObsel:ArrayCollection = Model.getInstance().getListStreamObsel();
					// set dataProvider with collection the StreamObsel
					this.visio.dataProvider = Model.getInstance().getListStreamObsel();
					
					// set pickCherryClick
					this.pickCheryClick = 0;					
					this.visio.startTimer();
					durationSessionSlider.enabled = true;
					startTimeSessionSlider.enabled = true;
				} 
				
			}
			private function setObsels():void{
				// add obsels traceLine 
				var listObsels:ArrayCollection = Model.getInstance().getListObsels();
				if (listObsels != null)
				{	
					var nbrObsels:int = listObsels.length;
					for(var nObsel:int = 0 ; nObsel < nbrObsels; nObsel++)
					{
						var obsel:Obsel = listObsels[nObsel] as Obsel;
					//	this.addObsel(obsel);
						Model.getInstance().addObsel(obsel);
					}
				}
				// add obsels traceLineComment
				var listObselComment:ArrayCollection = Model.getInstance().getListObselComment();
				if (listObselComment != null)
				{	
					var nbrObselComment:int = listObselComment.length;
					for(var nObselComment:int = 0 ; nObselComment < nbrObselComment; nObselComment++)
					{
						var obselComment:Obsel = listObselComment[nObselComment] as Obsel;
						Model.getInstance().addObselComment(obselComment,false);
					}
				}
			}
			
			private function hasElement():Boolean
			{
				var nbrElm:int = this.groupTimeLine.numElements;
				for(var nElm:int = 0; nElm < nbrElm; nElm++)
				{
					var obj = this.groupTimeLine.getElementAt(nElm);
					if(obj is TraceLineComment)
					{
						return true;
					}
				}
				return false;
			}
			
			protected function durationSessionSlider_valueCommitHandler(event:FlexEvent):void
			{
				var hSlider:HSlider = event.currentTarget as HSlider;
				var duration:int = hSlider.value;
				// TODO gestion time the session
				this.sessionTimeLine.sessionTimeLineLayout.durationSession = duration;
				var nbrTraceLine:int = this.traceLineGroup.numElements;
				for(var nTraceLine:int = 0; nTraceLine < nbrTraceLine; nTraceLine++)
				{
					var traceLine:TraceLineB = this.traceLineGroup.getElementAt(nTraceLine) as TraceLineB;
					traceLine.durationSession = duration;
				}	
				this.commentTimeLine.durationSession = duration;
			}
			
			
			protected function startTimeSessionSlider_valueCommitHandler(event:FlexEvent):void
			{
				var hSlider:HSlider = event.currentTarget as HSlider;
				var startTime:Number = hSlider.value;
				// TODO gestion time the session`
				var startTimeSessionTimeLayout:Number = startTime -  this.currentSessionDateRecording.time;
				this.sessionTimeLine.sessionTimeLineLayout.startTime = startTimeSessionTimeLayout;
				var nbrTraceLine:int = this.traceLineGroup.numElements;
				for(var nTraceLine:int = 0; nTraceLine < nbrTraceLine; nTraceLine++)
				{
					var traceLine:TraceLineB = this.traceLineGroup.getElementAt(nTraceLine) as TraceLineB;
					traceLine.startTimeSession = startTime;
				}
				this.commentTimeLine.startTimeSession = startTime;
			}

			protected function startTimeSessionSlider_thumbReleaseHandler(event:TrackBaseEvent):void
			{
				var actionVideoPlayer:SalonRetroEvent = new SalonRetroEvent(SalonRetroEvent.ACTION_ON_SLIDER_VIDEO_PLAYER);
				//actionVideoPlayer
				this.dispatchEvent(actionVideoPlayer);
			}


			protected function durationSessionSlider_thumbReleaseHandler(event:TrackBaseEvent):void
			{
				var actionVideoPlayer:SalonRetroEvent = new SalonRetroEvent(SalonRetroEvent.ACTION_ON_SLIDER_VIDEO_PLAYER);
				//actionVideoPlayer
				this.dispatchEvent(actionVideoPlayer);
			}
			
			
			//_____________________________________________________________________
			//
			// RetroDocument
			//
			//_____________________________________________________________________

			private function loadListRetroDocument(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					listRetroDocument.dataProvider = event.listRetroDocument;
					listRetroDocument.labelField = "title";
					
					this.groupRetroDocumentView.removeAllElements();
					
					var messageAboutRetroDocument:Label = new Label();
					messageAboutRetroDocument.percentWidth = 100;
					messageAboutRetroDocument.percentHeight = 100;
					messageAboutRetroDocument.y = this.groupRetroDocumentView.height/2;					
					messageAboutRetroDocument.text =  fxgt.gettext("Aucun bilan sélectionné");
					this.groupRetroDocumentView.addElement(messageAboutRetroDocument);
					
					if(selectedRetroDocumentIdWhenInit > 0)
					{
						var nbrRetroDocument:int = listRetroDocument.dataProvider.length;
						for(var nRetroDocument:int = 0; nRetroDocument < nbrRetroDocument; nRetroDocument++ )
						{
							var retrodocumentVO:RetroDocumentVO = listRetroDocument.dataProvider.getItemAt(nRetroDocument) as RetroDocumentVO;
							if(retrodocumentVO.documentId == selectedRetroDocumentIdWhenInit)
							{
								listRetroDocument.selectedIndex = nRetroDocument;
								// load retroDocument
								dispatchLoadRetroDocument(retrodocumentVO);
								break;
							}
						}
					}
					// set cursor 
					CursorManager.removeBusyCursor();
				}
			}
			
				
			private function showRetroDocument(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					initRetroDocument(event.retroDocument, event.listUser);
				}
			}
			
			//_____________________________________________________________________
			//
			// Listeners RetroDocumentView
			//
			//_____________________________________________________________________			
			private function onPreUpdateRetroDocument(event:RetroDocumentEvent):void
			{
				var dateLastModify:Date = new Date(null,null,null,null,null,null,Model.getInstance().getTimeServeur());
				var retroDocumentVO:RetroDocumentVO = event.retroDocumentVO;
				retroDocumentVO.lastModified = dateLastModify;
				var updateRetrodocument:RetroDocumentEvent = new RetroDocumentEvent(RetroDocumentEvent.UPDATE_RETRO_DOCUMENT);
				updateRetrodocument.retroDocumentVO = retroDocumentVO;
				updateRetrodocument.listUser = event.listUser;
				this.dispatchEvent(updateRetrodocument);		
			}
			
			private function onClickButtonSwitch(event:RetroDocumentEvent):void
			{
				var switchModuleEvent:RetroDocumentEvent = new RetroDocumentEvent(RetroDocumentEvent.GO_BILAN_MODULE_FROM_RETRO);
				switchModuleEvent.sessionId = event.sessionId;
				switchModuleEvent.idRetroDocument = event.idRetroDocument;
				this.dispatchEvent(switchModuleEvent);
			}
			
			private function updateLabelButtonPlayStopRetroDocumentSegment(value:RetroDocumentSegment = null):void
			{
				// change labels on the buttons the retroDocumentSegment
				var retroDocmentView:RetroDocumentView = groupRetroDocumentView.getElementAt(0) as RetroDocumentView;
				if(retroDocmentView != null){
//					retroDocmentView.updateButtonPlayStop(value);			
				}
			}

			protected function addRetroDocument_clickHandler(event:MouseEvent):void
			{
				var retroDocumentVO:RetroDocumentVO = new RetroDocumentVO();
				var creatinDateNumber:Number = Model.getInstance().getTimeServeur();
				retroDocumentVO.creationDate = new Date(null,null,null,null,null,null,creatinDateNumber);
				retroDocumentVO.description = "new description here";
				retroDocumentVO.documentId = 0;
				retroDocumentVO.lastModified = retroDocumentVO.creationDate;
				var createurUser:User = Model.getInstance().getLoggedUser();
				retroDocumentVO.ownerId = createurUser.id_user;
				retroDocumentVO.sessionId = this.currentSessionId;
				retroDocumentVO.title = "le nouveau bilan ici";

				var nomCreateur:String = createurUser.lastname + " "+ createurUser.firstname;
				var stringXML:String = UtilFunction.createRetroDocumentXML(retroDocumentVO.title, retroDocumentVO.description,nomCreateur,retroDocumentVO.creationDate,retroDocumentVO.creationDate)
				retroDocumentVO.xml = stringXML;
				var createRetroDocumentVOEvent:RetroDocumentEvent = new RetroDocumentEvent(RetroDocumentEvent.CREATE_RETRO_DOCUMENT);
				createRetroDocumentVOEvent.retroDocumentVO = retroDocumentVO;
				createRetroDocumentVOEvent.sessionId = this.currentSessionId;;
				this.dispatchEvent(createRetroDocumentVOEvent);
			}
			//_____________________________________________________________________
			//
			// Listeners PanelDocumentarisation
			//
			//_____________________________________________________________________
			protected function panelDocumentarisation_clickButtonAddHandler(event:PanelButtonEvent):void
			{
				var retroDocumentVO:RetroDocumentVO = new RetroDocumentVO();
				var creatinDateNumber:Number = Model.getInstance().getTimeServeur();
				retroDocumentVO.creationDate = new Date(null,null,null,null,null,null,creatinDateNumber);
				retroDocumentVO.description = "new description here";
				retroDocumentVO.documentId = 0;
				retroDocumentVO.lastModified = retroDocumentVO.creationDate;
				var createurUser:User = Model.getInstance().getLoggedUser();
				retroDocumentVO.ownerId = createurUser.id_user;
				retroDocumentVO.sessionId = this.currentSessionId;
				retroDocumentVO.title = "Nouveau bilan";
				
				var nomCreateur:String = createurUser.lastname + " "+ createurUser.firstname;
				var stringXML:String = UtilFunction.createRetroDocumentXML(retroDocumentVO.title, retroDocumentVO.description,nomCreateur,retroDocumentVO.creationDate,retroDocumentVO.creationDate)
				retroDocumentVO.xml = stringXML;
				var createRetroDocumentVOEvent:RetroDocumentEvent = new RetroDocumentEvent(RetroDocumentEvent.CREATE_RETRO_DOCUMENT);
				createRetroDocumentVOEvent.retroDocumentVO = retroDocumentVO;
				this.dispatchEvent(createRetroDocumentVOEvent);
				
				// set mouse cursor
				CursorManager.setBusyCursor();
				// set new RetroDocument
				this.listRetroDocument.dataProvider.addItem(retroDocumentVO);
				this.listRetroDocument.selectedItem = retroDocumentVO;
				var retroDocument:RetroDocument = new RetroDocument(retroDocumentVO);
				retroDocument.setRetroDocumentXML(retroDocumentVO.xml);
				initRetroDocument(retroDocument, new Array());
				
			}

			private function initRetroDocument(retroDocument:RetroDocument, listUser:Array ):void
			{
				var retroDocumentView:RetroDocumentView = new RetroDocumentView();
				retroDocumentView.percentWidth = 100;
				retroDocumentView.percentHeight = 100;
				retroDocumentView.setEditabled(true);
				retroDocumentView.retroDocument = retroDocument;
				retroDocumentView.startDateSession = this.currentSessionDateRecording.time;
				retroDocumentView.durationSession = this.currentSessionDuration;
				retroDocumentView.profiles = Model.getInstance().profiles;
				retroDocumentView.listShareUser = listUser;
				retroDocumentView.listUsersPresentOnTimeLine = Model.getInstance().getListUserPresentOnTimeLine();	
				retroDocumentView.addEventListener(RetroDocumentEvent.PRE_UPDATE_RETRO_DOCUMENT, onPreUpdateRetroDocument);
				retroDocumentView.addEventListener(RetroDocumentEvent.CLICK_BUTTON_SWITCH, onClickButtonSwitch);
				groupRetroDocumentView.removeAllElements();
				groupRetroDocumentView.addElement(retroDocumentView);
			}
			/**
			 * set id the retrodocument
			 */ 
			protected function updateAddedRetroDocument(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					// update id retroDocument 
					var retroDocmentView:RetroDocumentView = groupRetroDocumentView.getElementAt(0) as RetroDocumentView;
					retroDocmentView.retroDocument.id = event.idRetroDocument;
					// update id retroDocument in the list retroDocuments
					var nbrRetroDocumentVO:int = this.listRetroDocument.dataProvider.length;
					for(var nRetroDocumentVO:int = 0; nRetroDocumentVO < nbrRetroDocumentVO; nRetroDocumentVO++)
					{
						var retroDocumentVO:RetroDocumentVO = this.listRetroDocument.dataProvider.getItemAt(nRetroDocumentVO) as RetroDocumentVO;
						if(retroDocumentVO.documentId == 0)
						{
							retroDocumentVO.documentId = event.idRetroDocument;
							break;
						}
					}
					// remove cursor
					CursorManager.removeBusyCursor();
				}
			}			
			//_____________________________________________________________________
			//
			// Listeners ListRetroDocument
			//
			//_____________________________________________________________________
			
			protected function listRetroDocument_changeHandler(event:IndexChangeEvent):void
			{
				var retroDocumentVO:RetroDocumentVO = this.listRetroDocument.dataProvider.getItemAt(event.newIndex) as RetroDocumentVO;
				dispatchLoadRetroDocument(retroDocumentVO);
			}
			
			private function dispatchLoadRetroDocument(value:RetroDocumentVO):void
			{
				var loadRetroDocument:RetroDocumentEvent = new RetroDocumentEvent(RetroDocumentEvent.LOAD_RETRO_DOCUMENT);
				loadRetroDocument.idRetroDocument =  value.documentId
				loadRetroDocument.editabled = true;				
				this.dispatchEvent(loadRetroDocument);
			}
			/**
			 * update title the retroDocument
			 */
			private function updateTitleRetroDocument(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var index:int = listRetroDocument.selectedIndex;
					var retroDocumentVO:RetroDocumentVO = this.listRetroDocument.dataProvider.getItemAt(index) as RetroDocumentVO;
					retroDocumentVO.title = event.titleRetrodocument;
				}
			}
			
			/**
			 * update list segment the retroDocument
			 */
			private function onUpdateListSegmentRetroDocument(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var index:int = listRetroDocument.selectedIndex;
					var retroDocumentVO:RetroDocumentVO = this.listRetroDocument.dataProvider.getItemAt(index) as RetroDocumentVO;
					retroDocumentVO.xml = event.xmlRetrodocument;
					//retroDocumentVO.title = event.titleRetrodocument;
				}
			}

			
			private function loadedAllUsers(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var currentRetroDocumentView:RetroDocumentView = groupRetroDocumentView.getElementAt(0) as RetroDocumentView;
					currentRetroDocumentView.allUsers = event.listUser;
				}
			}
			
			/**
			 * format text slider duration of the session
			 */
			private function formatDurationSlider(value:Number):Object { 
				var duration:int = value/60000;
				var percent:int = (value*100/durationSessionSlider.maximum);
				var result:String = percent.toString() + " %";
				return result;
			}
			
			/**
			 * format text slider start session
			 */
			private function formatStartTimeSlider(value:Number):Object { 
				var duration:int = (value - startTimeSessionSlider.minimum)/60000;
				var result:String = duration.toString() + " min.";
				return result;
			}
			
			//_____________________________________________________________________
			//
			// Drag/Drop video
			//
			//_____________________________________________________________________
			private function onMouseMoveOverVisuVideo(event:MouseEvent):void
			{
				var x:Number  = event.stageX-panelVideo.x;
				var y:Number = event.stageY-panelVideo.y-45;
				var point:Point = new Point(x,y)
				var globalPoint:Point = this.localToGlobal(point);
				var xGlobale:Number = globalPoint.x;
				var yGlobale:Number = globalPoint.y;
				var ds:DragSource = new DragSource();
				var obsel:Obsel =  Obsel.fromRDF("");
				obsel.begin = currentTimeSessionMilliseconds;
				ds.addData(obsel,"obsel");
				ds.addData("video","textObsel");	
				var imageProxy:Image = new Image();
				imageProxy.source = IconEnum.getIconByName('retroDocumentSegemntAdd');
				imageProxy.height=15;
				imageProxy.width=15;     
				
				DragManager.doDrag(this.visio,ds,event,imageProxy, -x, -y, 1.00);
			}
			
			private function setListenerDragVideo():void
			{
				// checking if has drag listener
				if(this.visio == null) return;
				var hasListener:Boolean = this.visio.hasEventListener(MouseEvent.MOUSE_MOVE);
				if(!hasListener)
				{
					// add drag listener
//					this.visio.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMoveOverVisuVideo);
				}
			}
			
			private function playRetroDocument(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var playRetroDocumentSegment : RetroDocumentSegment = event.target as RetroDocumentSegment;
					var statusPlaySegment:Boolean = event.statusPlaySegment;
					var deltaTimePause:Number = 0;
					var beginTime:Number = event.beginTime;
					var endTime:Number   = event.endTime;
					// pause on button play/pause in the segment
					if(false)
//					if(playRetroDocumentSegment == this.getCurrentRetroDocumentSegmentPlaying())
					{
						if(statusPlaySegment)
						{
							// pause timer
/* 							this.timerRetroDocumentSegment.stop();
							trace("================================= statusPlaySegment ... this.timePause "+statusPlaySegment+" "+this.timePause.toString());
							if(this.timePause != 0)
							{
								deltaTimePause = new Date().time - this.timePause;
							}
							this.beginTimeCurrentSegment = new Date().time - this.timeStart + this.deltaTime + deltaTimePause;
							trace("================================= TODO PAUSE : this.beginTimeCurrentSegment "+ this.beginTimeCurrentSegment.toString());
							*/
						
							this.pauseVideo(); 
							return;
						}else
						{
/* 							var timeToRest:Number = endTime - this.beginTimeCurrentSegment;
							startTimerRetroDocumentSegment(timeToRest);
							trace("================================= statusPlaySegment ... this.timePause "+statusPlaySegment+" "+this.timePause.toString());
							if(this.timePause != 0)
							{
								deltaTimePause = new Date().time - this.timePause;
							}
							this.beginTimeCurrentSegment = this.beginTimeCurrentSegment + deltaTimePause;
							
							trace("================================= deltaTimePause = "+ deltaTimePause.toString());
							trace("================================= TODO PLAY : this.beginTimeCurrentSegment "+ this.beginTimeCurrentSegment.toString());
							prePlayVideoFlux(this.beginTimeCurrentSegment); */
							
							updateLabelButtonPlayStopRetroDocumentSegment(playRetroDocumentSegment);
							return;
						}
						
					}
					// set current retroDocumentSegment playing
					setCurrentRetroDocumentSegmentPlaying(playRetroDocumentSegment);
					
					this.beginTimeCurrentSegment = beginTime;
					var dt:Number = beginTime - this.testTimeLine.startTimeSession;
					
					prePlayVideoFlux(dt+deltaTimePause);
					updateLabelButtonPlayStopRetroDocumentSegment(playRetroDocumentSegment);
					// set timer
					var durationVideoSegment:Number = endTime - beginTime;
					if(durationVideoSegment < 0)
					{
						durationVideoSegment = 0;
					}
					this.startTimerRetroDocumentSegment(durationVideoSegment);
				}
			}
			
			/**
			 * play/pause of the streams
			 */
			private function onCheckSeekStream(event:* = null):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					// set currentRetrocumentSegmentPlaying to null
					setCurrentRetroDocumentSegmentPlaying(null);
					// remove timer RetroDocumentSegment
					removeTimerRetroDocumentSegment();
					if (visio.status == VisuVisioAdvanced.STATUS_REPLAY)
					{
						pauseVideo();
						sessionTimeLine.setLabelButtonPlayPause(true);
					}else
					{
						this.visio.resumeStreams();
						sessionTimeLine.setLabelButtonPlayPause(false);
					}
				}
			}
			
			private function pauseVideo():void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					this.visio.pauseStreams();
				}
			}

			/**
			 * Play/pause video by click on component
			 */
			private function visio_clickPanelVideoHandler(event:VisuVisioAdvancedEvent):void
			{
				onCheckSeekStream();
			}

			private function  visio_clickButtonMarkerHandler(event:VisuVisioAdvancedEvent):void
			{
				var panelEditInfo:PanelEditInfo = new PanelEditInfo();
				this.groupeVideo.addElement(panelEditInfo);
				panelEditInfo.x = 25;
				panelEditInfo.y = 25;
				
				panelEditInfo.user = event.user;
				panelEditInfo.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				panelEditInfo.addEventListener(PanelEditInfoEvent.CLICK_BUTTON_OK, onPanelEditCommentClickButtonOk);
				panelEditInfo.addEventListener(PanelEditInfoEvent.CLICK_BUTTON_CANCEL, onPanelEditCommentClickButtonCancel);
				
			}
			
			protected function visio_clickButtonCommentHandler(event:VisuVisioAdvancedEvent):void
			{
				var panelEditComment:PanelEditComment = new PanelEditComment();
				this.groupeVideo.addElement(panelEditComment);
				panelEditComment.x = 25;
				panelEditComment.y = 25;
				
				panelEditComment.user = event.user;
				panelEditComment.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				panelEditComment.addEventListener(PanelEditInfoEvent.CLICK_BUTTON_OK, onPanelEditCommentClickButtonOk);
				panelEditComment.addEventListener(PanelEditInfoEvent.CLICK_BUTTON_CANCEL, onPanelEditCommentClickButtonCancel);
			}
			
			private function prePlayVideoFlux(value:Number,delta:Number = 0):void
			{
				if(delta != 0)
				{
					value = delta + this.testTimeLine.startTimeSession;
				}else
				{
					delta = value;
					value = value + this.testTimeLine.startTimeSession;
				}
				trace("prePlayVideoFlux value= "+value.toString());
				trace("prePlayVideoFlux delta= "+delta.toString());
				
				this.pickCheryClick = value;
				// jump session on position delta in millesonds
				this.visio.seekSession = delta;
				
				// add obsel User Action
				var actionVideoPlayer:SalonRetroEvent = new SalonRetroEvent(SalonRetroEvent.ACTION_ON_VIDEO_PLAYER);
				actionVideoPlayer.typeAction = TraceModel.RETRO_VIEDO_GO_TO_TIME_EVENT;
				// choosing time by user
				actionVideoPlayer.timePlayer = this.pickCheryClick;
				this.dispatchEvent(actionVideoPlayer);
			}
			
			private function onUpdateDeletedSession(event:SessionEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var sessionId:int = event.sessionId;
					// enabled button "salon synchrone
					if(Model.getInstance().getCurrentSession() != null && Model.getInstance().getCurrentSession().id_session == sessionId)
					{
						Model.getInstance().setCurrentSession(null);
						Model.getInstance().setEnabledButtonSalonSynchrone(false);
					}
				}
			}

			//_____________________________________________________________________
			//
			// Debug mode
			//
			//_____________________________________________________________________

			protected function button1_clickHandler(event:MouseEvent):void
			{
				var listUser:Array = Model.getInstance().getListUserPresentOnTimeLine();
				var ar:Array = new Array();
				var nbrUser:int = listUser.length;
				for(var nUser:int = 0 ; nUser < nbrUser ; nUser++)
				{
					var name:String = listUser[nUser];
					var info:String = "+/- (sec)";
					if(nUser == 0)
					{
						info = "currentTime(sec)";
					}
					var dgc:DataGridColumn = new DataGridColumn(name);
					
					dgc.headerText = "UserId  = "+ name+", "+info;
					dgc.dataField = "a"+ name;
					ar.push(dgc);
				}
				
				dataDebug.columns = ar;
				
				var html:XML = new XML("<html/>");
				var body:XML = new XML("<body/>");
				html.appendChild(body);
				var table:XML = new XML("<table border='1' />");
				body.appendChild(table);
				
				var list:ArrayCollection = Model.getInstance().getFrameSplit();
				
				var cloneList:ArrayCollection = new ArrayCollection();
				cloneList.addAll(list);
				var array:Array = new Array();
				array = cloneList.source as Array;
				array.reverse();
				
				var nbrFrame:int = array.length;
				for(var nFrame:int = 0; nFrame < nbrFrame ; nFrame++)
				{
					var obj:Object = array[nFrame] as Object;
					var trTag:XML = getTimeByUserId(obj, listUser);
					table.appendChild(trTag);
				}

				var xmlList:XMLList = html.body.table.tr as XMLList;
				dataDebug.dataProvider = xmlList;
				
				function getTimeByUserId(value:Object, listUser:Array):XML
				{
					var result:XML = new XML("<tr/>");
					var nbrUser:int = listUser.length;
					var tempTime:Number = 0;
					var frameSec:String = "";
					for(var nUser:int = 0 ; nUser < nbrUser ; nUser++)
					{
						var userId:String = listUser[nUser].toString();
						if(value.hasOwnProperty(userId))
						{
							var time:Number = value[userId];
							if (nUser == 0)
							{
								tempTime = time;
								frameSec = tempTime.toString();
							}
							else
							{
								time = time - tempTime;
								var secMylt10in2:int = int(time * 100 );
								var sec:int = secMylt10in2/100;
								var secAfterPoint:int = secMylt10in2 - sec*100;
								var plusMinus:String = "";
								if(time < 0)
								{
									plusMinus = "-";
									secAfterPoint = secAfterPoint * -1;
								}
								frameSec = plusMinus + sec.toString()+"."+secAfterPoint.toString();
								
							}
							var td:XML = new XML("<a"+userId+">"+frameSec+"</a"+userId+">");
							result.appendChild(td);
						}else
						{
							var tdEmpty:XML = new XML("<td>-----------</td>");
							result.appendChild(tdEmpty);
						}
						
					}
					return result;
				}
			}

			protected function numStepplerIntervelDecolageFlux_changeHandler(event:Event):void
			{
				// update max interval the decalage
				this.maxIntervalDecalage = (event.currentTarget as NumericStepper).value;	
			}

			protected function numStepplerIntervalCheckDecalageFlux_changeHandler(event:Event):void
			{
				this.intervalCheckDecalage = (event.currentTarget as NumericStepper).value;
				timerSynchro.delay = this.intervalCheckDecalage*1000;
			}

			protected function visio_updateTimeHandler(event:VisuVisioAdvancedEvent):void
			{
				var beginTime:Number = event.beginTime;
				this.testCursor.setBegin(beginTime);
				this.testCursor.setEnd(beginTime);
				var currentTime:String = updateLabelTimer(beginTime);
				this.sessionTimeLine.labelCurrentTimeSession.text = currentTime;
				if( this.currentRetroDocumentSegmentPlaying != null)
				{
					this.currentRetroDocumentSegmentPlaying.currentTime = currentTime;
				}
				this.sessionTimeLine.sessionTimeLineLoggedUser.invalidateDisplayList();
				// set current time for drag/drop video to retroDocument
				this.currentTimeSessionMilliseconds = beginTime + this.testTimeLine.startTimeSession;
			}

			//_____________________________________________________________________
			//
			// Set comments
			//
			//_____________________________________________________________________
			private function onPanelEditCommentClickButtonOk(event:PanelEditInfoEvent):void
			{
				//  add obsel action user
				var eventAddCommentObsel:SalonRetroEvent = new SalonRetroEvent(SalonRetroEvent.ACTION_ON_COMMENT_TRACE_LINE);
				var beginTime:String = (commentTimeLine.startTimeSession + this.testCursor.getBegin()).toString();
				var deltaXObselTime:Number = 0;
				// type of creation comment
				eventAddCommentObsel.typeAction = TraceModel.RETRO_CLICK_VIDEO_PANEL_CREATE_COMMENT_EVENT;			
				var obsel:Obsel = new Obsel(TraceModel.SET_TEXT_COMMENT, 0, null, Number(beginTime));
				obsel.props[TraceModel.COMMENT_FOR_USER_ID] = event.user.id_user;
				obsel.props[TraceModel.TIMESTAMP] = 0;
				obsel.props[TraceModel.TEXT] = event.text;
				// FIXME : now hasn't children of traceLine comment, all comment for every users add to one traceLine
				Model.getInstance().addObselComment(obsel, false, commentTimeLine.traceTitleLoggedUser);
				
				eventAddCommentObsel.timeObselBegin = Number(beginTime);
				eventAddCommentObsel.timeObselEnd = Number(beginTime);
				this.dispatchEvent(eventAddCommentObsel);
				
				var addObselComment:TraceLineEvent = new TraceLineEvent(TraceLineEvent.UPDATE_COMMENT_OBSEL);
				addObselComment.traceComment = Model.getInstance().getCurrentCommentTraceId()
				addObselComment.traceParent = Model.getInstance().getCurrentTraceId();
				var text:String = event.text; 
				// check if message empty
				if(UtilFunction.isEmptyMessage(text))
				{
					text = fxgt.gettext("(vide)");
				}
				addObselComment.textComment = text;
				addObselComment.beginTime = beginTime.toString();
				addObselComment.endTime = beginTime.toString();
				addObselComment.forUserId =  event.user.id_user;
				addObselComment.sessionId = Model.getInstance().getCurrentSessionId();
				addObselComment.typeObsel  = TraceModel.SET_TEXT_COMMENT;
				addObselComment.timeStamp = 0;
				this.dispatchEvent(addObselComment);	
				
				Model.getInstance().setCurrentObselComment(null,commentTimeLine.traceTitleLoggedUser);	
				// remove PanelEditCommenr
				var panelEditComment:PanelEditComment = event.currentTarget as PanelEditComment;
				groupeVideo.removeElement(panelEditComment);
			}
			
			private function onPanelEditCommentClickButtonCancel(event:PanelEditInfoEvent):void
			{
				var panelEditComment:PanelEditComment = event.currentTarget as PanelEditComment;
				groupeVideo.removeElement(panelEditComment);
			}
			
			private function mouseMoveHandler(event:MouseEvent):void
			{
				var dragInitiator:PanelEditComment = PanelEditComment(event.currentTarget);
				var dragSource:DragSource = new DragSource();
				dragSource.addData(dragInitiator, "panelEditComment");
				DragManager.doDrag(dragInitiator, dragSource, event);
			}
			
			private function dragEnterHandler(event:DragEvent):void 
			{
				if (event.dragSource.hasFormat("panelEditComment"))
				{
					pointPanelEditComment = new Point(event.dragInitiator.mouseX, event.dragInitiator.mouseY);
					DragManager.acceptDragDrop(Panel(event.currentTarget));
				}
			}
			
			private function dragDropHandler(event:DragEvent):void 
			{
				var panel:Panel = Panel(event.currentTarget);
				var panelEditComment:PanelEditComment = PanelEditComment(event.dragInitiator);
				var delta:int = 35;
				var pt:Point = new Point(panel.mouseX, panel.mouseY);
				pt = panel.localToGlobal(pt);
				pt = panel.globalToLocal(pt);
				
				panelEditComment.x =
					pt.x - pointPanelEditComment.x;
				panelEditComment.y =
					pt.y - pointPanelEditComment.y - delta;
			}

			protected function panelVideo_clickButtonMuteVolumeHandler(event:PanelButtonEvent):void
			{
				// update mute volume
				this.visio.setVolumeMute(event.mute);
			}

			protected function panelVideo_clickButtonModeMaxHandler(event:PanelButtonEvent):void
			{
				panelVideo.buttonModeMaxEnabled = false;
				panelVideo.buttonModeZoomEnabled = true;
				visio.zoomMax = true;
			}

			protected function panelVideo_clickButtonModeZoomHandler(event:*):void
			{
				panelVideo.buttonModeMaxEnabled = true;
				panelVideo.buttonModeZoomEnabled = false;
				visio.zoomMax = false;
			}


		]]>
	</fx:Script>
	<modules:states>
		<s:State name="State1"/>
		<s:State name="vciel"/>
		<s:State name="debug"/>
	</modules:states>
	<fx:Declarations>
		<maps:RetrospectionMap id="retrospectionMap"  dispatcher="{this}"/>
<!--		<mate:Listener type="{SessionEvent.LOAD_LIST_SESSION_SALON_RETROSPECTION}"  method="updateListSession"/>
		<mate:Listener type="{SessionEvent.LOAD_LIST_CLOSED_SESSION_SALON_RETROSPECTION}"  method="updateListClosedSession"/>-->
		<mate:Listener type="{SessionEvent.LOAD_LIST_OBSEL_RETRO}"  method="updateTimeLine"/>
<!--		<mate:Listener type="{SessionEvent.LOAD_SESSION_SALON_RETROSPECTION}"  method="updateSessionDate"/>-->
		<!--<mate:Listener type="{RetroDocumentEvent.LOAD_TREE_RETRO_DOCUMENT}"  method="updateTreeRetroDocument"/>-->
		<mate:Listener type="{RetroDocumentEvent.LOAD_LIST_RETRO_DOCUMENT}"  method="loadListRetroDocument"/>
		<mate:Listener type="{RetroDocumentEvent.SHOW_RETRO_DOCUMENT}"  method="showRetroDocument"/>
		<mate:Listener type="{RetroDocumentEvent.UPDATE_ADDED_RETRO_DOCUMENT}"  method="updateAddedRetroDocument"/>
		<mate:Listener type="{RetroDocumentEvent.PLAY_RETRO_SEGMENT}"  method="playRetroDocument" />
		<mate:Listener type="{RetroDocumentEvent.UPDATE_TITLE_RETRO_DOCUMENT}"  method="updateTitleRetroDocument" />
		<mate:Listener type="{RetroDocumentEvent.LOADED_ALL_USERS}"  method="loadedAllUsers"/>
		<mate:Listener type="{SessionEvent.UPDATE_DELETED_SESSION}"  method="onUpdateDeletedSession"/>
		<mate:Listener type="{RetroDocumentEvent.CHANGE_LIST_RETRO_SEGMENT}"  method="onUpdateListSegmentRetroDocument"/>
	</fx:Declarations>
	<mx:VDividedBox width="100%" height="100%">
		<mx:HDividedBox width="100%" height="60%">
<!-- VIDEO -->
			<components:PanelButton height="100%" width="100%" id="panelVideo" minWidth="450"
				dragEnter="dragEnterHandler(event);"
				dragDrop="dragDropHandler(event);"
				buttonVolumeVisible="true"
				buttonMuteMicroVisible="false"
				buttonModeMaxVisible="true"
				buttonModeZoomVisible="true"
				buttonModeZoomEnabled="false"
				buttonModeMaxEnabled="true"
				clickButtonMuteVolume="panelVideo_clickButtonMuteVolumeHandler(event)"
				clickButtonModeMax="panelVideo_clickButtonModeMaxHandler(event)"
				clickButtonModeZoom="panelVideo_clickButtonModeZoomHandler(event)">
				<mx:VDividedBox width="100%" height="100%">
					<s:VGroup height="75%" width="100%" id="groupeVideo">
						<video:VisuVisioAdvanced id="visio" width="100%"  height="100%"
							quality="80"
							updateTime="visio_updateTimeHandler(event)"
							clickButtonMarker="visio_clickButtonMarkerHandler(event)"
							clickPanelVideo="visio_clickPanelVideoHandler(event)"
							clickButtonComment="visio_clickButtonCommentHandler(event)"
							clickButtonZoom="panelVideo_clickButtonModeZoomHandler(event)"
							buttonChatEnabled="false"
							buttonMarkerEnabled="false"
							buttonCommentEnabled="true"
							buttonMode="true"
							bandwidth="15000" autoPlay="true"
							loggedUser="{Model.getInstance().getLoggedUser()}">
						</video:VisuVisioAdvanced>
						<s:HGroup gap="3"  includeIn="debug" width="100%">
							<mx:Spacer width="100%"/>
							<s:Button id="buttomTraceFrame" label="Update split" click="button1_clickHandler(event)"/>
							<s:Label text="Décalage max. autorisé(s) est:" paddingTop="7"/>
							<s:NumericStepper stepSize="0.1" minimum="0.1" maximum="5.0" value="{this.maxIntervalDecalage}" width="55" id="numStepplerIntervelDecolageFlux" change="numStepplerIntervelDecolageFlux_changeHandler(event)"/>
							<s:Label text="Périod de verification(s)" paddingTop="7"/>
							<s:NumericStepper stepSize="1" minimum="1" maximum="25" value="{this.intervalCheckDecalage}" width="45" id="numStepplerIntervalCheckDecalageFlux" change="numStepplerIntervalCheckDecalageFlux_changeHandler(event)"/>
						</s:HGroup>
					</s:VGroup>
					<s:VGroup width="100%" height="25%" gap="0">
						<s:Group width="100%" height="100%" id="groupTimeLine">
							<timeline:TimeLineSession id="sessionTimeLine" width="100%"  showButtonNavigation="true" top="0"/>
							<s:Group width="100%" height="100%" top="75">
								<s:Scroller left="1" right="1" top="1" bottom="1" top.State1="1" left.State1="0" bottom.State1="1" right.State1="1" bottom.debug="1" left.debug="0" right.debug="1" top.debug="1">
									<s:Group width="100%" height="100%">
										<s:layout>
											<s:VerticalLayout gap="5"/>
										</s:layout>
										<s:Group id="traceLineGroup" width="100%" height="100%">
											<s:layout>
												<s:VerticalLayout gap="4"/>
											</s:layout>
										</s:Group>
									</s:Group>
								</s:Scroller>
							</s:Group>
						</s:Group>
						<s:HGroup>
							<s:Label text="Zoom: " />
							<s:HSlider id="durationSessionSlider" 						   
								liveDragging="true" width="15%" valueCommit="durationSessionSlider_valueCommitHandler(event)" enabled="false" thumbRelease.State1="durationSessionSlider_thumbReleaseHandler(event)" thumbRelease.debug="durationSessionSlider_thumbReleaseHandler(event)"/>
							
							<s:Label text="Position: "/>
							<s:HSlider id="startTimeSessionSlider" 
								liveDragging="true" width="70%" valueCommit="startTimeSessionSlider_valueCommitHandler(event)" enabled="false" thumbRelease="startTimeSessionSlider_thumbReleaseHandler(event)"/>
						</s:HGroup>
					</s:VGroup>
				</mx:VDividedBox>
			</components:PanelButton>
<!-- DOCUMENTARISATION -->
			<s:Group height="100%" minWidth="330" width.State1="30%">
				<s:layout>
					<s:VerticalLayout gap="1"/>
				</s:layout>
				<mx:DataGrid width="100%"  height="100%" includeIn="debug" id="dataDebug">
				</mx:DataGrid>
				<components:PanelButton width="100%" height="100%"  id="panelDocumentarisation"
					 buttonAddVisible="true"
					 buttonDeleteVisible="false"
					 buttonShareVisible="false"
					 buttonMuteMicroVisible="false"
					 buttonVolumeVisible="false"
					 clickButtonAdd="panelDocumentarisation_clickButtonAddHandler(event)"
					 >
					<mx:VDividedBox width="100%" height="100%"  includeIn="State1,vciel">
						<s:List id="listRetroDocument" 
							width="100%"
							change="listRetroDocument_changeHandler(event)"
							itemRenderer="com.ithaca.documentarisation.renderer.RetroDocumentRenderer"/>
						<s:Group width="100%" height="100%" id="groupRetroDocumentView">
									<s:layout>
										<s:VerticalLayout gap="0"/>
									</s:layout>
						</s:Group>
					</mx:VDividedBox>			
				</components:PanelButton>
			</s:Group>
		</mx:HDividedBox>
	</mx:VDividedBox>
</modules:VisuModuleBase>