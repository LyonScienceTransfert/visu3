<?xml version="1.0" encoding="utf-8"?>
<modules:VisuModuleBase width="100%" height="100%" 
						creationComplete="visumodulebase1_creationCompleteHandler(event)" 
						configure="visumodulebase1_configureHandler(event)" 
						xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx" 
						xmlns:modules="com.ithaca.visu.modules.*"
						xmlns:maps="maps.*" xmlns:mate="http://mate.asfusion.com/"	
						xmlns:timeline="com.ithaca.timeline.*"
						xmlns:controls="com.lyon2.controls.*" 
						xmlns:video="com.ithaca.visu.view.video.*" 
						xmlns:components="com.ithaca.utils.components.*" 
						xmlns:documentarisation="com.ithaca.documentarisation.*"
						currentState="State1" > 
	<fx:Script>
		<![CDATA[ 
			import com.ithaca.documentarisation.SegmentVideoAdvanced;
			import com.ithaca.documentarisation.events.RetroDocumentEvent;
			import com.ithaca.documentarisation.model.RetroDocument;
			import com.ithaca.timeline.Layout;
			import com.ithaca.timeline.TraceLineGroup;
			import com.ithaca.timeline.events.TimelineEvent;
			import com.ithaca.traces.Obsel;
			import com.ithaca.traces.Trace;
			import com.ithaca.traces.model.TraceModel;
			import com.ithaca.traces.view.ObselLine;
			import com.ithaca.utils.EditCommentDialog;
			import com.ithaca.utils.UtilFunction;
			import com.ithaca.visu.controls.timeline.TraceLineB;
			import com.ithaca.visu.controls.timeline.TraceLineComment;
			import com.ithaca.visu.events.InitMapEvent;
			import com.ithaca.visu.events.ObselEvent;
			import com.ithaca.visu.events.PanelButtonEvent;
			import com.ithaca.visu.events.SalonRetroEvent;
			import com.ithaca.visu.events.SessionEvent;
			import com.ithaca.visu.events.TraceLineEvent;
			import com.ithaca.visu.events.VisuModuleEvent;
			import com.ithaca.visu.model.Model;
			import com.ithaca.visu.model.Session;
			import com.ithaca.visu.model.User;
			import com.ithaca.visu.model.vo.RetroDocumentVO;
			import com.ithaca.visu.ui.utils.ConnectionStatus;
			import com.ithaca.visu.ui.utils.IconEnum;
			import com.ithaca.visu.view.video.PanelEditComment;
			import com.ithaca.visu.view.video.VisuVisioAdvancedEvent;
			
			import gnu.as3.gettext.FxGettext;
			import gnu.as3.gettext._FxGettext;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Panel;
			import mx.controls.Image;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			
			import spark.events.TrackBaseEvent;
			
			[Bindable]
			private var fxgt:_FxGettext;
			
			private var testCursor:ObselLine;
			private var testTimeLine:TraceLineB;
			
			[Bindable]
		//	private var timer:Timer;
			
			private var timerSynchro:Timer;
			private var timerRetroDocumentSegment:Timer;
			private var currentTimeSessionMilliseconds:Number;
			
			public var listSessionOpen : ArrayCollection;
			
			[Bindable]
			public var listSessionClose : ArrayCollection;
			
			private var pickCheryClick:Number = 0;
			private var commentTimeLine:TraceLineComment;
			private var currentSessionDateRecording:Date = null;
			private var currentSessionDuration:Number;
			private var currentSessionId:int;
			private var DELTA_STICH:int = 20;
			private var currentRetroDocumentSegmentPlaying:SegmentVideoAdvanced = null;
			private var beginTimeCurrentSegment:Number= 0;
			private var clickOnTimeLine:Boolean = true;
			
			// interval the decalage max in seconds
			[Bindable]
			private var maxIntervalDecalage:Number = 1.1;
			// interval the contol of the decalage im microseconds 
			private var INTERVAL_CONTROL_DECALAGE:Number = 10000;
			// interval the check the decalage in seconds
			[Bindable]
			private var intervalCheckDecalage:Number = 5;
			// time start session plus time in this session 
			private var currentTime:Number;
			private var pointPanelEditComment:Point;
			
			private var selectedSessionIdWhenInit:Number = -1;
			private var selectedRetroDocumentIdWhenInit:Number = -1;
			
			
			protected function visumodulebase1_configureHandler(event:VisuModuleEvent):void
			{	
				// init list trace lines
				Model.getInstance().initListTraceLine();
				
				if((event.currentTarget as RetrospectionModule).parameters != null)
				{
					var param:Array = (event.currentTarget as RetrospectionModule).parameters as Array ;
					var cameFromModule:String = param[0];
					switch (cameFromModule)
					{
					case "CameFromHomeModule" :
						// 
						break;
					case "CameFromBilanModule" :
						this.selectedRetroDocumentIdWhenInit = param[2]; 
						break;
					}
					// set selected sessionId
					var session:Session = param[1];
					Model.getInstance().setCurrentSession(session);
					this.selectedSessionIdWhenInit = session.id_session;
				}
				
				fxgt = FxGettext;
				// set current module
				Model.getInstance().setCurrentRetroModule(this);
				
				var initMapEvent:InitMapEvent = new InitMapEvent(InitMapEvent.INIT_MAP_RETROSPECTION);
				this.dispatchEvent(initMapEvent); 
				

				var getListObselEvent:SessionEvent = new SessionEvent(SessionEvent.GET_LIST_OBSEL_CLOSED_SESSION);  
				getListObselEvent.sessionId = selectedSessionIdWhenInit;
				// set current sessionId
				this.currentSessionId = session.id_session;
				this.dispatchEvent(getListObselEvent);
			}
			
			protected function visumodulebase1_creationCompleteHandler(event:FlexEvent):void
			{

				// check status logged user
				var loggedUser:User =  Model.getInstance().getLoggedUser();
				var statusLoggedUser:int =loggedUser.status; 
				if(statusLoggedUser == ConnectionStatus.CONNECTED)
				{
					Model.getInstance().updateStatusLoggedUser(ConnectionStatus.PENDING);
					var outSession:SessionEvent = new SessionEvent(SessionEvent.OUT_SESSION);
					outSession.userId = loggedUser.id_user;
					this.dispatchEvent(outSession);
				}
				
 				this.visio.connection = Model.getInstance().getNetConnection();
				// removing module from the stage
				this.addEventListener(Event.REMOVED_FROM_STAGE, onRemovedModuleFromStage);
				// add obsel join retro room
				var joinSalonRetro:VisuModuleEvent = new VisuModuleEvent(VisuModuleEvent.GO_IN_MODULE);
				this.dispatchEvent(joinSalonRetro);
				
				if( Model.getInstance().getModeDebug())
				{
					this.setCurrentState("debug");
					
					Model.getInstance().clearListFrameSplit();
					buttomTraceFrame.visible = true;
//					this.visio.frameRateSplit = Model.getInstance().getFrameRateSplit();
//					this.visio.setDebugMode();

					timerSynchro = new Timer(intervalCheckDecalage*1000,0);
					timerSynchro.addEventListener(TimerEvent.TIMER, updateTimerSynchro);
					timerSynchro.start();
				}
				// set the data of the session
				documentarisation.initDataRetroDocument(
					this.currentSessionDateRecording, 
					this.currentSessionDuration,
					Model.getInstance().profiles,
					Model.getInstance().getListUserPresentOnTimeLine());
				// set listeners
				documentarisation.addEventListener(RetroDocumentEvent.CLICK_BUTTON_SWITCH, onClickButtonSwitch, true);
				documentarisation.addEventListener(RetroDocumentEvent.PRE_UPDATE_RETRO_DOCUMENT, onPreUpdateRetroDocument, true);
				
				// show retroDocument if was selected
				if(selectedRetroDocumentIdWhenInit > 0)
				{
					documentarisation.selectedRetroDocument(selectedRetroDocumentIdWhenInit)
				}
				// set cursor 
				CursorManager.removeBusyCursor();
				
			}
			
			private function updateTimerSynchro(event:TimerEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
//					this.visio.synchroStreamsByValue(this.maxIntervalDecalage);
				}
			}
			
			private function onPreActionUserObselComment(event:SalonRetroEvent):void
			{
				var beginTime:Number;
				var endTime:Number;
				var timeStamp:Number;
				 var onActionUserStartEditCancelEditObsel:SalonRetroEvent = new SalonRetroEvent(SalonRetroEvent.ACTION_ON_OBSEL_COMMENT_START_EDIT_CANCEL_EDIT);
				onActionUserStartEditCancelEditObsel.editTypeCancel = event.editTypeCancel;
				onActionUserStartEditCancelEditObsel.text = event.text;
				onActionUserStartEditCancelEditObsel.typeAction = event.typeAction;
				var obsel:Obsel = event.obsel;
				if ( obsel == null)
				{
					beginTime = 0;
					endTime = 0;
					timeStamp = 0;
				}else
				{
					beginTime = obsel.begin;
					endTime = obsel.end;
					timeStamp = event.timeStamp;
				}
				onActionUserStartEditCancelEditObsel.timeStamp = timeStamp;
				onActionUserStartEditCancelEditObsel.timeObselBegin = beginTime;
				onActionUserStartEditCancelEditObsel.timeObselEnd = endTime;
				this.dispatchEvent(onActionUserStartEditCancelEditObsel);
			}
			/**
			 * Removing all streams and local devices
			 */
			private function onRemovedModuleFromStage(event:Event):void
			{
				if(this.visio != null)
				{
					this.removeAllStreams();
					this.visio.removeTimer();
					
					if(this.timerRetroDocumentSegment)
					{
						this.timerRetroDocumentSegment.stop();			
					}
					// add obsel user walk out from retro room
					var outFromSalonRetro:VisuModuleEvent = new VisuModuleEvent(VisuModuleEvent.WALK_OUT_MODULE);
					this.dispatchEvent(outFromSalonRetro);
				}
				// set current module null
				Model.getInstance().setCurrentRetroModule(null);
			}
			
			/**
			 * remove all listeners the stream here and remove the streams from VisuVisio
			 */
			// FIXME it's not necessary to remove all listeners
			private function removeAllStreams():void
			{
				this.visio.removeAllStreams();
			}
			
			private function setCurrentRetroDocumentSegmentPlaying(value:SegmentVideoAdvanced):void
			{
				this.currentRetroDocumentSegmentPlaying = value;
			}
			private function getCurrentRetroDocumentSegmentPlaying():SegmentVideoAdvanced
			{
				return this.currentRetroDocumentSegmentPlaying;
			}
			
			private function createSessionTimeLine(durationSession:Number,startSession:Number):void
			{
				// set current session duration 
				this.currentSessionDuration = durationSession;
				timeLine.range.addTime(startSession, startSession + durationSession);
			}

			// creation the resume activity
			private function updateTimeLine(event:SessionEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					this.currentSessionDateRecording = event.dateStartRecording;
					this.currentSessionDuration = event.durationSessionRetro;

					// update label start session recording
					var dateStartRecording:Date = event.dateStartRecording;
					// show info the session 
					panelVideo.title = '"' + Model.getInstance().getCurrentSession().theme + '",' +
						fxgt.gettext(" enregistrée le ")+dateStartRecording.getDate().toString()+"-"+
						(dateStartRecording.getMonth() + 1).toString()+"-"+dateStartRecording.getFullYear().toString()+fxgt.gettext(" à ")+	 
						dateStartRecording.getHours().toString()+":"+dateStartRecording.getMinutes().toString();
					
					var loader:URLLoader=new URLLoader();			
					loader.addEventListener(Event.COMPLETE, onLoadLayoutComplete);
					loader.load(new URLRequest("layoutVisu2.xml"));	
				}
				// add drag listener
				setListenerDragVideo();
				if(documentarisation)
				{
					// set the data of the session
					documentarisation.initDataRetroDocument(
						this.currentSessionDateRecording, 
						this.currentSessionDuration,
						Model.getInstance().profiles,
						Model.getInstance().getListUserPresentOnTimeLine());
				}
			}
			private function onLoadLayoutComplete(event:Event):void 
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					//we init the trace object
					var loader:URLLoader=event.target as URLLoader;
					timeLine.layoutXML 		= new XML( loader.data );
					timeLine.timelineLayout = new Layout( timeLine ); 	
					
					this.setObsels();
					
					var traceComment:Trace = Model.getInstance().getTraceComment();				
					var tlgComment : TraceLineGroup;
					tlgComment = timeLine.addTrace( traceComment, 0, "comments");
					tlgComment .setStyle( "title", fxgt.gettext("Comments") );
	
					var listTraceGroup:ArrayCollection = Model.getInstance().getListTraceGroup()
					if(listTraceGroup != null)
					{											
						var nbrTraceGroup:int = listTraceGroup.length;
						for(var nTraceGroup:int =0; nTraceGroup < nbrTraceGroup ; nTraceGroup++)
						{												
							var traceGroup:Object = listTraceGroup[nTraceGroup] as Object;
							
							var tlg :TraceLineGroup ;					
							
							tlg = timeLine.addTrace(traceGroup.userTrace);
							
							tlg.setStyle("title", traceGroup.userName );				
							tlg.setStyle("bgColor", traceGroup.userColor);
							tlg.setStyle("icon", traceGroup.userAvatar );	
						}
					}
					
					var startRecordingSession:Number = this.currentSessionDateRecording.time;
					timeLine.range.addTime(startRecordingSession, startRecordingSession + this.currentSessionDuration);
					
					// set timeStartSession in VisuVisioAdvaned
					this.visio.startTimeSession = startRecordingSession;
					
					// set dataProvider with collection the StreamObsel
					this.visio.dataProvider = Model.getInstance().getListStreamObsel();
					// set pickCherryClick
					this.pickCheryClick = 0;					
					this.visio.startTimer();
					
					
					// notify that module ready for use
					notifyReadyForUse();
					
				}
			}
					
			private function removeTimerRetroDocumentSegment():void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{	
					if(timerRetroDocumentSegment != null)
					{
						timerRetroDocumentSegment.removeEventListener(TimerEvent.TIMER, endVideoSegment);
						timerRetroDocumentSegment = null;
					}
				}
			}
			
			private function startTimerRetroDocumentSegment(value:Number):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{	
					if(timerRetroDocumentSegment != null)
					{
						timerRetroDocumentSegment.removeEventListener(TimerEvent.TIMER, endVideoSegment);
						timerRetroDocumentSegment = null;
					}
					timerRetroDocumentSegment = new Timer(value,0);
					timerRetroDocumentSegment.addEventListener(TimerEvent.TIMER, endVideoSegment);
					timerRetroDocumentSegment.start();
				}
			}
			
			private function endVideoSegment(event:TimerEvent = null):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					// set time to current video segment 
					if(this.currentRetroDocumentSegmentPlaying != null)
					{
						var tempCurrentRetroDocumentSegment:SegmentVideoAdvanced = this.currentRetroDocumentSegmentPlaying;
						// set curentRetroDocumentSegment to null
						this.setCurrentRetroDocumentSegmentPlaying(null);
						tempCurrentRetroDocumentSegment.setBeginEndTime();
						
						if(!clickOnTimeLine)
						{
							// pause video if end playing video segment only
							this.pauseVideo();
						}
					}
					// check if timerRetroDocumentSegment not null, can be null if user see the VidoSegment => click on tileLine
					if(timerRetroDocumentSegment)
					{
						timerRetroDocumentSegment.stop();
						timerRetroDocumentSegment.removeEventListener(TimerEvent.TIMER, endVideoSegment);
						timerRetroDocumentSegment = null;
					}
					// init flag click on tume line
					clickOnTimeLine = false;
				}
			}
				
			private function updateLabelTimer(value:Number):String
			{
				var totalSecond:int = value/1000;
				var minNumber:int = new int(totalSecond/60);
				var hourNumber:int = new int(totalSecond/3600);
				var secString:String="";
				var minString:String="";
				var hourString:String="";
				var secons:Number = totalSecond - minNumber*60;
				secString = secons.toString();
				if(secons < 10)
				{
					secString = "0"+secString;
				}
				var min:Number = minNumber - hourNumber*60;
				minString = min.toString();
				if(min < 10)
				{
					minString = "0" + minString;
				}
				hourString = hourNumber.toString();
				if(hourNumber < 10)
				{
					hourString = "0"+hourString;	
				}
				return  hourString+":"+minString+":"+secString;
				
			}
			
			private function onAddListObsel(event:TraceLineEvent):void{
				var listObsel:ArrayCollection = event.listObsel;
				var userTraceLineId:int = (event.currentTarget as TraceLineB).idUserTraceLine;
				Model.getInstance().addListObselTitleTraceLine(userTraceLineId, listObsel);
			}
			/**
			 * remove list obsel to Model 
			 */	
			private function onRemoveListObsel(event:TraceLineEvent):void{
				var listObsel:ArrayCollection = event.listObsel;
				var userTraceLineId:int = (event.currentTarget as TraceLineB).idUserTraceLine;
				Model.getInstance().removeListObselTitleTraceLine(userTraceLineId, listObsel);
			}

			private function setObsels():void{
				// add obsels traceLine 
				var listObsels:ArrayCollection = Model.getInstance().getListObsels();
				if (listObsels != null)
				{	
					var nbrObsels:int = listObsels.length;
					for(var nObsel:int = 0 ; nObsel < nbrObsels; nObsel++)
					{
						var obsel:Obsel = listObsels[nObsel] as Obsel;
						Model.getInstance().addObsel(obsel);
					}
				}
			} 

			/* protected function startTimeSessionSlider_thumbReleaseHandler(event:TrackBaseEvent):void
			{
				var actionVideoPlayer:SalonRetroEvent = new SalonRetroEvent(SalonRetroEvent.ACTION_ON_SLIDER_VIDEO_PLAYER);
				//actionVideoPlayer
				this.dispatchEvent(actionVideoPlayer);
			}


			protected function durationSessionSlider_thumbReleaseHandler(event:TrackBaseEvent):void
			{
				var actionVideoPlayer:SalonRetroEvent = new SalonRetroEvent(SalonRetroEvent.ACTION_ON_SLIDER_VIDEO_PLAYER);
				//actionVideoPlayer
				this.dispatchEvent(actionVideoPlayer);
			} */
			
			
			//_____________________________________________________________________
			//
			// RetroDocument
			//
			//_____________________________________________________________________

			private function loadListRetroDocument(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					documentarisation.listRetroDocumentVO = event.listRetroDocument;
				}
			}
			
				
			private function showRetroDocument(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					setRetroDocument(event.retroDocument, event.listUser);
				}
			}
			
			//_____________________________________________________________________
			//
			// Listeners RetroDocumentView
			//
			//_____________________________________________________________________			
			private function onPreUpdateRetroDocument(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var dateLastModify:Date = new Date(null,null,null,null,null,null,Model.getInstance().getTimeServeur());
					var retroDocumentVO:RetroDocumentVO = event.retroDocumentVO;
					retroDocumentVO.lastModified = dateLastModify;
					var updateRetrodocument:RetroDocumentEvent = new RetroDocumentEvent(RetroDocumentEvent.UPDATE_RETRO_DOCUMENT);
					updateRetrodocument.retroDocumentVO = retroDocumentVO;
					updateRetrodocument.listUser = event.listUser;
					this.dispatchEvent(updateRetrodocument);		
				}
			}
			
			private function onClickButtonSwitch(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var switchModuleEvent:RetroDocumentEvent = new RetroDocumentEvent(RetroDocumentEvent.GO_BILAN_MODULE_FROM_RETRO);
					switchModuleEvent.sessionId = event.sessionId;
					switchModuleEvent.idRetroDocument = event.idRetroDocument;
					this.dispatchEvent(switchModuleEvent);
				}
			}

			protected function addRetroDocument_clickHandler(event:MouseEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var retroDocumentVO:RetroDocumentVO = new RetroDocumentVO();
					var creatinDateNumber:Number = Model.getInstance().getTimeServeur();
					retroDocumentVO.creationDate = new Date(null,null,null,null,null,null,creatinDateNumber);
					retroDocumentVO.description = "new description here";
					retroDocumentVO.documentId = 0;
					retroDocumentVO.lastModified = retroDocumentVO.creationDate;
					var createurUser:User = Model.getInstance().getLoggedUser();
					retroDocumentVO.ownerId = createurUser.id_user;
					retroDocumentVO.sessionId = this.currentSessionId;
					retroDocumentVO.title = "le nouveau bilan ici";
	
					var nomCreateur:String = createurUser.lastname + " "+ createurUser.firstname;
					var stringXML:String = UtilFunction.createRetroDocumentXML(retroDocumentVO.title, retroDocumentVO.description,nomCreateur,retroDocumentVO.creationDate,retroDocumentVO.creationDate)
					retroDocumentVO.xml = stringXML;
					var createRetroDocumentVOEvent:RetroDocumentEvent = new RetroDocumentEvent(RetroDocumentEvent.CREATE_RETRO_DOCUMENT);
					createRetroDocumentVOEvent.retroDocumentVO = retroDocumentVO;
					createRetroDocumentVOEvent.sessionId = this.currentSessionId;;
					this.dispatchEvent(createRetroDocumentVOEvent);
				}
			}
			//_____________________________________________________________________
			//
			// Listeners PanelDocumentarisation
			//
			//_____________________________________________________________________


			private function setRetroDocument(retroDocument:RetroDocument, listUser:Array ):void
			{
				documentarisation.setRetroDocument(retroDocument, listUser);
			}
			/**
			 * set id the retrodocument
			 */ 
			protected function updateAddedRetroDocument(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					documentarisation.updateIdRetroDocument(event.idRetroDocument);
					// remove cursor
					CursorManager.removeBusyCursor();
				}
			}
			
			protected function documentarisation_addRetroDocumentHandler(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var retroDocumentVO:RetroDocumentVO = new RetroDocumentVO();
					var creatinDateNumber:Number = Model.getInstance().getTimeServeur();
					retroDocumentVO.creationDate = new Date(null,null,null,null,null,null,creatinDateNumber);
					retroDocumentVO.description = "new description here";
					retroDocumentVO.documentId = 0;
					retroDocumentVO.lastModified = retroDocumentVO.creationDate;
					var createurUser:User = Model.getInstance().getLoggedUser();
					retroDocumentVO.ownerId = createurUser.id_user;
					retroDocumentVO.sessionId = this.currentSessionId;
					retroDocumentVO.title = "Bilan sur la séance du " + '"'+Model.getInstance().getCurrentSession().theme+'"'; 
					
					var nomCreateur:String = createurUser.lastname + " "+ createurUser.firstname;
					var stringXML:String = UtilFunction.createRetroDocumentXML(retroDocumentVO.title, retroDocumentVO.description,nomCreateur,retroDocumentVO.creationDate,retroDocumentVO.creationDate)
					retroDocumentVO.xml = stringXML;
					var createRetroDocumentVOEvent:RetroDocumentEvent = new RetroDocumentEvent(RetroDocumentEvent.CREATE_RETRO_DOCUMENT);
					createRetroDocumentVOEvent.retroDocumentVO = retroDocumentVO;
					this.dispatchEvent(createRetroDocumentVOEvent);
					
					// set mouse cursor
					CursorManager.setBusyCursor();
					// set new RetroDocument
					documentarisation.listRetroDocument.dataProvider.addItem(retroDocumentVO);
					documentarisation.listRetroDocument.selectedItem = retroDocumentVO;
					var retroDocument:RetroDocument = new RetroDocument(retroDocumentVO);
					retroDocument.setRetroDocumentXML(retroDocumentVO.xml);
					setRetroDocument(retroDocument, new Array());
				}
			}
			//_____________________________________________________________________
			//
			// Listeners ListRetroDocument
			//
			//_____________________________________________________________________

			private function dispatchLoadRetroDocument(value:RetroDocumentVO):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var loadRetroDocument:RetroDocumentEvent = new RetroDocumentEvent(RetroDocumentEvent.LOAD_RETRO_DOCUMENT);
					loadRetroDocument.idRetroDocument =  value.documentId
					loadRetroDocument.editabled = true;				
					this.dispatchEvent(loadRetroDocument);
				}
			}
			
			private function loadedAllUsers(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					this.documentarisation.retroDocumentView.allUsers = event.listUser;
				}
			}
			
			//_____________________________________________________________________
			//
			// Drag/Drop video
			//
			//_____________________________________________________________________
			private function onMouseMoveOverVisuVideo(event:MouseEvent):void
			{
				var x:Number  = event.stageX-panelVideo.x;
				var y:Number = event.stageY-panelVideo.y-45;
				var point:Point = new Point(x,y)
				var globalPoint:Point = this.localToGlobal(point);
				var xGlobale:Number = globalPoint.x;
				var yGlobale:Number = globalPoint.y;
				var ds:DragSource = new DragSource();
				var obsel:Obsel =  Obsel.fromRDF("");
				obsel.begin = currentTimeSessionMilliseconds;
				ds.addData(obsel,"obsel");
				ds.addData("video","textObsel");	
				var imageProxy:Image = new Image();
				imageProxy.source = IconEnum.getIconByName('retroDocumentSegemntAdd');
				imageProxy.height=15;
				imageProxy.width=15;     
				
				DragManager.doDrag(this.visio,ds,event,imageProxy, -x, -y, 1.00);
			}
			
			private function setListenerDragVideo():void
			{
				// checking if has drag listener
				if(this.visio == null) return;
				var hasListener:Boolean = this.visio.hasEventListener(MouseEvent.MOUSE_MOVE);
				if(!hasListener)
				{
					// add drag listener
//					this.visio.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMoveOverVisuVideo);
				}
			}
			
			private function playRetroDocument(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var segmentVideoAdvanced : SegmentVideoAdvanced = event.target as SegmentVideoAdvanced;
					if(segmentVideoAdvanced)
					{
						var deltaTimePause:Number = 0;
						var beginTime:Number = event.beginTime;
						var endTime:Number   = event.endTime;
						// pause on button play/pause in the segment
						// set current retroDocumentSegment playing
						setCurrentRetroDocumentSegmentPlaying(segmentVideoAdvanced);
						
						this.beginTimeCurrentSegment = beginTime;
						var dt:Number = beginTime 
							//- this.testTimeLine.startTimeSession;
						
						prePlayVideoFlux(dt+deltaTimePause);
						// set timer
						var durationVideoSegment:Number = endTime - beginTime;
						if(durationVideoSegment < 0)
						{
							durationVideoSegment = 0;
						}
						this.startTimerRetroDocumentSegment(durationVideoSegment);
					}
				}
			}
			
			private function pauseRetroDocument(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					onCheckSeekStream();
				}
			}
			
			/**
			 * play/pause of the streams
			 */
			private function onCheckSeekStream(event:* = null):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					// set currentRetrocumentSegmentPlaying to null
					setCurrentRetroDocumentSegmentPlaying(null);
					// remove timer RetroDocumentSegment
					removeTimerRetroDocumentSegment();
					if (visio.status == VisuVisioAdvanced.STATUS_REPLAY)
					{
						pauseVideo();
						timeLine.isPlaying = false;
					}else
					{
						this.visio.resumeStreams();
						timeLine.isPlaying = true;
					}
				}
			}
			
			private function pauseVideo():void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					this.visio.pauseStreams();
				}
			}

			/**
			 * Play/pause video by click on component
			 */
			private function visio_clickPanelVideoHandler(event:VisuVisioAdvancedEvent):void
			{
				if(currentRetroDocumentSegmentPlaying)
				{
					this.currentRetroDocumentSegmentPlaying.setPause();
				}
				onCheckSeekStream();
			}
			
			//////////////
			//////   Handlers the create/edit/delete comments
			/////////////
			protected function onPreAddCommentBySkinComment(event:ObselEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var obsel:Obsel = event.obsel;
					var userId:int = obsel.props[TraceModel.COMMENT_FOR_USER_ID];
					var user:User = Model.getInstance().getUserPlateformeByUserId(userId);
					var currentCommentObselSkin:Object = event.target;
					
					showDialogAddCommentObsel(user, obsel, currentCommentObselSkin);
				}
			}
			
			protected function onPreAddComment(event:TraceLineEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var user:User = Model.getInstance().getLoggedUser();
					showDialogAddCommentObsel(user);
				}
			}
			
			protected function visio_clickButtonCommentHandler(event:VisuVisioAdvancedEvent):void
			{	
				var user:User = event.user;
				showDialogAddCommentObsel(user);
			}
			
			private function showDialogAddCommentObsel(value:User, obsel:Obsel = null, currentObselSkin:Object = null):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var editCommentDialog:EditCommentDialog = new EditCommentDialog();
					editCommentDialog.user = value;
	
					editCommentDialog.currentObselSkin = currentObselSkin;
					editCommentDialog.obsel = obsel;
					
					PopUpManager.addPopUp(editCommentDialog, this);
					PopUpManager.centerPopUp(editCommentDialog);
					editCommentDialog.y -= editCommentDialog.height;
					editCommentDialog.addEventListener( Event.REMOVED_FROM_STAGE, onRemoveCommentDialog );
				}
			}
			private function onRemoveCommentDialog(event:Event):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var updateObselComment:TraceLineEvent = new TraceLineEvent(TraceLineEvent.UPDATE_COMMENT_OBSEL);
					updateObselComment.traceComment = Model.getInstance().getCurrentCommentTraceId()
					updateObselComment.traceParent = Model.getInstance().getCurrentTraceId();
					updateObselComment.sessionId = Model.getInstance().getCurrentSessionId();
					
					var text:String = "";
					var typeObsel:String = TraceModel.SET_TEXT_COMMENT;
					var obsel:Obsel = event.currentTarget.obsel;
					
					if (event.currentTarget.confirm)
					{						
						var durationObselCommentMs:Number = 10*1000;
						var currentTime:Number = UtilFunction.getNumberEntier(timeLine.currentTime);
						var beginTime:String = currentTime.toString();
						var endTime:String = (currentTime + durationObselCommentMs).toString();					
						
						var timeStamp:Number = 0
						// set properties for existing obsel
						var forUserId:int = event.currentTarget.user.id_user;
						if(event.currentTarget.currentObselSkin)
						{
							beginTime = UtilFunction.getNumberEntier(obsel.begin).toString();
							endTime = UtilFunction.getNumberEntier(obsel.end).toString();
							forUserId = new Number(obsel.props[TraceModel.COMMENT_FOR_USER_ID]);
							timeStamp = obsel.props[TraceModel.TIMESTAMP];
							typeObsel = TraceModel.UPDATE_TEXT_COMMENT;
							text = obsel.props[TraceModel.TEXT];
						}else
						{
							text = event.currentTarget.textComment;
						}
						// check if message empty
						if(UtilFunction.isEmptyMessage(text))
						{
							text = fxgt.gettext("(vide)");
						}
						updateObselComment.textComment = text;
						updateObselComment.timeStamp = timeStamp;
						updateObselComment.typeObsel  = typeObsel;
						updateObselComment.beginTime = beginTime;
						updateObselComment.endTime = endTime;
						updateObselComment.forUserId = forUserId;
					}
					if(event.currentTarget.deleting)
					{
						updateObselComment.textComment = obsel.props[TraceModel.TEXT];
						updateObselComment.timeStamp = obsel.props[TraceModel.TIMESTAMP];
						updateObselComment.typeObsel  = TraceModel.DELETE_TEXT_COMMENT;
						updateObselComment.beginTime = UtilFunction.getNumberEntier(obsel.begin).toString();
						updateObselComment.endTime = UtilFunction.getNumberEntier(obsel.end).toString();
						updateObselComment.forUserId = new Number(obsel.props[TraceModel.COMMENT_FOR_USER_ID]);
					}
					
					this.dispatchEvent(updateObselComment);
					// enabled skin
					if(event.currentTarget.currentObselSkin)
					{
						event.currentTarget.currentObselSkin.enabled = true;
					}
				}
			}
			
			private function onUpdateDurationObselComment(event:ObselEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var obsel:Obsel = event.obsel;
					var updateDurationObselComment:TraceLineEvent = new TraceLineEvent(TraceLineEvent.UPDATE_COMMENT_OBSEL);
					
					updateDurationObselComment.traceComment = Model.getInstance().getCurrentCommentTraceId()
					updateDurationObselComment.traceParent = Model.getInstance().getCurrentTraceId();
					updateDurationObselComment.sessionId = Model.getInstance().getCurrentSessionId();
					
					updateDurationObselComment.textComment = obsel.props[TraceModel.TEXT];
					updateDurationObselComment.timeStamp = obsel.props[TraceModel.TIMESTAMP];
					updateDurationObselComment.typeObsel  = TraceModel.UPDATE_TEXT_COMMENT;
					updateDurationObselComment.beginTime = UtilFunction.getNumberEntier(obsel.begin).toString();
					updateDurationObselComment.endTime = UtilFunction.getNumberEntier(obsel.end).toString();
					updateDurationObselComment.forUserId = new Number(obsel.props[TraceModel.COMMENT_FOR_USER_ID]);
					dispatchEvent(updateDurationObselComment);
				}
			}
			
			private function prePlayVideoFlux(value:Number,delta:Number = 0):void
			{
				if(delta != 0)
				{
					value = delta + this.timeLine.begin;
				}else
				{
					delta = value;
					value = value +  this.timeLine.begin;
				}
				trace("prePlayVideoFlux value= "+value.toString());
				trace("prePlayVideoFlux delta= "+delta.toString());
				
				this.pickCheryClick = value;
				// jump session on position delta in millesonds
				this.visio.seekSession = delta;
				
				// add obsel User Action
				var actionVideoPlayer:SalonRetroEvent = new SalonRetroEvent(SalonRetroEvent.ACTION_ON_VIDEO_PLAYER);
				actionVideoPlayer.typeAction = TraceModel.RETRO_VIEDO_GO_TO_TIME_EVENT;
				// choosing time by user
				actionVideoPlayer.timePlayer = this.pickCheryClick;
				this.dispatchEvent(actionVideoPlayer);
			}
			
			private function onUpdateDeletedSession(event:SessionEvent):void
			{
				if(Model.getInstance().getCurrentRetroModule() == this)
				{
					var sessionId:int = event.sessionId;
					// enabled button "salon synchrone
					if(Model.getInstance().getCurrentSession() != null && Model.getInstance().getCurrentSession().id_session == sessionId)
					{
						Model.getInstance().setCurrentSession(null);
						Model.getInstance().setEnabledButtonSalonSynchrone(false);
					}
				}
			}

			//_____________________________________________________________________
			//
			// Debug mode
			//
			//_____________________________________________________________________

			protected function button1_clickHandler(event:MouseEvent):void
			{
				var listUser:Array = Model.getInstance().getListUserPresentOnTimeLine();
				var ar:Array = new Array();
				var nbrUser:int = listUser.length;
				for(var nUser:int = 0 ; nUser < nbrUser ; nUser++)
				{
					var name:String = listUser[nUser];
					var info:String = "+/- (sec)";
					if(nUser == 0)
					{
						info = "currentTime(sec)";
					}
					var dgc:DataGridColumn = new DataGridColumn(name);
					
					dgc.headerText = "UserId  = "+ name+", "+info;
					dgc.dataField = "a"+ name;
					ar.push(dgc);
				}
				
//				dataDebug.columns = ar;
				
				var html:XML = new XML("<html/>");
				var body:XML = new XML("<body/>");
				html.appendChild(body);
				var table:XML = new XML("<table border='1' />");
				body.appendChild(table);
				
				var list:ArrayCollection = Model.getInstance().getFrameSplit();
				
				var cloneList:ArrayCollection = new ArrayCollection();
				cloneList.addAll(list);
				var array:Array = new Array();
				array = cloneList.source as Array;
				array.reverse();
				
				var nbrFrame:int = array.length;
				for(var nFrame:int = 0; nFrame < nbrFrame ; nFrame++)
				{
					var obj:Object = array[nFrame] as Object;
					var trTag:XML = getTimeByUserId(obj, listUser);
					table.appendChild(trTag);
				}

				var xmlList:XMLList = html.body.table.tr as XMLList;
//				dataDebug.dataProvider = xmlList;
				
				function getTimeByUserId(value:Object, listUser:Array):XML
				{
					var result:XML = new XML("<tr/>");
					var nbrUser:int = listUser.length;
					var tempTime:Number = 0;
					var frameSec:String = "";
					for(var nUser:int = 0 ; nUser < nbrUser ; nUser++)
					{
						var userId:String = listUser[nUser].toString();
						if(value.hasOwnProperty(userId))
						{
							var time:Number = value[userId];
							if (nUser == 0)
							{
								tempTime = time;
								frameSec = tempTime.toString();
							}
							else
							{
								time = time - tempTime;
								var secMylt10in2:int = int(time * 100 );
								var sec:int = secMylt10in2/100;
								var secAfterPoint:int = secMylt10in2 - sec*100;
								var plusMinus:String = "";
								if(time < 0)
								{
									plusMinus = "-";
									secAfterPoint = secAfterPoint * -1;
								}
								frameSec = plusMinus + sec.toString()+"."+secAfterPoint.toString();
								
							}
							var td:XML = new XML("<a"+userId+">"+frameSec+"</a"+userId+">");
							result.appendChild(td);
						}else
						{
							var tdEmpty:XML = new XML("<td>-----------</td>");
							result.appendChild(tdEmpty);
						}
						
					}
					return result;
				}
			}

			protected function numStepplerIntervelDecolageFlux_changeHandler(event:Event):void
			{
				// update max interval the decalage
				this.maxIntervalDecalage = (event.currentTarget as NumericStepper).value;	
			}

			protected function numStepplerIntervalCheckDecalageFlux_changeHandler(event:Event):void
			{
				this.intervalCheckDecalage = (event.currentTarget as NumericStepper).value;
				timerSynchro.delay = this.intervalCheckDecalage*1000;
			}

			protected function visio_updateTimeHandler(event:VisuVisioAdvancedEvent):void
			{
				var beginTime:Number = event.beginTime;
				
				timeLine.currentTime = timeLine.begin + beginTime ;
				
				var currentTime:String = updateLabelTimer(beginTime);
				if( this.currentRetroDocumentSegmentPlaying != null)
				{
					this.currentRetroDocumentSegmentPlaying.currentTime = beginTime;
				}
				
				// set current time for drag/drop video to retroDocument
				this.currentTimeSessionMilliseconds = beginTime + this.timeLine.begin;
				
				this.documentarisation.currentTime = beginTime;
			}

			
			private function mouseMoveHandler(event:MouseEvent):void
			{
				var dragInitiator:PanelEditComment = PanelEditComment(event.currentTarget);
				var dragSource:DragSource = new DragSource();
				dragSource.addData(dragInitiator, "panelEditComment");
				DragManager.doDrag(dragInitiator, dragSource, event);
			}
			
			private function dragEnterHandler(event:DragEvent):void 
			{
				if (event.dragSource.hasFormat("panelEditComment"))
				{
					pointPanelEditComment = new Point(event.dragInitiator.mouseX, event.dragInitiator.mouseY);
					DragManager.acceptDragDrop(Panel(event.currentTarget));
				}
			}
			
			private function dragDropHandler(event:DragEvent):void 
			{
				var panel:Panel = Panel(event.currentTarget);
				var panelEditComment:PanelEditComment = PanelEditComment(event.dragInitiator);
				var delta:int = 35;
				var pt:Point = new Point(panel.mouseX, panel.mouseY);
				pt = panel.localToGlobal(pt);
				pt = panel.globalToLocal(pt);
				
				panelEditComment.x =
					pt.x - pointPanelEditComment.x;
				panelEditComment.y =
					pt.y - pointPanelEditComment.y - delta;
			}

			protected function panelVideo_clickButtonMuteVolumeHandler(event:PanelButtonEvent):void
			{
				// update mute volume
				this.visio.setVolumeMute(event.mute);
			}

			protected function panelVideo_clickButtonModeMaxHandler(event:PanelButtonEvent):void
			{
				panelVideo.buttonModeMaxEnabled = false;
				panelVideo.buttonModeZoomEnabled = true;
				visio.zoomMax = true;
			}

			protected function panelVideo_clickButtonModeZoomHandler(event:*):void
			{
				panelVideo.buttonModeMaxEnabled = true;
				panelVideo.buttonModeZoomEnabled = false;
				visio.zoomMax = false;
			}

			protected function timeLine_timeRulerClickHandler(event:TimelineEvent):void
			{
				// stop play RetroDocumentSegment if playing
				this.clickOnTimeLine = true;
				// stop play video segment
				endVideoSegment();
				// pre play video flux
				prePlayVideoFlux(event.value);	
			}

			protected function timeLine_playButtonClickHandler(event:TimelineEvent):void
			{
				onCheckSeekStream()
			}

			protected function timeLine_pauseButtonClickHandler(event:TimelineEvent):void
			{
				onCheckSeekStream()
			}
			//_____________________________________________________________________
			//
			// Utils
			//
			//_____________________________________________________________________	
			private function notifyReadyForUse():void
			{
				var ev:Event = new Event("readyForUse");
				this.dispatchEvent(ev);
			}

		]]>
	</fx:Script>
	<modules:states>
		<s:State name="State1"/>
		<s:State name="vciel"/>
		<s:State name="debug"/>
	</modules:states>
	<fx:Declarations>
		<maps:RetrospectionMap id="retrospectionMap"  dispatcher="{this}"/>
		<mate:Listener type="{SessionEvent.LOAD_LIST_OBSEL_RETRO}"  method="updateTimeLine"/>
		<mate:Listener type="{RetroDocumentEvent.LOAD_LIST_RETRO_DOCUMENT}"  method="loadListRetroDocument"/>
		<mate:Listener type="{RetroDocumentEvent.SHOW_RETRO_DOCUMENT}"  method="showRetroDocument"/>
		<mate:Listener type="{RetroDocumentEvent.UPDATE_ADDED_RETRO_DOCUMENT}"  method="updateAddedRetroDocument"/>
		<mate:Listener type="{RetroDocumentEvent.PLAY_RETRO_SEGMENT}"  method="playRetroDocument" />
		<mate:Listener type="{RetroDocumentEvent.PAUSE_RETRO_SEGMENT}"  method="pauseRetroDocument" />
		<mate:Listener type="{RetroDocumentEvent.LOADED_ALL_USERS}"  method="loadedAllUsers"/>
		<mate:Listener type="{SessionEvent.UPDATE_DELETED_SESSION}"  method="onUpdateDeletedSession"/>
		
		<mate:Listener type="{TraceLineEvent.PRE_ADD_COMMENT_OBSEL}"  method="onPreAddComment" useWeakReference="true"/>
		<mate:Listener type="{ObselEvent.PRE_EDIT_OBSEL_COMMENT_BY_SKIN_COMMENT}"  method="onPreAddCommentBySkinComment" useWeakReference="true"/>
		<mate:Listener type="{ObselEvent.UPDATE_DURTION_OBSEL_COMMENT}"  method="onUpdateDurationObselComment" useWeakReference="true"/>
		
	</fx:Declarations>
	<mx:VDividedBox width="100%" height="100%">
		<mx:HDividedBox width="100%" height="60%">
<!-- VIDEO -->
			<components:PanelButton height="100%" width="100%" id="panelVideo" minWidth="450"
				dragEnter="dragEnterHandler(event);"
				dragDrop="dragDropHandler(event);"
				buttonVolumeVisible="true"
				buttonMuteMicroVisible="false"
				buttonModeMaxVisible="true"
				buttonModeZoomVisible="true"
				buttonModeZoomEnabled="false"
				buttonModeMaxEnabled="true"
				clickButtonMuteVolume="panelVideo_clickButtonMuteVolumeHandler(event)"
				clickButtonModeMax="panelVideo_clickButtonModeMaxHandler(event)"
				clickButtonModeZoom="panelVideo_clickButtonModeZoomHandler(event)">
				<mx:VDividedBox width="100%" height="100%">
					<s:Group height="75%" width="100%" id="groupeVideo">
						<video:VisuVisioAdvanced id="visio" width="100%"  height="100%"
							quality="80"
							updateTime="visio_updateTimeHandler(event)"
							clickPanelVideo="visio_clickPanelVideoHandler(event)"
							clickButtonComment="visio_clickButtonCommentHandler(event)"
							clickButtonZoom="panelVideo_clickButtonModeZoomHandler(event)"
							buttonChatEnabled="false"
							buttonMarkerEnabled="false"
							buttonCommentEnabled="true"
							buttonMode="true"
							bandwidth="15000" autoPlay="true"
							loggedUser="{Model.getInstance().getLoggedUser()}">
						</video:VisuVisioAdvanced>
						<s:HGroup gap="3"  includeIn="debug" width="100%">
							<mx:Spacer width="100%"/>
							<s:Button id="buttomTraceFrame" label="Update split" click="button1_clickHandler(event)"/>
							<s:Label text="Décalage max. autorisé(s) est:" paddingTop="7"/>
							<s:NumericStepper stepSize="0.1" minimum="0.1" maximum="5.0" value="{this.maxIntervalDecalage}" width="55" id="numStepplerIntervelDecolageFlux" change="numStepplerIntervelDecolageFlux_changeHandler(event)"/>
							<s:Label text="Périod de verification(s)" paddingTop="7"/>
							<s:NumericStepper stepSize="1" minimum="1" maximum="25" value="{this.intervalCheckDecalage}" width="45" id="numStepplerIntervalCheckDecalageFlux" change="numStepplerIntervalCheckDecalageFlux_changeHandler(event)"/>
						</s:HGroup>
					</s:Group>
					<timeline:Timeline id="timeLine" width="100%"  height="100%" 
					    playButtonClick="timeLine_playButtonClickHandler(event)"
						pauseButtonClick="timeLine_pauseButtonClickHandler(event)"
						timeRulerClick="timeLine_timeRulerClickHandler(event)"
						timeMode="relative" 
						contextFollowCursor="false"
						showPlayButton="true"/>
				</mx:VDividedBox>
			</components:PanelButton>
<!-- DOCUMENTARISATION -->		
			<documentarisation:Documentarisation height="100%" minWidth="330"
				 id="documentarisation"
				 addRetroDocument="documentarisation_addRetroDocumentHandler(event)">				 
			</documentarisation:Documentarisation>
		</mx:HDividedBox>
	</mx:VDividedBox>
</modules:VisuModuleBase>