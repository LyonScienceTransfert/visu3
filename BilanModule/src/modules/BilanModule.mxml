<?xml version="1.0" encoding="utf-8"?>
<modules:VisuModuleBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
	   xmlns:s="library://ns.adobe.com/flex/spark" 
	   xmlns:mx="library://ns.adobe.com/flex/mx" 
	   xmlns:modules="com.ithaca.visu.modules.*" 
	   xmlns:maps="maps.*"
	   xmlns:mate="http://mate.asfusion.com/"
	   xmlns:controls="com.ithaca.visu.controls.*"
	   configure="configureHandler(event)"
	   top="0" bottom="0" left="0" right="0" 
	   xmlns:vo="com.ithaca.visu.model.vo.*" 
	   xmlns:ithaca="com.ithaca.components.*"
	   creationComplete="initBilanModule(event)"
       currentStateChange="visumodulebase1_currentStateChangeHandler(event)"
       xmlns:components="com.ithaca.utils.components.*"
	   >
	<fx:Declarations>
		<s:ArrayList id="segmentList"/>
		<maps:BilanMap dispatcher="{this}"/>
		<mate:Listener type="{BilanEvent.SHOW_RETRIEVED_BILAN_LIST}"  method="showRetrievedBilanList"/>
		<mate:Listener type="{RetroDocumentEvent.SHOW_RETRO_DOCUMENT}"  method="showRetroDocument"/>
		<mate:Listener type="{SessionEvent.LOAD_LIST_OBSEL_BILAN}"  method="initVisio"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
            import com.ithaca.documentarisation.events.RetroDocumentEvent;
            import com.ithaca.documentarisation.model.RetroDocument;
            import com.ithaca.events.SelectionEvent;
            import com.ithaca.utils.UtilFunction;
            import com.ithaca.utils.VisuUtils;
            import com.ithaca.visu.events.BilanEvent;
            import com.ithaca.visu.events.InitMapEvent;
            import com.ithaca.visu.events.PanelButtonEvent;
            import com.ithaca.visu.events.SessionEvent;
            import com.ithaca.visu.events.VisuModuleEvent;
            import com.ithaca.visu.model.Model;
            import com.ithaca.visu.model.Session;
            import com.ithaca.visu.model.User;
            import com.ithaca.visu.model.vo.RetroDocumentVO;
            import com.ithaca.visu.model.vo.SessionVO;
            
            import mx.collections.ArrayCollection;
            import mx.collections.ArrayList;
            import mx.events.StateChangeEvent;
            import mx.logging.ILogger;
            import mx.logging.Log;
            import mx.managers.CursorManager;
			
			private var logger : ILogger = Log.getLogger('modules.BilanModule');
			
			private var selectedSessionIdWhenInit:Number = -1;
			private var selectedRetroDocumentIdWhenInit:Number = -1;			
			
			private function showRetroDocument(event:RetroDocumentEvent):void {
				if(Model.getInstance().getCurrentBilanModule() == this)
				{
					if(bilanViewer == null) {
						logger.warn("Undesired call to BilanModule.showRetroDocument");
						return;
					}
				
					logger.debug("Displaying the retro document {0} received", event.retroDocument.id);
					
					var doc:RetroDocument = event.retroDocument;
	
					var i:int; 
					for (i = 0; i < this.bilanComp.bilanCollection.length; i++) 
					{ 
						var retroDoc:RetroDocument = this.bilanComp.bilanCollection.getItemAt(i) as RetroDocument;
						if(retroDoc.id == doc.id) {
							logger.debug("Passing the session object to the retro document {0} to be displayed. Session: {1} (Session.ownerId: {2})", 
								event.retroDocument.id, 
								retroDoc.session,
								retroDoc.session.id_user
								);
							doc.session = retroDoc.session;
						}
					}
					
					// set current session
					var currentSession:Session = doc.session;
					Model.getInstance().setCurrentSession(currentSession);
					
					bilanViewer.setNewBilan(doc);
					// set enabled edit bilan if logged user owner of the bilan
					var canEditBilan:Boolean = false;
					if(doc.ownerId == Model.getInstance().getLoggedUser().id_user)
					{
						canEditBilan = true;
					}
					panelButtonBilan.buttonSwitchEnabled = canEditBilan;
					panelButtonBilan.title = "Bilan de "+'"'+doc.title+'"';
					panelButtonBilan.retroDocument = doc;
					
				}
			}
			
			private function initVisio(event:SessionEvent):void
			{
				if(Model.getInstance().getCurrentBilanModule() == this)
				{
					this.bilanViewer.stop();			
					this.bilanViewer.visio.removeTimer();
					
					var startTimeSession:Number = event.dateStartRecording.time;
					this.bilanViewer.visio.startTimeSession = startTimeSession;
					// set dataProvider with collection the StreamObsel
					var listStreamObsel:ArrayCollection = Model.getInstance().getListStreamObsel();
					this.bilanViewer.visio.dataProvider = listStreamObsel;
					// init button mute volume and button play/pause
					this.bilanViewer.initButtons(this.bilanViewer.visio.getVolumeMute())	
					this.bilanViewer.visio.startTimer();
					this.bilanViewer.visio.autoPlay = false;
				}
				
			}
			
			private function onRemovedModuleFromStage(event:Event):void {
				logger.info("Removing the BilanModule from stage");
				if(this.bilanViewer) {
					logger.debug("Stopping the bilan viewer");
					this.bilanViewer.stop();			
					this.bilanViewer.visio.removeTimer();
				}
					
				// add obsel user walk out from retro room
				var outFromBilanModule:VisuModuleEvent = new VisuModuleEvent(VisuModuleEvent.WALK_OUT_MODULE);
				this.dispatchEvent(outFromBilanModule);
				
				// set current module null
				Model.getInstance().setCurrentBilanModule(null);
			}
			
			private function showRetrievedBilanList(event:BilanEvent):void 
			{
				
				if(Model.getInstance().getCurrentBilanModule() == this)
				{
					logger.debug("showRetrievedBilanList. {0} docs and {1} filter sessions", event.retroDocuments.length, event.filterSessionCollection.length);
					
					if(bilanComp) {
						logger.debug("showRetrievedBilanList. bilanComp NOT NULL");
						var filterSessionCollection:ArrayList = new ArrayList();
						for each (var session:SessionVO in event.filterSessionCollection) 
						{
							filterSessionCollection.addItem(new Session(session));
						}
						logger.debug("bilanComp {0}", bilanComp);
						logger.debug("filterSessionCollection {0}", filterSessionCollection);
						bilanComp.setFilterSessionList(filterSessionCollection);
	
						var bilanCollection:ArrayCollection = new ArrayCollection();
						for each(var vo:RetroDocumentVO in event.retroDocuments) {
							var retroDocument:RetroDocument = new RetroDocument(vo);
							bilanCollection.addItem(retroDocument);
						}
	
						logger.debug("bilanCollection {0}", bilanCollection);
						bilanComp.setBilanCollection(bilanCollection);
						
						logger.debug("Select the right session in the session list if any");
						if(selectedSessionIdWhenInit != -1) {
							logger.debug("Ask for the selection of retroDocument {0} in the bilan component", selectedSessionIdWhenInit);
							bilanComp.selectRetroDocument(selectedRetroDocumentIdWhenInit);
							logger.debug("Ask for the selection of session {0} in the bilan component", selectedSessionIdWhenInit);
							bilanComp.selectSession(selectedSessionIdWhenInit);
						}
					} else 
						logger.warn("showRetrievedBilanList. bilanComp NULL");
				// notify that module ready for use
				notifyReadyForUse();
				}
			}

			protected function configureHandler(event:VisuModuleEvent):void
			{	
				logger.debug("BilanModule.configureHandler");
                // set label 
                bilanViewer.showBilanByInitApplication = false;
				if((event.currentTarget as BilanModule).parameters != null)
				{
					logger.debug("There are parameters passed to BilanModule");
					var param:Array = (event.currentTarget as BilanModule).parameters as Array ;
					logger.debug("param: {0}", param);
					var cameFromModule:String = param[0];
					switch (cameFromModule)
					{
						case "CameFromHomeModule" :
							// 
							break;
						case "CameFromRetroModule" :
							this.selectedRetroDocumentIdWhenInit = param[2];
							break;
                        // came on init application 
                        case "CameOnInitApplication" :
                            this.selectedRetroDocumentIdWhenInit = param[2];
                            // set flag came by init application
                            bilanViewer.showBilanByInitApplication = true;
                            break;
					}
					// set selected sessionId
					this.selectedSessionIdWhenInit = param[1];
					
					logger.debug("selectedSessionIdWhenInit: {0}", this.selectedSessionIdWhenInit);
				} else
					logger.debug("No parameter passed to the module");
					
				// set current module
				Model.getInstance().setCurrentBilanModule(this);
				var initMapEvent:InitMapEvent = new InitMapEvent(InitMapEvent.INIT_MAP_BILAN);
				this.dispatchEvent(initMapEvent); 
			}
			
            private function initBilanModule(event:*):void {
                // set focus
                this.setFocus();
                
                logger.debug("Dispatching BILAN_MODULE_LOADED");
                
                this.addEventListener(Event.REMOVED_FROM_STAGE, onRemovedModuleFromStage);
                
                bilanComp.addEventListener("SelectionEvent", onBilanSelected);
                var moduleLoadedEvent:BilanEvent = new BilanEvent(BilanEvent.BILAN_MODULE_LOADED); 
                // logged user
                var loggedUser:User = Model.getInstance().getLoggedUser();
                // logged user id
                var userId:int = loggedUser.id_user;
                // check if logged user admin
                // FIXME : can find auther solution, on server side
                if(VisuUtils.isAdmin(loggedUser)){
                    // get all retro document for admin
                    userId = 0;
                }
                moduleLoadedEvent.userId = userId;		
                this.dispatchEvent(moduleLoadedEvent);
                
                // set cursor 
                CursorManager.removeBusyCursor(); 
            }


			private function  onBilanSelected(event:SelectionEvent):void {
				var bilanId = event.selectedId;
				if(bilanId == -1) {
					bilanViewer.bilan = null;
				} else {
					logger.debug("The bilan {0} is selected from the bilan list. Dispatching BilanEvent...", bilanId);
					var bilanSelectedEvent:BilanEvent = new BilanEvent(BilanEvent.NEW_BILAN_SELECTED);  
					bilanSelectedEvent.bilanId=bilanId;
					this.dispatchEvent(bilanSelectedEvent);
				}
			}

			protected function panelButtonBilan_clickButtonSwitchHandler(event:PanelButtonEvent):void
			{
				var bilan:RetroDocument = bilanViewer.bilan;
				var switchModuleEvent:RetroDocumentEvent = new RetroDocumentEvent(RetroDocumentEvent.GO_RETRO_MODULE_FROM_BILAN);
				switchModuleEvent.session = bilan.session;
				switchModuleEvent.idRetroDocument = bilan.id;
				this.dispatchEvent(switchModuleEvent);
			}
			
			/////////
			// Listeners the segments
			////////
			private function onPlayRetroSegment(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentBilanModule() == this)
				{
					bilanViewer.playRetroSegment(event.target, event.beginTime, event.endTime);
				}
				
			}
			private function onPauseRetroSegment(event:RetroDocumentEvent):void
			{
				if(Model.getInstance().getCurrentBilanModule() == this)
				{
					bilanViewer.pauseRetroSegment();
				}
				
			}

			//_____________________________________________________________________
			//
			// Utils
			//
			//_____________________________________________________________________		
			/**
			 * notify , ready for use
			 */
			private function notifyReadyForUse():void
			{
				var event:VisuModuleEvent = new VisuModuleEvent(VisuModuleEvent.READY_FOR_USE);
				event.moduleName = VisuModuleEvent.BILAN_MODULE;
				this.dispatchEvent(event);
			}

            ////////////////////////////////////////////////////////
            // INFO : have to set focus, runtime error SDK 4.5    //
            ////////////////////////////////////////////////////////
            protected function visumodulebase1_currentStateChangeHandler(event:StateChangeEvent):void
            {
               this.setFocus();
            }

		]]>
	</fx:Script>
	<fx:Declarations>
		<mate:Listener type="{RetroDocumentEvent.PLAY_RETRO_SEGMENT}"  method="onPlayRetroSegment" />
		<mate:Listener type="{RetroDocumentEvent.PAUSE_RETRO_SEGMENT}"  method="onPauseRetroSegment" />
	</fx:Declarations>
	<mx:HDividedBox width="100%" height="100%">
	  	<s:Panel title="Explorateur" width="30%" minWidth="400" height="100%">
			<s:VGroup width="100%" height="100%">
				<ithaca:BilanList 
					id="bilanComp"
					showNewButton="false"
					showFilterButtons="true"
					showFilterText="true"
					width="100%"
					height="100%"
					/>
			</s:VGroup>
	    </s:Panel>   
	
		<components:PanelButton width="70%" height="100%" minWidth="570"
			 id="panelButtonBilan"
			 buttonSwitchEnabled="false"
			 buttonSwitchVisible="true"
			 imageInfoVisible="true"
			 clickButtonSwitch="panelButtonBilan_clickButtonSwitchHandler(event)">
			<ithaca:BilanViewer
					id="bilanViewer"
					width="100%"
					height="100%"
					/>
		</components:PanelButton>	
	</mx:HDividedBox>   
</modules:VisuModuleBase>
