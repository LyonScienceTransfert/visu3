<?xml version="1.0" encoding="utf-8"?>
<s:Group 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
    	xmlns:s="library://ns.adobe.com/flex/spark" 
    	xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:ithaca="com.ithaca.components.*"
		xmlns:controls="com.lyon2.controls.*"
		xmlns:mate="http://mate.asfusion.com/" xmlns:video="com.ithaca.visu.view.video.*" xmlns:components="com.ithaca.utils.components.*"
	    >
    <fx:Script>
        <![CDATA[
			import com.ithaca.documentarisation.RetroDocumentConst;
			import com.ithaca.documentarisation.events.RetroDocumentEvent;
			import com.ithaca.documentarisation.model.RetroDocument;
			import com.ithaca.documentarisation.model.Segment;
			import com.ithaca.documentarisation.renderer.BlocCommentAudioBilanRenderer;
			import com.ithaca.documentarisation.renderer.BlocTitleBilanRenderer;
			import com.ithaca.documentarisation.renderer.BlocVideoBilanRenderer;
			import com.ithaca.visu.events.BilanEvent;
			import com.ithaca.visu.model.Model;
			import com.ithaca.visu.ui.utils.IconEnum;
			import com.ithaca.visu.view.video.VisuVisioAdvancedEvent;
			
			import mx.events.FlexEvent;
			import mx.logging.ILogger;
			import mx.logging.Log;
			
			private var logger : ILogger = Log.getLogger('com.ithaca.components.BilanViewer');
			
			[Bindable]
			private var timer:Timer;
			
			[Bindable]
			public var bilan:RetroDocument = null;
			
			// start session in ms from 1970 year
			// for calculate seekSession, beginSegment has time ms from 1970
			private var sessionStart:Number;
			
			public function stop():void {
				if(this.visio) {
					logger.debug("Removing all streams from the video player in bilan module");
					this.visio.removeAllStreams();
				}
					
				if(this.timer) {
					logger.debug("Stopping the timer in bilanViewer");
					this.timer.stop();
					this.timer = null;
				} 
			}

			public function setNewBilan(bilan:RetroDocument):void {
				this.bilan = bilan;
						
				if(this.visio!=null) 
					this.visio.removeAllStreams();
				logger.debug("Setting a new bilan to the bilan viewer");
				logger.debug("id: {0}",bilan.id);
				logger.debug("creation date: {0}",bilan.creationDateAsDate);
				logger.debug("modification date: {0}",bilan.modifyDateAsDate);
				logger.debug("creation date (str): {0}",bilan.creationDate);
				logger.debug("modification date (str): {0}",bilan.modifyDate);
				logger.debug("title: {0}",bilan.title);
				logger.debug("description: {0}",bilan.description);
				logger.debug("session id: {0}",bilan.session.id_session);	
				logger.debug("session theme: {0}",bilan.session.theme);
				logger.debug("session owner id: {0}",bilan.session.id_user);
				
				if(bilan != null) {
					var event:BilanEvent = new BilanEvent(BilanEvent.BILAN_LOADED);
					event.sessionId = bilan.sessionId;
					logger.info("Sending the request for the obsel list of session {0}", bilan.sessionId);
					logger.info("The attached session object is {0}", bilan.session);
					this.dispatchEvent(event);
					// can edit if logged user owner of the bilen
					var canEditBilan:Boolean = false;
					if(bilan.ownerId == Model.getInstance().getLoggedUser().id_user)
					{
						canEditBilan = true;
					}
					buttonSwitch.enabled = canEditBilan;
				}
			}
						
			private function initVisio(event:Event):void {
				this.visio.connection = Model.getInstance().getNetConnection();
				this.visio.addVideoStream("void",null, 0.0, true);
				// add listener play/pause video by click on component
				this.visio.addEventListener(VisuVisioAdvancedEvent.CLICK_PANEL_VIDEO, onClickPanelVideoVisuVisioAdvanced);
			}
	
			private function playVideoSegment(segment:Segment):void {
				var segmentTime:Number = segment.beginTimeVideo;
				logger.info("Ask for playing the video of segment {0} (current time: {2})", segment.comment, segmentTime);
				// jump to begin the segment
				this.visio.seekSession = segmentTime;
				
				var durationInMillis:Number = segment.endTimeVideo - segment.beginTimeVideo;
				// check NaN duration of segment
				if (isNaN(durationInMillis))
				{
					durationInMillis = 0;
				}
				logger.debug("Setting up a new timer for the segment video playing. Duration in sec: {0}", int(durationInMillis/1000));
				if(this.timer != null && this.timer.running)
				{
					this.timer.removeEventListener(TimerEvent.TIMER_COMPLETE, timerCompleteHandler);
					this.timer.stop();
					this.timer = null;
				}
				this.timer = new Timer(durationInMillis,1);
				this.timer.addEventListener(TimerEvent.TIMER_COMPLETE, timerCompleteHandler);
				this.timer.start();
			}
			
			private function timerCompleteHandler(e:TimerEvent):void {
				logger.debug("Timer complete for the segment video playing. Removing all streams from the video component.");
				this.timer.removeEventListener(TimerEvent.TIMER_COMPLETE, timerCompleteHandler);
				this.visio.pauseStreams();
				buttonPlay.enabled = false;
				buttonPlay.label = "Pause";
				this.visio.status = VisuVisioAdvanced.STATUS_NONE;
				// Clear the selection
				this.segmentList.selectedItems = new Vector.<Object>();
	        }
	        
			private function onSegmentSelectionClick(e:MouseEvent):void {
				if(segmentList && segmentList.selectedItems && segmentList.selectedItems.length==1 && !(e.target is mx.controls.Button) ) {
					var segment:Segment = segmentList.selectedItems[0] as Segment;
					logger.debug("Ask for playing the video at session time {0}", int((segment.beginTimeVideo - sessionStart)/1000));
					this.visio.autoPlay = true;
					this.buttonPlay.enabled = true;
					playVideoSegment(segment);
					// enabled button play/pause
					buttonPlay.enabled = true;
					buttonPlay.label = "Pause";
					// set status play 
					this.visio.status = VisuVisioAdvanced.STATUS_REPLAY;
				} else
					logger.debug("Selection changed on segmentList but nothing is selected now");
			}
	
			protected function buttonPlay_clickHandler(event:* = null):void
			{
				if( buttonPlay.label == "Play")
				{
					buttonPlay.label = "Pause";
					this.visio.resumeStreams();
					this.visio.status = VisuVisioAdvanced.STATUS_REPLAY;
					if(this.timer != null)
					{
						this.timer.start();
					}
				}else
				{
					buttonPlay.label = "Play";
					this.visio.pauseStreams();
					this.visio.status = VisuVisioAdvanced.STATUS_PAUSE;
					if(this.timer != null)
					{
						this.timer.stop();
					}
				}
			}
			protected function buttonMute_clickHandler(event:* = null):void
			{
				if(buttonMute.label == "Couper le son")
				{
					buttonMute.label = "Activer le son";
					this.visio.setVolumeMute(true);
				}else
				{
					buttonMute.label = "Couper le son";
					this.visio.setVolumeMute(false);
				}
			}
			
			public function initButtons(value:Boolean):void
			{
				var label:String = "Couper le son";
				if(!value)
				{
					label = "Activer le son";
				}
				buttonMute.label = label;
				buttonMute_clickHandler();
				buttonPlay.enabled = false;
				buttonPlay.label = "Pause";
				buttonPlay_clickHandler();
			}
			/**
			 * Play/pause video by click on component
			 */
			private function onClickPanelVideoVisuVisioAdvanced(event:VisuVisioAdvancedEvent):void
			{
				buttonPlay_clickHandler();
			}

			protected function buttonPlusInfo_clickHandler(event:MouseEvent):void
			{
				if(this.currentState == "normal")
				{
					this.currentState = "plusInfo";
				}else if(this.currentState == "plusInfo")
				{
					this.currentState = "normal";
				}
			}

			protected function buttonSwitch_clickHandler(event:MouseEvent):void
			{
				var switchModuleEvent:RetroDocumentEvent = new RetroDocumentEvent(RetroDocumentEvent.GO_RETRO_MODULE_FROM_BILAN);
				switchModuleEvent.session = bilan.session;
				switchModuleEvent.idRetroDocument = bilan.id;
				this.dispatchEvent(switchModuleEvent);
			}

			private function setRendererSegmentFunction(item:Object):ClassFactory
			{
				var className:Class = BlocTitleBilanRenderer;
				
				if(item.typeSource == RetroDocumentConst.COMMENT_AUDIO_SEGMENT)
				{
					className = BlocCommentAudioBilanRenderer;
				}else
					if(item.typeSource == RetroDocumentConst.VIDEO_SEGMENT)
					{
						className = BlocVideoBilanRenderer;
					}
				return new ClassFactory( className);
			}
        ]]>
    </fx:Script>
    <s:states>
        <s:State name="normal"/>
        <s:State name="plusInfo"/>
    </s:states>

	<s:VGroup includeInLayout="{!bilan}" visible="{!bilan}" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
			<s:Label text="Aucun bilan sélectionné" fontSize="14" fontStyle="italic"/>
	</s:VGroup>
 
	<s:VGroup includeInLayout="{bilan}" visible="{bilan}" width="100%" height="100%" verticalAlign="top" horizontalAlign="left" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
				<s:HGroup paddingTop="5" paddingBottom="5" paddingRight="5" paddingLeft="5" width="100%" verticalAlign="middle" height="100%">

						<s:VGroup 
							minWidth="150"
							width="50%"
							height="100%">
								<s:HGroup width="100%" gap="2"> 
									<s:Label 
										fontSize="20"
										fontWeight="bold"
										lineBreak="toFit"
										width="100%"
										text="{bilan.title}"/>
									<mx:Spacer width="2"/>
									<mx:Button id="buttonSwitch" icon="{IconEnum.getIconByName('iconMinimaze_16x16')}" enabled="true" width="22" height="22" buttonMode="true"
										 click="buttonSwitch_clickHandler(event)">
										<mx:toolTip>Editer ce bilan</mx:toolTip>
									</mx:Button>
									<mx:Button  id="buttonPlusInfo" height="22"
										click="buttonPlusInfo_clickHandler(event)" 
										buttonMode="true">
										<mx:label.normal>Voir les informations</mx:label.normal>
										<mx:label.plusInfo>Cacher les informations</mx:label.plusInfo>
									</mx:Button>
								</s:HGroup>
								<s:Label 
									fontSize="12"
									lineBreak="toFit"
									width="100%"
									fontStyle="italic"
									 visible="false"
									text="{bilan.description}"/>
								
								<s:List id="segmentList" 
									
									borderVisible="false" width="100%" height="100%"  
									dataProvider="{bilan.listSegment}" 
									itemRendererFunction="setRendererSegmentFunction">
									<!--<s:itemRenderer>
										<fx:Component>
											<s:ItemRenderer creationComplete="initRenderer(event)" left="0" right="0" currentStateChange="itemrenderer1_currentStateChangeHandler(event)">
												<s:states>
													<s:State name="normal" />
													<s:State name="selected" />
													<s:State name="hovered" />
												</s:states>
												<fx:Script>
													<![CDATA[
														import com.ithaca.documentarisation.model.Segment;
														import com.ithaca.visu.events.PlaySegmentVideoEvent;
														import com.ithaca.visu.ui.utils.IconEnum;
														import com.lyon2.controls.utils.TimeUtils;
														
														import flash.events.MouseEvent;
														
														import mx.events.StateChangeEvent;
														import mx.logging.ILogger;
														import mx.logging.Log;
														private var segment:Segment;
														private var logger : ILogger = Log.getLogger('com.ithaca.components.BilanViewer.anonymousRenderer');

														[Bindable]
														private var sessionStart:Number;
														
														 override public function set data(value:Object):void { 
													    	super.data = value; 
														    if (value== null) 
														      return; 
															
															segment = data as Segment;
															//logger.debug("SegmentRenderer set data. Title: {0}, Comment: {1}", data.title, data.comment);

															this.sessionStart = data.parentRetroDocument.session.date_start_recording.time;
														}
				
														private function initRenderer(event:Event):void {
															logger.debug("SegmentRenderer Initialized. Comment: {1}", data.comment);
															this.sessionStart = data.parentRetroDocument.session.date_start_recording.time;
															
															playImage.includeInLayout = playImage.visible = false;
															
															var nameIcon:String = "";
															switch (segment.typeSource)
															{
																case "3" :
																	nameIcon = "iconAudio_16x16";
																	if(data.durationCommentAudio != 0)
																	{
																		pasAudio.includeInLayout = pasAudio.visible = false;
																		labelDuration.text = data.durationCommentAudio;
																	}else
																	{
																		idDuree.includeInLayout = idDuree.visible = false;
																	}
																	break;
																case "4" :
																	nameIcon = "iconVideo_16x16";
																	idDuree.includeInLayout = idDuree.visible = true;
																	if(data.durationCommentAudio == 0)
																	{
																		labelDuration.text = "51";
																	}
																	pasAudio.includeInLayout = pasAudio.visible = false;
																	break;
																default :
																	idDuree.includeInLayout = idDuree.visible = false;
																	pasAudio.includeInLayout = pasAudio.visible = false;
																	break;
																
															}
															playLabel.includeInLayout = playLabel.visible = false;
															imageTypeSegment.source =IconEnum.getIconByName(nameIcon);
														}
														private function itemrenderer1_currentStateChangeHandler(event:Event):void
														{
															playImage.includeInLayout = playImage.visible = false;
															
															if(currentState == "selected")
															{
																pasAudio.includeInLayout = pasAudio.visible = false;
																idDuree.includeInLayout = idDuree.visible = false;
																playLabel.includeInLayout = playLabel.visible = true;
																playImage.includeInLayout = playImage.visible = false;
															}else if (currentState == "hovered")
															{
																pasAudio.includeInLayout = pasAudio.visible = false;
																playLabel.includeInLayout = playLabel.visible = false;
																if(data.durationCommentAudio != 0)
																{
																	idDuree.includeInLayout = idDuree.visible = true;
																	playImage.includeInLayout = playImage.visible = true;
																}
															}
																
															
														}
														
													]]>
												</fx:Script>
												<s:VGroup width="100%" gap="1">
													<s:VGroup paddingTop="5" gap="5" paddingBottom="5" paddingRight="5" paddingLeft="5" width="100%">
															<s:HGroup visible="{data.title.length>0}" includeInLayout="{data.title.length>0}" width="100%">
																<s:Label 
																	fontSize="16"
																	width="100%"
																	text="{data.title}"/>
															</s:HGroup>
															<s:HGroup visible="{data.comment.length>0}" includeInLayout="{data.comment.length>0}" width="100%" paddingLeft="5" paddingRight="5">
																<mx:Text width="90%" text="{data.comment}" toolTip="{data.comment}"/>
															</s:HGroup>
													</s:VGroup>
													<s:HGroup width="100%" gap="1" fontSize="10" verticalAlign="middle">
														<mx:Spacer width="100%"/>
														<mx:Image id="imageTypeSegment"/>
														<s:HGroup id="idDuree" gap="0">
															<s:Label>
																<s:text>Durée 0:</s:text>
															</s:Label>
															<s:Label id="labelDuration">
															</s:Label>
														</s:HGroup>
														<s:Label id="pasAudio">
															<s:text>Pas d'audio</s:text>
														</s:Label>
														
														<mx:Image id="playImage" height="12" width="12" source="{IconEnum.getIconByName('iconPlay_16x16')}">
															<mx:toolTip>Play audio</mx:toolTip>
															<mx:buttonMode>true</mx:buttonMode>
														</mx:Image>
														
														<s:HGroup id="playLabel" gap="1" verticalAlign="middle">
															<s:Label>
																<s:text>0:07/0:55</s:text>
															</s:Label>
															<mx:Image source="{IconEnum.getIconByName('iconPause_16x16')}" height="12" width="12">
																<mx:toolTip>Pause audio</mx:toolTip>
																<mx:buttonMode>true</mx:buttonMode>
															</mx:Image>
														</s:HGroup>
														<mx:Spacer width="2"/>
													</s:HGroup>
												</s:VGroup>
											</s:ItemRenderer>
										</fx:Component>
									</s:itemRenderer>-->
								</s:List>
						</s:VGroup>
						<s:VGroup 
							width="50%"
							height="100%"
							paddingTop="5"
							paddingBottom="5" paddingRight="5" paddingLeft="5" horizontalAlign="center" verticalAlign="middle"> 
							<ithaca:BilanSummary
								width="100%"
								bilan="{bilan}"
								horizontalAlign="left" 
								includeIn="plusInfo"/>
							<video:VisuVisioAdvanced id="visio" width="100%" height="100%"
										quality="80"
										bandwidth="15000" autoPlay="false" creationComplete="initVisio(event)"/>
							<mx:Spacer height="5"/>
							<s:HGroup width="100%" horizontalAlign="center">
								<s:Button id="buttonPlay" click="buttonPlay_clickHandler(event)" enabled="false">
									<s:label>Pause</s:label>
								</s:Button>
								<s:Button id="buttonMute" click="buttonMute_clickHandler(event)">
									<s:label>Couper le son</s:label>
								</s:Button>
							</s:HGroup>
							<mx:Spacer height="5"/>
						</s:VGroup>
				</s:HGroup>
	</s:VGroup>
</s:Group>
