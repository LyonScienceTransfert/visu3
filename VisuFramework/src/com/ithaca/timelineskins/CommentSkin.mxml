<?xml version="1.0" encoding="utf-8"?>
<!--

Copyright UniversitÃ© Lyon 1 / UniversitÃ© Lyon 2 (2009-2012)

<ithaca@liris.cnrs.fr>

This file is part of Visu.

This software is a computer program whose purpose is to provide an
enriched videoconference application.

Visu is a free software subjected to a double license.
You can redistribute it and/or modify since you respect the terms of either 
(at least one of the both license) :
- the GNU Lesser General Public License as published by the Free Software Foundation; 
  either version 3 of the License, or any later version. 
- the CeCILL-C as published by CeCILL; either version 2 of the License, or any later version.

 - GNU LGPL license

Visu is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

Visu is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with Visu.  If not, see <http://www.gnu.org/licenses/>.

 - CeCILL-C license

This software is governed by the CeCILL-C license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-C
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-C license and that you accept its terms.

 - End of licenses

-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				width="100" height="100%"
				creationComplete="creationCompleteHandler(event)" 				 
				click="onSelect(event)"
				doubleClick.editable="EditComment(event)">
	
	<fx:Declarations>
		
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Metadata>[HostComponent("com.ithaca.timeline.ObselSkin")]</fx:Metadata>
		
		<fx:Script>
        <![CDATA[
			import com.ithaca.timeline.CursorIcons;
			import com.ithaca.timeline.ObselSkin;
			import com.ithaca.timelineskins.Stylesheet;
			import com.ithaca.timeline.TimeRange;
			import com.ithaca.timeline.TraceLine;
			import com.ithaca.timeline.events.TimelineEvent;
			import com.ithaca.traces.Obsel;
			import com.ithaca.traces.model.TraceModel;
			import com.ithaca.traces.events.ObselEvent;
			
			import flash.events.MouseEvent;
			
			import gnu.as3.gettext.FxGettext;
			import gnu.as3.gettext._FxGettext;
			
			import mx.core.UIComponent;
			import mx.events.PropertyChangeEvent;
			import mx.events.PropertyChangeEventKind;
			import mx.formatters.NumberBaseRoundType;
			import mx.managers.PopUpManager;
			
			import spark.components.BorderContainer;
			import spark.components.Group;

			[Bindable]
			private 	var fxgt : _FxGettext;
			
			[Bindable]
			private 	var gripRadius : Number = 8;
			[Bindable]
			private 	var gripColor : Number = 0;
			
			protected 	var currentCenterDragingPoint:Point;			
			private 	var draggedPart : UIComponent = null;
			public		var minX  :Number;
			public		var maxX  : Number;
			public      var obsel : Obsel;
		
            protected function creationCompleteHandler(event:Event):void
            {
                fxgt = FxGettext;
                obsel = hostComponent.obsel;
                y = hostComponent.traceline.getStyle('rendererHeight') - cursor.height - 2;
                var text:String = obsel.props[TraceModel.TEXT];
                if(text == null)
                {
                    text = fxgt.gettext("Ajouter un commentaire");
                }
                commentLabel.text = toolTip = text;
                if(text == "")
                {
                    toolTip = fxgt.gettext("Le commentaire est vide");
                }
                
                UpdateResizeGripHeight();
                
                hostComponent.traceline._timeline.zoomContext.cursorRange.addEventListener(TimelineEvent.TIMERANGES_CHANGE, updateWidth);
                
                updateWidth( null );
                
                obsel.addEventListener( PropertyChangeEvent.PROPERTY_CHANGE, onObselChange);
                //	if ( hostComponent.editable )				
                {
                    currentState = 'editable';				
                }
                // set dragArea, drag only by image the comment
                hostComponent.dragArea = icon;
                if ( hostComponent.getStyle( "tooltipProp" )  )
                    hostComponent.toolTip =  obsel.props[ hostComponent.getStyle( "tooltipProp" ) ]; 
            }

			public function updateWidth( event : Event ) :  void
			{
				var traceline 		: TraceLine = hostComponent.traceline;
				var timeRange		: TimeRange = traceline._timeline.zoomContext.cursorRange;				
				var startPosition 	: Number 	= timeRange.timeToPosition( Math.max( hostComponent.obsel.begin , timeRange.begin ),	traceline.width - 2 * Stylesheet.renderersSidePadding);
				var endPosition 	: Number 	= timeRange.timeToPosition( Math.min( hostComponent.obsel.end , timeRange.end), 	traceline.width - 2 * Stylesheet.renderersSidePadding);
				
				width  	= (endPosition - startPosition);
			}
			
			protected function zcStartDrag(e:MouseEvent):void
			{
				onSelect(null);
							
				if ( e.currentTarget == icon )
					draggedPart = cursor;
				else
					draggedPart = (e.currentTarget as UIComponent);
				stage.addEventListener( MouseEvent.MOUSE_MOVE, 	zcDragging);
				stage.addEventListener( MouseEvent.MOUSE_UP,	zcStopDrag);				
				
				currentCenterDragingPoint = new Point(e.localX, e.localY);
			}
			
			protected function zcDragging(e:MouseEvent):void
			{				
				minX = (hostComponent.parent as Group).horizontalScrollPosition;
				maxX = (hostComponent.parent as Group).horizontalScrollPosition + (hostComponent.traceline.width - 2 * Stylesheet.renderersSidePadding );				
				
				var parentMouse:Point = hostComponent.parent.globalToLocal(new Point(e.stageX, e.stageY));				
				var newPos : Number   = parentMouse.x - currentCenterDragingPoint.x;
				
				if (draggedPart == leftGrip )
				{					
					var oldPos : Number = hostComponent.x;						
					if ( newPos < minX  )						
						hostComponent.x = minX ;						
					else if ( newPos + leftGrip.width > hostComponent.x + rightGrip.x - 1 )
						hostComponent.x =  hostComponent.x + rightGrip.x - 1;
					else
						hostComponent.x = newPos + leftGrip.width;
					width 	-= hostComponent.x - oldPos ;	
				}
				else if (draggedPart == cursor )
				{
					if ( newPos < minX)						
						hostComponent.x  = minX;						
					else if ( newPos > maxX - width )
						hostComponent.x = maxX - width;
					else
						hostComponent.x = newPos;						
				} 
				else if (draggedPart == rightGrip )
				{
					if ( newPos < hostComponent.x + 1 )
						rightGrip.x =  1;
					else if (newPos > maxX )
						rightGrip.x = maxX - hostComponent.x;
					else
						rightGrip.x = newPos - hostComponent.x;
					
					width = rightGrip.x;				
				}
				UpdateResizeGripHeight();		
			}
			
			protected function UpdateResizeGripHeight(): void
			{
				var commentsGroup:Group = (hostComponent.parent as Group);
				for ( var i:int = 0; i < commentsGroup.numChildren; i ++ )
				{
					var currentComment:ObselSkin = (commentsGroup.getElementAt(i) as ObselSkin );
					var nbCommentsOver:int = GetNbCommentsOver ( currentComment.x, currentComment.width, i );
					currentComment.rightGrip.y = currentComment.leftGrip.y = cursor.y - 8 - 4 * nbCommentsOver;
					currentComment.rightGrip.height = currentComment.leftGrip.height = (cursor.y +cursor.height) - currentComment.leftGrip.y;
				}
			}
			
			protected function GetNbCommentsOver( x:int, width:int, beginIndex:int ) : int
			{
				var nbCommentsOver:int = 0;
				var commentsGroup:Group = (hostComponent.parent as Group);
				for ( var i:int = beginIndex + 1; i < commentsGroup.numChildren; i ++ )
				{
					if ( ((commentsGroup.getElementAt(i) as ObselSkin ).x <= x + width ) && ((commentsGroup.getElementAt(i) as ObselSkin ).x + (commentsGroup.getElementAt(i) as ObselSkin ).width >= x ))
						nbCommentsOver ++;
				}
				return nbCommentsOver;
			}
			
			protected function zcStopDrag(e:MouseEvent):void
			{
				draggedPart = null;
				
				stage.removeEventListener(MouseEvent.MOUSE_MOVE,zcDragging);
				stage.removeEventListener(MouseEvent.MOUSE_UP, zcStopDrag);
				
				var begin 	: Number = hostComponent.traceline._timeline.zoomContext.cursorRange.positionToTime( hostComponent.x, (hostComponent.traceline.width - 2 * Stylesheet.renderersSidePadding ) );
				var end 	: Number = hostComponent.traceline._timeline.zoomContext.cursorRange.positionToTime( hostComponent.x + cursor.width, (hostComponent.traceline.width - 2 * Stylesheet.renderersSidePadding ) );
				
				obsel.end    = end;
				obsel.begin  = begin ;
				UpdateResizeGripHeight();
				// dispatchEvent
				onDispatcheEvent(ObselEvent.UPDATE_DURATION_OBSEL_COMMENT);
			}	
			
			protected function EditComment( e:MouseEvent ):void
			{
				var editCommentEvent:ObselEvent = new ObselEvent(ObselEvent.PRE_EDIT_OBSEL_COMMENT_BY_SKIN_COMMENT);
				editCommentEvent.obsel = obsel;
				dispatchEvent(editCommentEvent);
			}
			
			private function onSelect(event:Event):void
			{
				(hostComponent.parent as Group).addElementAt( hostComponent, (hostComponent.parent as Group).numElements -1);
				UpdateResizeGripHeight();
			}
			
            protected function onObselChange( event : PropertyChangeEvent ) : void
            {				
                var y : Number 	= hostComponent.traceline._timeline.zoomContext.cursorRange.timeToPosition( hostComponent.obsel.end , (hostComponent.traceline.width - 2 * Stylesheet.renderersSidePadding ) );				
                hostComponent.x = hostComponent.traceline._timeline.zoomContext.cursorRange.timeToPosition( hostComponent.obsel.begin, (hostComponent.traceline.width - 2 * Stylesheet.renderersSidePadding ) );
                rightGrip.x     = width 	= y - hostComponent.x ;
                			
                commentLabel.text = toolTip = hostComponent.obsel.props[TraceModel.TEXT];
                if(commentLabel.text == "")
                {
                    toolTip = fxgt.gettext("Le commentaire est vide");
                }
            }
			//////////////////
			// Utils
			/////////////////
			private function onDispatcheEvent(typeEvent:String):void
			{
				var updateObselComment:ObselEvent = new ObselEvent(typeEvent);
				updateObselComment.obsel = obsel;
				this.dispatchEvent(updateObselComment);
			}
        ]]>
    </fx:Script>
	
	<s:states>
		<s:State name="normal" />		
		<s:State name="editable" />
	</s:states>

	<s:Group id="leftGrip"	x="{-(gripRadius/2+2)}" y="{-8}"  mouseDown.editable="zcStartDrag(event);" mouseOver.editable="CursorIcons.SetResizeCursor(event)" mouseOut.editable="CursorIcons.SetDefaultCursor(event)">
		<s:Rect  height="{gripRadius}" width="{gripRadius}" radiusX="{gripRadius}" radiusY="{gripRadius}" x="1">  
			<s:stroke> <s:SolidColorStroke color="{gripColor}" weight="2"/> </s:stroke>
		    <s:fill > <s:SolidColor alpha=".1" color="{gripColor}" /> </s:fill>
         </s:Rect>
		 <s:Rect height="100%" width="2" y="{gripRadius}" x="{gripRadius/2}" >  
          <s:fill> <s:SolidColor color="{gripColor}" /> </s:fill>
         </s:Rect>
	</s:Group>
	
	<s:Group id="rightGrip"	x="{width}" y="{-8}" mouseDown.editable="zcStartDrag(event);" mouseOver.editable="CursorIcons.SetResizeCursor(event)" mouseOut.editable="CursorIcons.SetDefaultCursor(event)">
		<s:Rect  height="{gripRadius}" width="{gripRadius}" radiusX="{gripRadius}" radiusY="{gripRadius}" x="-2">  
			<s:stroke> <s:SolidColorStroke color="{gripColor}" weight="2"/> </s:stroke>
		    <s:fill > <s:SolidColor alpha=".1" color="{gripColor}" /> </s:fill>
         </s:Rect>
		 <s:Rect height="100%" width="2" y="{gripRadius}" >  
			<s:fill><s:SolidColor color="{gripColor}" /> </s:fill>
         </s:Rect>
	</s:Group>
			
	<s:BorderContainer id="cursor" borderWeight="1"   backgroundColor="#FEFDD6" minWidth="1" minHeight="1" width="100%" >
		<!-- removed listener for drag-drop comment inside the TL Comment, use drag-drop only for the "Bilan"-->
		<!-- mouseDown.editable="zcStartDrag(event);" -->
		<mx:Image id="icon" source="{getStyle('icon')}" height="100%" top="2" left="2" mouseOver.editable="CursorIcons.SetHandCursor(event)" mouseOut.editable="CursorIcons.SetDefaultCursor(event)"/>
		<s:Label id="commentLabel" width="100%" height="10" fontSize="10" x="{icon.width+5}"  y="3"  mouseOver.editable="CursorIcons.SetIBeamCursor(event)" mouseOut.editable="CursorIcons.SetDefaultCursor(event)"    />
	</s:BorderContainer>
			
</s:Skin>
