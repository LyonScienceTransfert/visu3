<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:skins="com.ithaca.timeline.skins.*"
				 creationComplete="creationCompleteHandler(event)"
				 doubleClick.editable="EditComment(event)"
     width="25" height="25">
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
	</fx:Declarations>
	
	<fx:Metadata>[HostComponent("com.ithaca.timeline.ObselSkin")]</fx:Metadata>
	
	<fx:Script>
        <![CDATA[ 
            import com.ithaca.traces.Obsel;
            import com.ithaca.traces.events.ObselEvent;
            import com.ithaca.traces.model.TraceModel;
            import com.ithaca.visu.model.Model;
            import com.ithaca.visu.ui.utils.IconEnum;
            
            import gnu.as3.gettext.FxGettext;
            import gnu.as3.gettext._FxGettext;
            
            import mx.events.PropertyChangeEvent;
            import mx.events.ToolTipEvent;
			[Bindable]
			private var fxgt: _FxGettext = FxGettext;	
			
			public var obsel : Obsel;
		
            private var toolTipText:String = "";
            
			protected function creationCompleteHandler(event:Event):void
			{
				fxgt = FxGettext;
				obsel = hostComponent.obsel;
				obsel.addEventListener( PropertyChangeEvent.PROPERTY_CHANGE, onObselChange);
				icon.addEventListener(ToolTipEvent.TOOL_TIP_SHOW, onToolTipShow);
				if ( hostComponent.getStyle( "tooltipProp" )  )
                {
                    toolTipText = obsel.props[ hostComponent.getStyle( "tooltipProp" ) ];
                    if(obsel.props[ hostComponent.getStyle( "tooltipProp" ) ] == "")
                    {
                        toolTipText = "le marqueur est vide"; 
                    }
                       
                    hostComponent.toolTip =  toolTipText;
                }
				if ( Model.getInstance().canEditObsel(obsel))
				{
					currentState = 'editable';				
				}
				// set drag area
				hostComponent.dragArea = this;
                // get color
                var color:String = "";
                var typeShortMarker:String = obsel.props[TraceModel.TYPE_SHORT_MARKER];
                switch (typeShortMarker)
                {
                    case  "comp" :
                        color = "#DB6E6E";
                        break;
                    case  "pron" :
                        color = "#DFE549";
                        break;
                    case  "sens" :
                        color = "#92DD56";
                        break;
                    case  "inte" :
                        color = "#55B3DE";
                        break;
                    case  "posi" :
                        color = "#92DD56";
                        break;
                    case  "nega" :
                        color = "#DB6E6E";
                        break;
                    default :
                        color = "#000000";
                        break;
                }
               // set color
               coloriage.setStyle("backgroundColor", color);
			}
			
			protected function EditComment( e:MouseEvent ):void
			{
				var editCommentEvent:ObselEvent = new ObselEvent(ObselEvent.PRE_EDIT_OBSEL_MARKER_BY_SKIN_MARKER);
				editCommentEvent.obsel = obsel;
				dispatchEvent(editCommentEvent);
			}
			
			protected function onObselChange( event : PropertyChangeEvent ) : void
			{
				if ( hostComponent.getStyle( "tooltipProp" ) )
                {
                    toolTipText = obsel.props[ hostComponent.getStyle( "tooltipProp" ) ];
                    if(obsel.props[ hostComponent.getStyle( "tooltipProp" ) ] == "")
                    {
                        toolTipText = "le marqueur est vide"; 
                    }
                }
					icon.toolTip =  toolTipText;
			}
			
			protected function onToolTipShow( event : ToolTipEvent ) : void
			{	
                toolTipText = obsel.props[ hostComponent.getStyle( "tooltipProp" ) ];
                if(obsel.props[ hostComponent.getStyle( "tooltipProp" ) ] == "")
                {
                    toolTipText = "le marqueur est vide"; 
                }
				event.toolTip.text 	=  toolTipText;		
			}
		]]>        
    </fx:Script>
	
	<s:states>
		<s:State name="normal" />		
		<s:State name="editable" />
	</s:states>
    <mx:Image source="{IconEnum.getIconByName('marqueurFondBlanc')}" x="0" y="0" width="100%" height="100%" scaleContent="true"/>
    <mx:Canvas id="coloriage" x="0" y="0" mask="{icon}" width="100%" height="100%" cacheAsBitmap="true"/>
    <mx:Image id="icon" source="{IconEnum.getIconByName('marqueurBlancTrans')}" x="0" y="0" width="100%" height="100%" scaleContent="true" cacheAsBitmap="true"/>
</s:Skin>
