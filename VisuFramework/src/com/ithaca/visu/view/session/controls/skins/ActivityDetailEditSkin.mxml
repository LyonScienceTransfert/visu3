<?xml version="1.0" encoding="utf-8"?>
<!--

Copyright UniversitÃ© Lyon 1 / UniversitÃ© Lyon 2 (2009-2012)

<ithaca@liris.cnrs.fr>

This file is part of Visu.

This software is a computer program whose purpose is to provide an
enriched videoconference application.

Visu is a free software subjected to a double license.
You can redistribute it and/or modify since you respect the terms of either 
(at least one of the both license) :
- the GNU Lesser General Public License as published by the Free Software Foundation; 
  either version 3 of the License, or any later version. 
- the CeCILL-C as published by CeCILL; either version 2 of the License, or any later version.

 - GNU LGPL license

Visu is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

Visu is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with Visu.  If not, see <http://www.gnu.org/licenses/>.

 - CeCILL-C license

This software is governed by the CeCILL-C license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-C
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-C license and that you accept its terms.

 - End of licenses

-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	creationComplete="skin1_creationCompleteHandler(event)"
	xmlns:layout="sparks.layout.*"
	xmlns:layout1="com.lyon2.controls.sparks.layout.*">
	<fx:Script>
	<![CDATA[
		import com.ithaca.utils.URLValidator;
		import com.ithaca.utils.UtilFunction;
		import com.ithaca.visu.model.ActivityElementType;
		import com.ithaca.visu.ui.utils.IconEnum;
		
		import gnu.as3.gettext.FxGettext;
		import gnu.as3.gettext._FxGettext;
		
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import mx.events.FlexEvent;
		
		import spark.events.TextOperationEvent;
		[Bindable]
		private var fxgt: _FxGettext = FxGettext;
        
        private var NEW_STATEMENT_STRING: String;
        private var NEW_DOCUMENT_TITLE_STRING: String;
        private var NEW_KEYWORD_STRING: String;
        private var NEW_LINK_STRING: String;

		[Bindable]
		private var LIFT_EDITABLED_COMPONENT:int = 75;
		protected function skin1_creationCompleteHandler(event:FlexEvent):void
		{
            // initialisation gettext
            fxgt = FxGettext;
            NEW_STATEMENT_STRING = fxgt.gettext("Ajoutez une nouvelle consigne ici");
            NEW_DOCUMENT_TITLE_STRING = fxgt.gettext("Entrez un nouveau titre de document ici");
            NEW_LINK_STRING = fxgt.gettext("Ajoutez un nouveau lien ici");
            NEW_KEYWORD_STRING = fxgt.gettext("Ajoutez un nouveau mot-clé ici");
		}
		protected function group1_clickHandler(event:MouseEvent): void
		{
			if(event.target is Group)
			{
				this.hostComponent.titleDisplay_clickHandler(event);
			}
		}
		// STATEMENT
		protected function addStatement_focusInHandler(event:FocusEvent):void
		{
			if (addStatement.text == NEW_STATEMENT_STRING) {
				addStatement.text = "";
				addStatement.setStyle("fontStyle","normal");
				addStatement.setStyle("color","#000000");
			}
		}
		
		protected function addStatement_focusOutHandler(event:FocusEvent):void
		{
			if(addStatement.text == ""){
				this.setMessageStatement();
			}
		}
		protected function addStatement_keyUpHandler(event:KeyboardEvent):void
		{
			if(event.keyCode == Keyboard.ENTER && addStatement.text != "")
			{
				this.validStatementButton_clickHandler(event);
			}
		}
		protected function validStatementButton_clickHandler(event:*):void
		{
			// add statement
			if(addStatement.text != NEW_STATEMENT_STRING && addStatement.text != "")
			{
				this.hostComponent.addStatement(addStatement.text);
				addStatement.text = "";
				stage.focus = addStatement;
			}
		}
		
		private function setMessageStatement():void
		{
			addStatement.text = NEW_STATEMENT_STRING;
			addStatement.setStyle("fontStyle", "italic");
			addStatement.setStyle("color", "#BBBBBB");
		}
		// MEMO
		protected function memoDisplay_focusInHandler(event:FocusEvent):void
		{
			if(memoDisplay.text == fxgt.gettext("Entrez un nouveau mémo ici"))
			{
				memoDisplay.text = "";
				memoDisplay.setStyle("fontStyle","normal");
				memoDisplay.setStyle("color","#000000");
			}
		}
		
		protected function memoDisplay_focusOutHandler(event:FocusEvent):void
		{
			if(memoDisplay.text == ""){
				this.hostComponent.setMessageMemo();
			}else
			{
				// add memo
				this.hostComponent.updateMemo(memoDisplay.text);
			}
		}
		// DOCUMENT
		protected function addTitreDocument_focusOutHandler(event:FocusEvent):void
		{
			if(addTitreDocument.text == ""){
				this.setMessageTitreDocument();
			}
		}
		protected function addTitreDocument_focusInHandler(event:FocusEvent):void
		{
			if (addTitreDocument.text == NEW_DOCUMENT_TITLE_STRING) {
				addTitreDocument.text = "";
				addTitreDocument.setStyle("fontStyle","normal");
				addTitreDocument.setStyle("color","#000000");
			}
		}
		
		protected function addLienDocument_focusInHandler(event:FocusEvent):void
		{
			if (addLienDocument.text == NEW_LINK_STRING) {
				addLienDocument.text = "";
				addLienDocument.setStyle("fontStyle","normal");
				addLienDocument.setStyle("color","#000000");
			}
		}
		
		protected function addLienDocument_focusOutHandler(event:FocusEvent):void
		{
			if(addLienDocument.text == ""){
				this.setMessageLienDocument();
			}
		}
		
		protected function validButtonDocument_clickHandler(event:MouseEvent):void
		{
			var type:String="";
			var titre:String = addTitreDocument.text;
			if(URLValidator.isUrl(addLienDocument.text))
			{
				// check if lient is video the toytube
				if(UtilFunction.checkVideoId(addLienDocument.text))
				{
					type = ActivityElementType.VIDEO;
				}else
				{
					type = ActivityElementType.IMAGE;
				}
				if(titre == NEW_DOCUMENT_TITLE_STRING)
				{
					titre = "...document...";
				}
				this.hostComponent.addDocument(titre, addLienDocument.text, type);
				addLienDocument.text = "";
				stage.focus = addLienDocument;
			}else
			{
				// set text to addLienDocument
				addLienDocument.text = NEW_LINK_STRING;
				stage.focus = addLienDocument;
			}
		}
		
		private function setMessageTitreDocument():void
		{
			addTitreDocument.text = NEW_DOCUMENT_TITLE_STRING;
			addTitreDocument.setStyle("fontStyle","italic");
			addTitreDocument.setStyle("color","#BBBBBB");
		}
		private function setMessageLienDocument():void
		{
			addLienDocument.text = NEW_LINK_STRING;
			addLienDocument.setStyle("fontStyle","italic");
			addLienDocument.setStyle("color","#BBBBBB");
		}
		// KEYWORD
		protected function addKeyword_focusInHandler(event:FocusEvent):void
		{
			if (addKeyword.text == NEW_KEYWORD_STRING) {
				addKeyword.text = "";
				addKeyword.setStyle("fontStyle","normal");
				addKeyword.setStyle("color","#000000");
			}
		}
		protected function addKeyword_focusOutHandler(event:FocusEvent):void
		{
			if(addKeyword.text == ""){
				this.setMessageKeyword();
			}
		}
		protected function addKeyword_keyUpHandler(event:KeyboardEvent):void
		{
			if(event.keyCode == Keyboard.ENTER && addKeyword.text != "")
			{
				// add statement
				validKeywordButton_clickHandler();
			}
		}
		
		private function validKeywordButton_clickHandler(event:MouseEvent=null):void
		{
			if(addKeyword.text != NEW_KEYWORD_STRING && addKeyword.text != "")
			{
				this.hostComponent.addKeyword(addKeyword.text);
				addKeyword.text = "";
				stage.focus = addKeyword;
			}	
		}
		private function setMessageKeyword():void
		{
			addKeyword.text = NEW_KEYWORD_STRING;
			addKeyword.setStyle("fontStyle","italic");
			addKeyword.setStyle("color","#BBBBBB");
		}
		// TITRE ACTIVITY
		protected function titleActivity_focusOutHandler(event:FocusEvent):void
		{
			this.hostComponent.addTitreActivity(titleActivity.text);
		}
		// DELETE ACTIVITY
		protected function buttonDeleteActivity_clickHandler(event:MouseEvent):void
		{
			Alert.yesLabel = fxgt.gettext("Oui");
			Alert.noLabel = fxgt.gettext("Non");
			Alert.show(fxgt.gettext("Voulez-vous supprimer l'activité ?"),
				       fxgt.gettext("Confirmation"), Alert.YES|Alert.NO, null, deleteActivityConfirmed);
		}
		private function deleteActivityConfirmed(event:CloseEvent):void{
			if( event.detail == Alert.YES)
			{
				this.hostComponent.deleteActivity();
			}
		}
		
		protected function durationActivity_changeHandler(event:Event):void
		{
			var numericStepper:NumericStepper = event.target as NumericStepper;
			this.hostComponent.changeDuration(numericStepper.value);
		}
		
		
		protected function titleActivity_changeHandler(event:TextOperationEvent):void
		{
			this.hostComponent.addTitreActivity(titleActivity.text);
			
		}
		protected function memoDisplay_changeHandler(event:TextOperationEvent):void
		{
			this.hostComponent.updateMemo(memoDisplay.text);
		}
		
	]]>
	</fx:Script>
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.ithaca.visu.view.session.controls.ActivityDetailEdit")]
	</fx:Metadata>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="open" />
		<s:State name="normalEditable"/>
		<s:State name="openEditable"/>
	</s:states>
	
	<s:Rect id="background" left="0" right="0" top="0" bottom="0">
		<s:fill>
			<!--- @private -->
			<s:SolidColor id="bgFill" color="#ffffff"/>
		</s:fill>
	</s:Rect>
	
	<s:Group width="100%" height="30" click="group1_clickHandler(event)">
		<!--<s:Rect top="0" left="0" bottom="0" right="0">
		<s:stroke>
		<s:LinearGradientStroke rotation="90">
		<s:GradientEntry color="#CCCCCC" />
		<s:GradientEntry color="#999999" />
		</s:LinearGradientStroke>
		</s:stroke>
		<s:fill>
		<s:LinearGradient rotation="90">
		<s:GradientEntry color="#EFEFEF" />
		<s:GradientEntry color="#CCCCCC" />
		</s:LinearGradient>
		</s:fill>
		</s:Rect>-->
		<s:Path data="M 0 0 L 7 5 L 0 10 L 0 0 Z"
			rotation.open="90"
			verticalCenter="0" left="3"
			rotation.openEditable="90">
			<s:postLayoutTransformOffsets>
				<s:TransformOffsets id="tOffsets" x.open="0" y.open="0" x.openEditable="0" y.openEditable="0"/>
			</s:postLayoutTransformOffsets>
			<s:fill>
				<s:SolidColor color="#333333"/>
			</s:fill>
			<s:filters>
				<s:DropShadowFilter angle="90" distance="1" blurX="2" blurY="2" alpha=".7" inner="true" />
				<s:DropShadowFilter angle="180" distance="1" blurX="1" blurY="1" color="#FFFFFF" />
			</s:filters>
		</s:Path>
		<s:HGroup width="100%" top="0" >
			<mx:Spacer width="25"/>
			<s:Label paddingTop="10">
            <s:text>{fxgt.gettext("Titre d'activité:")}</s:text>
			</s:Label>
			<!-- LABEL ACTIVITY-->
			<s:Label id="titleActivityLable" includeIn="normal,open" width="100%" text="AAAAAA" paddingTop="8" fontSize="14" fontWeight="bold" maxDisplayedLines="1"/>
			<s:TextInput id="titleActivity" color="#121212" width="100%"
				fontSize="14" fontWeight="bold" maxHeight="22" maxChars="80"
				focusOut="titleActivity_focusOutHandler(event)"
				change="titleActivity_changeHandler(event)"
				includeIn="normalEditable,openEditable" top.normalEditable="5" left.normalEditable="120" right.normalEditable="155" top.openEditable="5" left.openEditable="120" right.openEditable="155">
				<!--<s:filters>
				<mx:DropShadowFilter distance="1" angle="90" blurX="3" blurY="3" alpha=".5" />
				</s:filters>-->
			</s:TextInput>
			<!-- DELETE ACTIVITY -->
			<mx:Button id="buttonDeleteActivity" top="5"
				icon="{IconEnum.getIconByName('delete')}"
				click="buttonDeleteActivity_clickHandler(event)" includeIn="normalEditable,openEditable" width="30" top.normalEditable="5" right.normalEditable="120" top.openEditable="5" right.openEditable="120">
				<mx:toolTip>{fxgt.gettext("Supprimer l'activité")}</mx:toolTip>
			</mx:Button>
			<!-- MOVE UP/DOWN -->
			<s:HGroup paddingTop="5" includeIn="normalEditable,openEditable">
				<mx:Image id="buttonUp" source="{IconEnum.getIconByName('up')}" width="12" height="12"/>
				<mx:Image id="buttonDown" source="{IconEnum.getIconByName('down')}" width="12" height="12"/>
			</s:HGroup>
			<!-- DURATION -->
			<s:Label id="durationDisplay" paddingTop="10" text="{fxgt.gettext('Durée :')}" text.normal="{fxgt.gettext('Durée :')}" text.normalEditable="{fxgt.gettext('Durée :')}" text.open="{fxgt.gettext('Durée :')}" text.openEditable="{fxgt.gettext('Durée :')}"/>
			<s:Label includeIn="normal,open" text="10 " id="durationActivityLabel" width="18" paddingTop="10"/>
			<s:Label includeIn="normal,open" text="min." paddingTop="10"/>
			<s:NumericStepper id="durationActivity" width="44"
				maximum="200" value="10"
				change="durationActivity_changeHandler(event)" includeIn="normalEditable,openEditable" height.openEditable="22" top.openEditable="5" right.openEditable="2" height.normalEditable="22" top.normalEditable="5" right.normalEditable="2"/>
			<mx:Spacer width="3"/>
		</s:HGroup>
	</s:Group>
	
	<s:Group top="30" bottom="10" includeIn="open,openEditable" id="content" width.open="100%" top.open="30" bottom.open="10" left.openEditable="5" left.open="5" top.openEditable="30" bottom.openEditable="10" width.openEditable="100%">
		<s:layout>
			<s:VerticalLayout gap="10"/>
		</s:layout>
		<!-- STATEMENTS -->
		<s:Group width="100%">
			<s:Label paddingLeft="5" text="{fxgt.gettext('Consignes :')}"/>
			<s:Group id="statementGroup" left="{LIFT_EDITABLED_COMPONENT}" width.openEditable="100%" left.open="{LIFT_EDITABLED_COMPONENT}" right.open="0">
				<s:layout>
					<s:VerticalLayout />
				</s:layout>
			</s:Group>
		</s:Group>
		<!-- ADD STATEMENT -->
		<s:Group width="100%">
			<s:TextArea id="addStatement" maxHeight="25" right="15" fontStyle="italic" color="#BBBBBB"
				left="{LIFT_EDITABLED_COMPONENT+5}" verticalScrollPolicy="auto" textAlign="justify"
				focusIn="addStatement_focusInHandler(event)"
				keyUp="addStatement_keyUpHandler(event)"
				focusOut="addStatement_focusOutHandler(event)" includeIn="openEditable">
            <s:text>{NEW_STATEMENT_STRING}</s:text>
			</s:TextArea>
			<s:Button right="15" top="27" bottom="2" click="validStatementButton_clickHandler(event)" includeIn="openEditable">
				<s:label>Valider</s:label>
			</s:Button>
		</s:Group>
		<!-- DOCUMENTS -->
		<s:Group width="100%">
			<s:Label left="5" text="{fxgt.gettext('Documents :')}"/>
			<s:Group id="documentGroup" left="{LIFT_EDITABLED_COMPONENT}" width="100%">
				<s:layout>
					<s:TileLayout requestedColumnCount="2" horizontalGap="50"/>
				</s:layout>
			</s:Group>
		</s:Group>
		<!-- ADD DOCUMENT -->
		<s:VGroup width="100%" left="10">
			<s:HGroup width="100%">
				<mx:Spacer width="100%"/>
				<s:Label includeIn="openEditable" text="{fxgt.gettext('Titre du document :')}" paddingTop="5"/>
				<s:TextArea id="addTitreDocument" top="0" maxHeight="22" minWidth="290" textAlign="left"
					fontStyle="italic" color="#BBBBBB"
					focusOut="addTitreDocument_focusOutHandler(event)"
					focusIn="addTitreDocument_focusInHandler(event)" includeIn="openEditable">
                <s:text>{NEW_DOCUMENT_TITLE_STRING}</s:text>
				</s:TextArea>
				<mx:Spacer width="8"/>
			</s:HGroup>
			<s:HGroup width="100%" right="5">
				<mx:Spacer width="100%"/>
				<s:Label includeIn="openEditable" text="{fxgt.gettext('Url du document :')}" paddingTop="5"/>
				<s:TextArea id="addLienDocument" right="140" maxHeight="22" minWidth="220"
					fontStyle="italic" color="#BBBBBB"
					focusIn="addLienDocument_focusInHandler(event)"
					focusOut="addLienDocument_focusOutHandler(event)" includeIn="openEditable">
					<s:text>{NEW_LINK_STRING}</s:text>
				</s:TextArea>
				<s:Button id="validButtonDocument"
					click="validButtonDocument_clickHandler(event)" includeIn="openEditable">
                <s:label>{fxgt.gettext("Ajouter un document")}</s:label>
				</s:Button>
				<mx:Spacer width="8"/>
			</s:HGroup>
		</s:VGroup>
		<!-- KEYWORD -->
		<s:Group width="100%" height="100" height.openEditable="130" right="5">
			<s:Label left="5" text="{fxgt.gettext('Mots-clés :')}"/>
			<s:Scroller top="8" left="{LIFT_EDITABLED_COMPONENT}" bottom="0" right="2" bottom.openEditable="60">
				<s:Group id="keywordGroup" left="0" width="100%" top="0" height="100%">
					<s:layout>
						<layout1:FlowLayout/>
					</s:layout>
				</s:Group>
			</s:Scroller>
			<!-- ADD KEYWORD -->
			<s:TextInput id="addKeyword" height="22" right="15" left="{LIFT_EDITABLED_COMPONENT}" bottom="27"
				fontStyle="italic" color="#BBBBBB"
				focusIn="addKeyword_focusInHandler(event)"
				focusOut="addKeyword_focusOutHandler(event)"
				keyUp="addKeyword_keyUpHandler(event)" includeIn="openEditable">
	        <s:text>{NEW_KEYWORD_STRING}</s:text>
			</s:TextInput>
			<s:Button right="15" bottom="2" click="validKeywordButton_clickHandler(event)" includeIn="openEditable">
                <s:label>{fxgt.gettext('Valider')}</s:label>
			</s:Button>
		</s:Group>
		<!-- MEMO -->
		<s:Group width="100%">
			<s:Label left="5" text="{fxgt.gettext('Mémo :')}"/>
			<s:Group width="100%" left="{LIFT_EDITABLED_COMPONENT}">
				<s:Rect id="fill" radiusX="5"
					left="2" right="2" top="1" bottom="1" minHeight="25">
					<s:fill>
						<s:LinearGradient rotation="90">
							<s:GradientEntry color="0xFFFFFF" />
							<s:GradientEntry color="0xD8D8D8" />
						</s:LinearGradient>
					</s:fill>
				</s:Rect>
				<s:Rect id="border" radiusX="5"
					left="2" right="2" top="0" bottom="0">
					<s:stroke>
						<s:LinearGradientStroke rotation="90" weight="1">
							<s:GradientEntry color="0x000000"
								alpha="0.5625"/>
							<s:GradientEntry color="0x000000"
								alpha="0.75" />
						</s:LinearGradientStroke>
					</s:stroke>
				</s:Rect>
				<s:RichEditableText
					id="memoDisplay"
					top="8" bottom="7" maxHeight="40"
					focusIn="memoDisplay_focusInHandler(event)"
					focusOut="memoDisplay_focusOutHandler(event)"
					change="memoDisplay_changeHandler(event)" left="10" right="10" enabled.open="false">
				</s:RichEditableText>
			</s:Group>
		</s:Group>
	</s:Group>
	<s:transitions>
		<s:Transition fromState="normal" toState="open">
			<s:Sequence>
				<s:Fade alphaTo="1" target="{content}" />
			</s:Sequence>
		</s:Transition>
	</s:transitions>
</s:Skin>
