<?xml version="1.0" encoding="utf-8"?>
<modules:VisuModuleBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx" 
						xmlns:modules="com.ithaca.visu.modules.*" 
						xmlns:maps="maps.*"
						xmlns:mate="http://mate.asfusion.com/"
						xmlns:controls="com.ithaca.visu.controls.*"
						configure="configureHandler(event)"
						creationComplete="creationCompleteHandler(event)"
						top="15" bottom="5" left="5" right="5" 
						 height="100%">
	<fx:Declarations>

		<maps:HomeMap id="homeMap" dispatcher="{this}"/>
		<mate:Listener type="{SessionEvent.UPDATE_LIST_SESSION}"  method="updateSessionView"/>
		<mate:Listener type="{SessionEvent.UPDATE_LIST_USER}"  method="updateView"/>
		<mate:Listener type="{ApplicationMenuEvent.UPDATE_LANGUAGE}"  method="updateLanguageNavigateurDay"/>
		<mate:Listener type="{SessionEvent.SHOW_LIST_DATE_SESSION}"  method="showDateSession"/>
		<mate:Listener type="{SessionEvent.SHOW_LIST_SESSION}"  method="showSession"/>
		<mate:Listener type="{SessionEvent.LOAD_LIST_USERS_PLATEFORME}"  method="onLoadedAllUsers"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.ithaca.visu.controls.SessionHomeElement;
			import com.ithaca.visu.controls.globalNavigation.event.ApplicationMenuEvent;
			import com.ithaca.visu.events.InitMapEvent;
			import com.ithaca.visu.events.MessageEvent;
			import com.ithaca.visu.events.SessionEvent;
			import com.ithaca.visu.events.SessionHomeElementEvent;
			import com.ithaca.visu.events.SessionUserEvent;
			import com.ithaca.visu.events.UserEvent;
			import com.ithaca.visu.events.VisuModuleEvent;
			import com.ithaca.visu.model.Model;
			import com.ithaca.visu.model.Session;
			import com.ithaca.visu.model.User;
			import com.ithaca.visu.model.vo.SessionUserVO;
			import com.ithaca.visu.model.vo.UserVO;
			import com.ithaca.visu.renderer.FluxActivityRenderer;
			import com.ithaca.visu.ui.utils.ConnectionStatus;
			import com.ithaca.visu.ui.utils.RightStatus;
			import com.ithaca.visu.view.user.MessageUser;
			
			import gnu.as3.gettext.FxGettext;
			import gnu.as3.gettext._FxGettext;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var fxgt:_FxGettext;
			
			[Bindable]
			public var listSessionView:ArrayCollection;
			

			[Bindable]
			public var listDateForNavigateurDay:ArrayCollection;
			
			[Bindable]
			public var fluxActivity : ArrayCollection;
			
			private var _editableSession:Boolean;
			private var _loggedUser:User;

			protected function configureHandler(event:VisuModuleEvent):void
			{				
				// init map of this  module
				var initMapEvent:InitMapEvent = new InitMapEvent(InitMapEvent.INIT_MAP_HOME);
				this.dispatchEvent(initMapEvent);
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				fxgt = FxGettext;
				
				// check if this is first enter in HomeModule
				var homeModule:VisuModuleBase = Model.getInstance().getCurrentHomeModule();
				if(homeModule == null)
				{
					// add mesage Welcome
					var namePlateforme:String = Model.getInstance().getNamePlateforme();
					var user:User = Model.getInstance().getLoggedUser();
					Model.getInstance().addFluxActivity(user.id_user,user.firstname,user.avatar,fxgt.gettext("Bienvenue sur le ")+namePlateforme+"...",new Date());		
					// add flux activity
					Model.getInstance().addFluxActivity(user.id_user,user.firstname,user.avatar,fxgt.gettext(" a rejoint le ")+namePlateforme+".",new Date());
					var listConnectedUser:ArrayCollection = Model.getInstance().getConnectedUserExcludeLoggedUser();
					var strConnectedUser:String = ""
					var nbrUser:int = listConnectedUser.length;
					for(var nUser:int = 0 ; nUser < nbrUser; nUser++)
					{
						var virgulePoint:String=', ';
						var userConnected:User = listConnectedUser.getItemAt(nUser) as User;
						if(nUser == nbrUser-1)
						{
							virgulePoint = '.'	
						}
						strConnectedUser += userConnected.firstname+virgulePoint;
					}
					if(strConnectedUser != "")
					{
						var namePlateforme:String = Model.getInstance().getNamePlateforme();
						// add message about connected users
						Model.getInstance().addFluxActivity(user.id_user,user.firstname,user.avatar,fxgt.gettext(" Actuallement sur le ")+namePlateforme+" : "+strConnectedUser,new Date());
					}
				}
				
				Model.getInstance().setCurrentHomeModule(this);
				
				_loggedUser = Model.getInstance().getLoggedUser();				
				// check status logged user
				var statusLoggedUser:int =_loggedUser.status; 
				if(statusLoggedUser == ConnectionStatus.CONNECTED)
				{
					Model.getInstance().updateStatusLoggedUser(ConnectionStatus.PENDING);
					var outSession:SessionEvent = new SessionEvent(SessionEvent.OUT_SESSION);
					outSession.userId = _loggedUser.id_user;
					this.dispatchEvent(outSession);
				}
				
				var profile:String = _loggedUser.profil;				
				_editableSession = RightStatus.hasRight(profile, RightStatus.CAN_MODIFY_OTHER_SESSION);
				// image of the logged user
				//imageLoggedUser.source = _loggedUser.avatar;
				// promt in navigateurDay
				navigateurDay.prompt = fxgt.gettext("Il faut choisir la date de la séance");				
				// remove all views the session
				this.listSessionView = new ArrayCollection();
				this.sessionGroup.removeAllElements();
				
				var vb:VGroup = new VGroup();	
				this.sessionGroup.addElement(vb);
				
				if(Model.getInstance().hasDateSession())
				{
					// set dataProvider the navigateurDay  
					this.listDateForNavigateurDay = Model.getInstance().getSessionDate();
					// get last time selected item navigateurDay
					var lastSelectedObject:Object = Model.getInstance().getSelectedItemNavigateurDayByLoggedUser();
					var sessionEvent:SessionEvent = new SessionEvent(SessionEvent.UPDATE_LIST_SESSION);
					sessionEvent.listSession = lastSelectedObject.listSessionDate;
					sessionEvent.sessionDate = lastSelectedObject.labelDate;
					dispatchEvent(sessionEvent);				
				}else{
					// id loggedUser
					var loggedUserId:int = Model.getInstance().getLoggedUser().id_user;
					// getiing list date of sessions from BD
					var sessionEvent:SessionEvent = new SessionEvent(SessionEvent.LOAD_LIST_DATE_SESSION);
					sessionEvent.userId = loggedUserId;				
					dispatchEvent(sessionEvent);					
				}
			}
			
			/**
			 * Send message to all users
			 */ 
			protected function sendAll_clickHandler():void
			{						
				var event:MessageEvent = new MessageEvent(MessageEvent.SEND_PUB_MESSAGE);
				event.senderUserId = Model.getInstance().getLoggedUser().getId();
				event.message = this.textToSend.text.toString();
				dispatchEvent(event);
				this.textToSend.text = ""; 
				var loggerUser:User = Model.getInstance().getLoggedUser();
	/* 			listConUsers.visible = false; 
 */			}
			
			/**
			 * Send message to one user
			 */ 
			protected function sendMessageToUser():void
			{
/* 				var userId:int = this.listConUsers.selectedItem.id_user;
				var text:String = this.textToSend.text.toString();
				var event:MessageEvent = new MessageEvent(MessageEvent.SEND_PRV_MESSAGE);
				event.senderUserId = Model.getInstance().getLoggedUser().getId();
				event.message = text;
				event.resiverUserId = userId;
				dispatchEvent(event);
				this.textToSend.text = "";  
				var loggerUser:User = Model.getInstance().getLoggedUser();
				Model.getInstance().addFluxActivity(loggerUser.id_user,loggerUser.firstname, loggerUser.avatar,"[private] "+text ,new Date());
				listConUsers.visible = false; */
			}
			
			/**
			 * Update session view
			 */ 
			public function updateSessionView(event:SessionEvent):void
			{
				var homeModule:HomeModule = Model.getInstance().getCurrentHomeModule() as HomeModule
				if( homeModule == this)
				{
					this.listDateForNavigateurDay = Model.getInstance().getSessionDate();
					// set selected label date 
					var openDate:Object = Model.getInstance().getSelectedItemNavigateurDayByLoggedUser();
					this.navigateurDay.selectedItem = openDate;
					// update view only if date of session for updating the same with date on navigateurDay
					if(openDate.labelDate == event.sessionDate)
					{					
						var listSession:ArrayCollection = event.listSession;
						this.listSessionView = new ArrayCollection();
						this.sessionGroup.removeAllElements();
						var vb:VGroup = new VGroup();		
						var listConnectedUser:ArrayCollection = Model.getInstance().getConnectedUsers();
						var listSwapUsers:ArrayCollection = Model.getInstance().getSwapUsers(); 
						if(listSession != null)
						{
							var nbrSession:uint = listSession.length;
							if(nbrSession == 0)
							{
								var labelMessage:Label = new Label();
								labelMessage.setStyle("fontSize", 14);
								labelMessage.setStyle("fontWeight", "bold");
								labelMessage.text = fxgt.gettext("  \n\n\n Vous n'avez pas de séance pour cette date...\n\n\n");
								vb.addElement(labelMessage);
							}else
							{
								for(var nSession:uint = 0; nSession < nbrSession; nSession++)
								{
									var session:Session = listSession[nSession];
									var sessionView:SessionHomeElement = new SessionHomeElement();
									sessionView.width = navigateurDay.width - navigateurDay.rightButton.width;
									// check connected users
									session.checkConnectedUsers(listConnectedUser);
									sessionView.session = session;
									sessionView.editable = _editableSession;
									sessionView.swapItems = listSwapUsers;
									sessionView.loggedUser = _loggedUser;
									// listener for change user in the session 
									sessionView.addEventListener(SessionHomeElementEvent.CHANGE_SESSION_USER, onChangeSessionUsers);
									// listener for action the logged user
									sessionView.addEventListener(SessionHomeElementEvent.CLICK_ACTION_LOGGED_USER, onClickActionLoggedUser);
									vb.addElement(sessionView);
									this.listSessionView.addItem(sessionView);	
								}
							} 	
						}else
							{	
							// havn't session to show by this date 
							navigateurDay.selectedIndex = -1;
						}
							// add updated vb groupe
							this.sessionGroup.addElement(vb);
					}
				}
			}	
			
			private function showDateSession(event :SessionEvent):void{
				if( Model.getInstance().getSessionDate().length == 0)
				{
					Model.getInstance().setSessionDate(event.listDate);
					this.listDateForNavigateurDay = Model.getInstance().getSessionDate();
					var elementDateStartToday:Object = getObjectDateSessionStartToday(this.listDateForNavigateurDay);
					var labelDate:String = elementDateStartToday.labelDate;
					Model.getInstance().setSelectedItemNavigateurDayByLoggedUser(elementDateStartToday);
					
					var sessionEventLoad:SessionEvent = new SessionEvent(SessionEvent.LOAD_LIST_SESSION);
					sessionEventLoad.userId = Model.getInstance().getLoggedUser().id_user;
					sessionEventLoad.sessionDate = labelDate;
					dispatchEvent(sessionEventLoad);
				}
			}
			
			private function showSession(event :SessionEvent):void{
				if(Model.getInstance().getCurrentHomeModule() as HomeModule == this){
					// FIXME have to change name the property 
					var listSession :Array = event.listDate;
					Model.getInstance().setListSessionsByDate(listSession , event.sessionDate);
					
					var nbrSession:uint = listSession.length;
					if(nbrSession != 0)
					{
						for(var nSession:uint = 0; nSession < nbrSession ; nSession++)
						{
							var userEvent:UserEvent = new UserEvent(UserEvent.LOAD_LIST_USERS_SESSION);
							userEvent.sessionId = listSession[nSession].id_session;
							userEvent.sessionDate = event.sessionDate;
							dispatchEvent(userEvent);			
						}	
					}else
					{
						var sessionEvent:SessionEvent = new SessionEvent(SessionEvent.UPDATE_LIST_SESSION);
						var listSessionEmpty:ArrayCollection = new ArrayCollection();
						sessionEvent.listSession = listSessionEmpty;
						sessionEvent.sessionDate = event.sessionDate;
						dispatchEvent(sessionEvent);	
					}
				}				
			}

			/**
			 * 
			 */
			private function getObjectDateSessionStartToday(arr:ArrayCollection):Object
			{
				var date:Date = new Date();
				var result:Object = null;
				var deltaPositive:Number = Number.MAX_VALUE;
				var deltaNegative:Number = Number.MAX_VALUE;
				var hasDateToday:Boolean = false;
				var nbrElement:uint = arr.length;
				for(var nElement:uint = 0; nElement < nbrElement ; nElement++)
				{
					var elmDate:Date = arr[nElement].fullDate;
					if(isDateToday(elmDate)){
						result = arr[nElement];
						hasDateToday = true;
						break;
					}
				
					var tempDelta:Number = elmDate.getTime() - date.getTime();
					if(tempDelta > 0)
					{
						if(tempDelta < deltaPositive)
						{
							deltaPositive = tempDelta;
							result = arr[nElement];
						}
					}else{
						tempDelta = tempDelta * -1;
						if(tempDelta < deltaNegative)
						{
							deltaNegative = tempDelta;
							result = arr[nElement];
						}
					}
				}	
				
				if(!hasDateToday)
				{
					// where will add date today
					var obj:Object = null;
					var index:uint = arr.getItemIndex(result);
					var diff:Number = (result.fullDate as Date).getTime() - date.getTime();
					if(diff < 0)
					{
						 index++;
					}
					obj = Model.getInstance().addSessionDateToday(index);
					return obj;
					
				}else return result; 
			}	
			
			private function isDateToday(arrDate:Date):Boolean
			{
				var date:Date = new Date();
				if(date.getFullYear() == arrDate.getFullYear())
				{
					if(date.getMonth() == arrDate.getMonth()){
						if(date.getDate() == arrDate.getDate())
						{
							return true;
						}else return false;
					}else return false;
				}else return false;
			}
			
			
			/**
			 * Change participants user 
			 */ 
			private function onChangeSessionUsers(event:SessionHomeElementEvent):void{
				var sessionView:SessionHomeElement = event.currentTarget as SessionHomeElement;
				var sessionId:uint = sessionView.session.getSessionId();
				var oldUserId:uint = event.oldSessionUser.getId();
				var newUserId:uint = event.newSessionUser.getId();
				
				var oldSessionUser:SessionUserVO = new SessionUserVO();
				oldSessionUser.id_session = sessionId;
				oldSessionUser.id_user = oldUserId;
				
				var newSessionUser:SessionUserVO = new SessionUserVO();
				newSessionUser.id_session = sessionId;
				newSessionUser.id_user = newUserId;
				
				var sessionUserEvent:SessionUserEvent = new SessionUserEvent(SessionUserEvent.UPDATE_SESSION_USER);
				sessionUserEvent.oldSessionUser = oldSessionUser;
				sessionUserEvent.newSessionUser = newSessionUser;
				dispatchEvent(sessionUserEvent);	
			}
			
			/**
			 * Check action of logged user  
			 */ 
			private function onClickActionLoggedUser(event:SessionHomeElementEvent):void
			{
				var eventSession:SessionEvent;
				switch(event.typeAction)
				{
					case SessionHomeElementEvent.ACTION_JOIN_SESSION:
					{
						eventSession = new SessionEvent(SessionEvent.JOIN_SESSION);
						break;
					}
					case SessionHomeElementEvent.ACTION_EDIT_SESSION:
					{
						eventSession = new SessionEvent(SessionEvent.EDIT_SESSION);
						break;
					}
					case SessionHomeElementEvent.ACTION_CANCEL_SESSION:
					{
						eventSession = new SessionEvent(SessionEvent.CANCEL_SESSION);
						break;
					}				
				}
				eventSession.session = event.session;
				dispatchEvent(eventSession);
			}
			
			/**
			 * Update dataProvider each sessionView
			 */ 
			public function updateView(event:SessionEvent = null):void
			{
				for each(var view:SessionHomeElement in this.listSessionView)
				{
					view.session.checkConnectedUsers(Model.getInstance().getConnectedUsers());
					view.updateViewUsers();
				}		
			}
			
			/**
			 * Show list connected users, exclude logged user
			 */ 
			protected function sendOneUser_clickHandler(event:MouseEvent):void
			{
				/* if(listConUsers.visible){
					listConUsers.visible = false;
				}else
				{
					var listConnectedUserExludeLoggedUser:ArrayCollection = Model.getInstance().getConnectedUserExcludeLoggedUser();
					if (listConnectedUserExludeLoggedUser.length > 0)
					{
						listConUsers.dataProvider = listConnectedUserExludeLoggedUser;
						listConUsers.visible = true;
					}
				} */
			}		
			
		
			/**
			 * Handler the navigateurDay component
			 */ 
			protected function navigateurDay_changeHandler(event:IndexChangeEvent):void
			{
				var selectedItem:Object = (event.target as NavigateurDay).selectedItem as Object;
				// set selected item to Model
				Model.getInstance().setSelectedItemNavigateurDayByLoggedUser(selectedItem);
				var listSessionDate:ArrayCollection = selectedItem.listSessionDate;			
				if(listSessionDate == null){
					tx.text = "calling";
					// set list session from BD
					var sessionEventLoad:SessionEvent = new SessionEvent(SessionEvent.LOAD_LIST_SESSION);
					sessionEventLoad.userId = Model.getInstance().getLoggedUser().id_user;
					sessionEventLoad.sessionDate = selectedItem.labelDate;
					dispatchEvent(sessionEventLoad);				
				}else{
					tx.text = "local";
					// update dataProvider SessionView 
					var sessionEvent:SessionEvent = new SessionEvent(SessionEvent.UPDATE_LIST_SESSION);
					sessionEvent.sessionDate = selectedItem.labelDate;
					sessionEvent.listSession = listSessionDate;
					dispatchEvent(sessionEvent);	
				}
			}	
			
			/**
			 * 
			 */
			protected function showLabalNavigateurDay(item:Object):String
			{
				var date:Date = item.fullDate as Date;
				if(this.isDateToday(date))
				{
					return fxgt.gettext("<<-- AUJOURD'HUI -->");
				}else
				{
					var dayString:String = date.getDate().toString();
					var yearString:String = date.getFullYear().toString();
					var monthString:String = "";
					var month:Number = date.getMonth();
					switch (month){
						case 0:
							monthString = fxgt.gettext("JANVIER");
							break;
						case 1:
							monthString = fxgt.gettext("FEVRIER");
							break;
						case 2:
							monthString = fxgt.gettext("MARS");
							break;
						case 3:
							monthString = fxgt.gettext("AVRIL");
							break;
						case 4:
							monthString = fxgt.gettext("MAI");
							break;
						case 5:
							monthString = fxgt.gettext("JUIN");
							break;
						case 6:
							monthString = fxgt.gettext("JUILLIET");
							break;
						case 7:
							monthString = fxgt.gettext("AOÛT");
							break;
						case 8:
							monthString = fxgt.gettext("SEPTEMBRE");
							break;
						case 9:
							monthString = fxgt.gettext("OCTOBRE");
							break;
						case 10:
							monthString = fxgt.gettext("NOVEMBRE");
							break;
						case 11:
							monthString = fxgt.gettext("DECEMBRE");
							break;
					}
					var dayWeek:Number = date.getDay();
					var dayWeekString:String="";
					switch (dayWeek){
						case 0:
							dayWeekString = fxgt.gettext("DIMANCHE");
							break;
						case 1:
							dayWeekString = fxgt.gettext("LUNDI");
							break;
						case 2:
							dayWeekString = fxgt.gettext("MARDI");
							break;
						case 3:
							dayWeekString = fxgt.gettext("MERCREDI");
							break;
						case 4:
							dayWeekString = fxgt.gettext("JEUDI");
							break;
						case 5:
							dayWeekString = fxgt.gettext("VENDREDI");
							break;
						case 6:
							dayWeekString = fxgt.gettext("SAMEDI");
							break;		
					}
					return 	dayWeekString + " "+dayString + " "+monthString+ " "+ yearString ;		
				}
			}
			
			/**
			 * Update language of te selected item 
			 */
			protected function updateLanguageNavigateurDay(event:ApplicationMenuEvent):void
			{
				var selectedDate:Object = Model.getInstance().getSelectedItemNavigateurDayByLoggedUser();
				this.navigateurDay.selectedIndex = -1;		
				this.navigateurDay.selectedItem = selectedDate;				
			}
			
			/**
			 * Send message to all by click button "enter"
			 */
			protected function onKeyUp(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.ENTER)
				{
					sendAll_clickHandler();
				}
			}
			
			public function onLoadedAllUsers(event:SessionEvent):void
			{
				if(Model.getInstance().getCurrentHomeModule() as HomeModule == this)
				{
					var listUsersPlateforme:ArrayCollection = new ArrayCollection()
					var listUser:Array = event.listDate;
					var nbrUser:int = listUser.length;
					// get role the first user
					var role:int = new User(listUser[0] as UserVO).role;
					// set number user
					var currentNumberUser:int = 1; 
					for(var nUser:int = 0; nUser < nbrUser; nUser++)
					{
						var userVO:UserVO = listUser[nUser];
						var user:User = new User(userVO);
						// add user 
						listUsersPlateforme.addItem(user);
						var messageUser:MessageUser = new MessageUser();
						messageUser.user = user;
						// if the role same do ++ number 
						if(user.role == role)
						{
							messageUser.numberUser = currentNumberUser;	
							currentNumberUser++;
						}else
						{
							role = user.role;
							messageUser.numberUser = 1;	
							currentNumberUser = 2;
						}
						var editabled:Boolean = false;
						if(user.id_user == Model.getInstance().getLoggedUser().id_user)
						{
							editabled = true;
						}
						messageUser.setEditabled(editabled);
						//messageUser.addEventListener(UserEvent.UPDATE_USER, onUpdateMessageUser);
						messageUser.percentWidth = 100;
						groupUser.addElement(messageUser)
					}
					// set list users the plateforme
					Model.getInstance().setListUsersPlateforme(listUsersPlateforme);
				}
			}
		]]>
	</fx:Script>
	<s:VGroup gap="5" horizontalAlign="center" horizontalCenter="0"  top="0" bottom="0" left="0" right="0" maxWidth="1024" >

		<s:HGroup width="100%" height="50"  horizontalAlign="left" gap="30" verticalAlign="bottom">
			<mx:Image source="{Model.getInstance().getLoggedUser().avatar}" width="50" height="50"/>
			<s:Label text="{Model.getInstance().getLoggedUser().lastname + ' '+ Model.getInstance().getLoggedUser().getFirstName()}"  fontSize="20"/>
		</s:HGroup>
		<s:HGroup width="100%" height="100%">
			<!--<s:Label text="{Model.getInstance().getLoggedUser().getFirstName()}"  fontSize="20"/>-->
<!-- CALENDAIRE -->
			<s:Group width="40%" height="100%" >
				<s:layout>
					<s:VerticalLayout gap="5"/>
				</s:layout>
				<s:HGroup horizontalAlign="center" width="100%" verticalAlign="justify">
					<s:BorderContainer width="100%" height="35" backgroundColor="#cedbef">
						<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalCenter="0">
							<s:Label width="100%" fontSize="14" color="#000000" paddingLeft="160">
								<s:text>{fxgt.gettext("CALENDRIER")}</s:text>
							</s:Label>
						</s:HGroup>
					</s:BorderContainer>
				</s:HGroup>
				<controls:NavigateurDay id="navigateurDay" dataProvider="{this.listDateForNavigateurDay}" labelFunction="showLabalNavigateurDay"  visible="true"   change="navigateurDay_changeHandler(event)"  width="100%"/>
				<s:Group width="100%" height="100%">
					<s:BorderContainer  width="100%" borderVisible="false" height="100%" y="0"/>
						<s:Scroller top="1" bottom="1" id="scrollerSession" width="100%" x="1">    
								<s:VGroup id="sessionGroup"   width="100%"  height="100%" gap="15" horizontalAlign="center"/>
						</s:Scroller> 
				</s:Group>
				<!--<s:HGroup id="sessionGroup" x="0"/>-->
			</s:Group>	
<!-- FLUX ACTIVITY -->
			<s:HGroup  id="fluxGroup"  width="30%" verticalAlign="top" x="{navigateurDay.x + navigateurDay.width+10}" visible="true" height="100%">
				<s:VGroup gap="5" width="100%" paddingBottom="0" height="100%">
					<s:HGroup horizontalAlign="center" width="100%" height="35">
						<s:BorderContainer width="100%" height="35" backgroundColor="#CCDCC8">
							<s:HGroup width="100%" height="100%" verticalAlign="middle">
								<s:Label width="100%"  fontSize="14" color="#000000"  paddingLeft="40">
									<s:text>{fxgt.gettext("FLUX D'ACTIVITES DE L'ACCUEIL")}</s:text>
								</s:Label>
							</s:HGroup>
						</s:BorderContainer>
						<!--<s:List  id="listConUsers" change="sendMessageToUser()"  visible="false" labelField="firstname" width="200" height="35"/>-->
					</s:HGroup>
<!--					<s:HGroup>
						<mx:Image source="images/exampleMessageServeur.png" height="35" width="450" y="3"/>
					</s:HGroup>-->
					<s:HGroup verticalAlign="middle" width="100%" horizontalAlign="center">
					<!--	<mx:Image id="imageLoggedUser" width="40" height="40"/>-->
						<s:TextInput id="textToSend" width="100%" height="{navigateurDay.height}" keyUp="onKeyUp(event)"/>
						<s:Button  height="{navigateurDay.height}" width="63" click="sendAll_clickHandler()">
							<s:label>{fxgt.gettext("Tous")}</s:label>
						</s:Button>	
						<s:Button  height="{navigateurDay.height}" width="80" click="sendOneUser_clickHandler(event)">
							<s:label>{fxgt.gettext("Personnel")}</s:label>
						</s:Button>
					</s:HGroup>
					
					<s:List selectionColor="#ffffff"  borderAlpha="0.0" dataProvider="{fluxActivity}" width="100%" itemRenderer="com.ithaca.visu.renderer.FluxActivityRenderer" height="100%">
						<s:layout>
							<s:VerticalLayout gap="5" horizontalAlign="center" paddingBottom="0" paddingTop="0"/>
						</s:layout>
						<!--<s:itemRenderer>
							<fx:Component>
								<s:ItemRenderer>
									<s:BorderContainer  height="35"  borderVisible="true" width="430" >
										<mx:Image source="{data.pathImage}" x="3" width="25" height="25"  y="3"/>
										<s:Label id="labelFirstName" text="{data.firstname}" fontWeight="bold"  x="35" y="8"/>
										<s:Label text="{data.message}"   x="{labelFirstName.x + labelFirstName.width + 5}" y="{labelFirstName.y}" color="#6ca6cf"/>
										<s:Label text="{data.time}"  fontSize="10"  right="30" y="20" color="#CCCCCC"/>
									</s:BorderContainer>
								</s:ItemRenderer>
							</fx:Component>							
						</s:itemRenderer>-->
					</s:List> 	
				</s:VGroup>		
			</s:HGroup>
<!-- MESSAGE USERS -->
			<s:Group width="30%" height="100%">
				<s:BorderContainer width="100%" height="35" backgroundColor="#f5f496">
					<s:HGroup width="100%" height="100%" verticalAlign="middle">
						<s:Label width="100%"  fontSize="14" color="#000000"  paddingLeft="90">
							<s:text>{fxgt.gettext("LES UTILISATEURS")}</s:text>
						</s:Label>
					</s:HGroup>
				</s:BorderContainer>
				<s:Scroller left="5" right="5" top="40" bottom="0">
					<s:Group id="groupUser" height="100%" width="100%">
						<s:layout>
							<s:VerticalLayout gap="5" />
						</s:layout>
					</s:Group>
				</s:Scroller>
			</s:Group>
		</s:HGroup>
	</s:VGroup>
	<s:Label fontSize="20" text="/////.."  y="500" id="tx"  visible="false"/>
</modules:VisuModuleBase>
