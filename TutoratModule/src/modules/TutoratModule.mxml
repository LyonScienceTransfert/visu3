<?xml version="1.0" encoding="utf-8"?>
<modules:VisuModuleBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx" 
						xmlns:modules="com.ithaca.visu.modules.*" 
						xmlns:maps="maps.*"
						xmlns:mate="http://mate.asfusion.com/"
						configure="visumodulebase1_configureHandler(event)"
						creationComplete="visumodulebase1_creationCompleteHandler(event)"
						width="100%" height="100%" xmlns:controls="com.lyon2.controls.*" 
						currentState="BlankState" 
						xmlns:sessions="com.ithaca.visu.controls.sessions.*">
	<fx:Script>
		<![CDATA[
			import com.ithaca.visu.controls.globalNavigation.event.ApplicationMenuEvent;
			import com.ithaca.visu.controls.sessions.SharedElementChat;
			import com.ithaca.visu.events.ActivityElementEvent;
			import com.ithaca.visu.events.InitMapEvent;
			import com.ithaca.visu.events.MessageEvent;
			import com.ithaca.visu.events.SessionEvent;
			import com.ithaca.visu.events.SessionSharedEvent;
			import com.ithaca.visu.events.VisuActivityEvent;
			import com.ithaca.visu.events.VisuModuleEvent;
			import com.ithaca.visu.ui.utils.ConnectionStatus;
			import com.ithaca.visu.ui.utils.RoleEnum;
			import com.ithaca.visu.ui.utils.SessionStatusEnum;
			import com.lyon2.controls.RoundedLabel;
			import com.lyon2.controls.YoutubePlayer;
			import com.lyon2.visu.model.ActivityElementType;
			import com.lyon2.visu.model.Model;
			import com.lyon2.visu.model.Session;
			import com.lyon2.visu.model.User;
			import com.youtube.player.events.PlayerEvent;
			
			import gnu.as3.gettext.FxGettext;
			import gnu.as3.gettext._FxGettext;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.core.IUIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import spark.components.Button;
			import spark.components.Label;
			import spark.core.NavigationUnit;
			import spark.events.IndexChangeEvent;
			
			private var currentSession:Session;
			private var _stopTimeRecording:Number = 0;
			
			private var listObjectMedia:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var listActivities:ArrayCollection;
			
			[Bindable]
			private var fxgt:_FxGettext;
			
			[Bindable]
			[Embed("images/marqueurBlanc-bas-20px.png")]
			private var markerIcon:Class;
			
			[Bindable]
			[Embed("images/messageChat.png")]
			private var messageChatIcon:Class;
			
			[Bindable]
			[Embed("images/keyword.png")]
			private var keywordIcon:Class;
			
			[Bindable]
			[Embed("images/video.jpg")]
			private var videoIcon:Class;

			[Bindable]
			[Embed("images/chatMessageVisu1.png")]
			private var messageChatIconVisu1:Class;

			[Bindable]
			[Embed("images/consigneVisu1.png")]
			private var consigneIconVisu1:Class;

			[Bindable]
			[Embed("images/fichierVisu1.png")]
			private var fichierIconVisu1:Class;
			
			[Bindable]
			private var timer:Timer;
			
			private var testCursor:ObselButton;
			
			protected function visumodulebase1_configureHandler(event:VisuModuleEvent):void
			{
				if((event.currentTarget as TutoratModule).parameters != null)
				{
					var session:Session = (event.currentTarget as TutoratModule).parameters as Session ;
					this.currentSession = session;
					// FIXME many instance of TutoratModul
					Model.getInstance().setCurrentSession(session);
					Model.getInstance().setCurrentTutoratModule(this);
					// init list traceLines
					Model.getInstance().initListTraceLine();
					
					var initMapEvent:InitMapEvent = new InitMapEvent(InitMapEvent.INIT_MAP_TUTORAT);
					this.dispatchEvent(initMapEvent);
					// set current state
					if(Model.getInstance().getLoggedUser().role > RoleEnum.STUDENT)
					{
						this.setCurrentState("MainState");				
					}else
					{
						this.setCurrentState("StudentState");		
					}
					
				}
				else{
					this.setCurrentState("BlankState");
				}
			}
			
			protected function visumodulebase1_creationCompleteHandler(event:FlexEvent):void
			{
				if((this.currentState != "BlankState") && (Model.getInstance().getCurrentSession() != null) ){
					
					fxgt = FxGettext;
					if(buttonStartRecording != null){
						buttonStartRecording.label = fxgt.gettext("Démarrer la séance");
						this.buttonCloseSession.enabled = false;
					}
					
					Model.getInstance().updateStatusLoggedUser(ConnectionStatus.CONNECTED);
					var visuActivityEvent:VisuActivityEvent = new VisuActivityEvent(VisuActivityEvent.LOAD_LIST_ACTIVITY);
					visuActivityEvent.sessionId = Model.getInstance().getCurrentSession().id_session;					
					dispatchEvent(visuActivityEvent);
					
					this.visio.connection = Model.getInstance().getNetConnection();
					this.visio.streamID = Model.getInstance().getUserIdClient();
					this.visio.addLocalDevice();
					if(panelPlanSession != null)
					{
						panelPlanSession.title = panelPlanSession.title +' : '+ Model.getInstance().getCurrentSession().theme;
					}
					// add streams of other users from this session
					//var listSessionUsers:ArrayCollection = Model.getInstance().getCurrentSession().participants;
					var listIdClient:Array = Model.getInstance().getListIdClient(Model.getInstance().getCurrentSession().id_session);
					if(listIdClient != null)
					{
						// FIXME : if session end recording and for logged user status = 0 , this status by default add to all streams, it's no good!!!
						this.visio.addVideoStreams(listIdClient);	
					}
					// removing module from the stage
					this.addEventListener(Event.REMOVED_FROM_STAGE, onRemovedModuleFromStage);
				}
			}
			
			/**
			 * Removing all streams and local devices
			 */
			private function onRemovedModuleFromStage(event:Event):void{
				if(this.visio != null)
				{
					this.visio.removeAllStreams();
					this.visio.removeLocalDevice();				
				}
			}
			
			/**
			 * New user join to the session
			 */
			private function onNewUserJoinSession(event:SessionEvent):void{	
				// check if user in current session
				//	if(this.currentSession.id_session == event.sessionId)
				//	{
				if(Model.getInstance().getCurrentSession().id_session == event.sessionId)
				{
					var module:Object = Model.getInstance().getCurrentTutoratModule();
					if(module.visio != null)
					{
						module.visio.addVideoStream(event.userIdClient);
						// FIXME: VisuVisio.STATUS_RECORD not the same value ConnectionStatus.RECORDING
						if(event.status == ConnectionStatus.RECORDING)
						{
							module.visio.status = VisuVisio.STATUS_RECORD;
						}
					}
				}							
				//}
			}
			
			/**
			 * Old user walk out from the session
			 */
			private function onOldUserOutSession(event:SessionEvent):void
			{
				var module:Object = Model.getInstance().getCurrentTutoratModule();
				if(module.visio != null)
				{
					// streamId of the user 
					var streamId:String = event.userIdClient;
					// remove video of the user
					module.visio.removeVideoStream(streamId);
				}	
			}
			
			/**
			 * Update status on recording mode
			 */
			private function onStartRecordingSession(event:SessionEvent):void
			{
				if(this.visio != null)
				{
					this.visio.status = VisuVisio.STATUS_RECORD;
					// update label button on view tutorat
					if(buttonStartRecording != null){			
						buttonStartRecording.label = fxgt.gettext("Arreter la séance");	
						buttonCloseSession.enabled = false;
					}
				}
			}

			/**
			 * Update status on stop recording session
			 */
			private function onStopRecordingSession(event:SessionEvent):void
			{
				if(this.visio != null)
				{
					this.visio.status = VisuVisio.STATUS_NONE;
					// update label button on view tutorat
					if(buttonStartRecording != null){
						buttonStartRecording.label = fxgt.gettext("Démarrer la séance");
						buttonCloseSession.enabled = true;
					}
				}
			}
			
			/**
			 * Update list activity
			 */ 
			// FIXME : 	Echec de la contrainte de type, look at TutoratManageronLoadListActivityElement
			//	public function updateView(event:VisuActivityEvent):void
			public function updateView(listActivity:ArrayCollection):void
			{
				
			}

			
			private function onUpdateViewChatPanelSession(event:SessionSharedEvent):void
			{
				var currentModule:TutoratModule = Model.getInstance().getCurrentTutoratModule() as TutoratModule;
				if(this == currentModule)
				{
					// obselVO will be null only if session paused or not started
					var obselVO:ObselVO = event.obselVO as ObselVO;
					if( obselVO != null)
					{
						// set obsel to the model
						var obsel:Obsel = Obsel.fromRDF(obselVO.rdf);
						this.addObsel(obsel);
					}
					
					var pathAvatar:String = "";
					var name:String = "";
					var sourceImageInfo:Class = null;
					var senderUser:User = Model.getInstance().getUserByUserId(event.senderUserId);
					if(senderUser != null)
					{
						pathAvatar = senderUser.avatar;
						name = senderUser.firstname + " "+ senderUser.lastname;
						
					}
					
					if((event.typeInfo as int) != ActivityElementType.valueOf(ActivityElementType.MARKER))
					{
						switch (event.typeInfo as int) 
						{
							case ActivityElementType.valueOf(ActivityElementType.VIDEO) :
								sourceImageInfo = videoIcon;
								var player:YoutubePlayer = new YoutubePlayer();
								// set id of the sender user 
								player.setSenderId(event.senderUserId);
								player.url = event.url;
								player.percentWidth = 100;
								player.height = 225;
								player.toolTip = event.info;
								player.addEventListener(PlayerEvent.READY, loadComplete);
								if(this.panelMediaSession != null)
								{
									this.panelMediaSession.addElementAt(player, 0);
								}
								break;
							case ActivityElementType.valueOf(ActivityElementType.IMAGE) :
								sourceImageInfo = fichierIconVisu1;
								var image:ImageDocument = new ImageDocument();
								// set id of the sender user
								image.setSenderId(event.senderUserId);
								image.load(event.url);
								image.toolTip = event.info;
								image.percentWidth = 100;	
								image.addEventListener(Event.ADDED_TO_STAGE, loadComplete);
								if(this.panelMediaSession != null)
								{
									this.panelMediaSession.addElementAt(image, 0);
								}
								break;
							case ActivityElementType.valueOf(ActivityElementType.MESSAGE) :
								sourceImageInfo = messageChatIconVisu1; 
								break;
							case ActivityElementType.valueOf(ActivityElementType.KEYWORD) :
								sourceImageInfo = keywordIcon; 
								break;
							case ActivityElementType.valueOf(ActivityElementType.STATEMENT) :
								sourceImageInfo = consigneIconVisu1; 
								break;
							case ActivityElementType.valueOf(ActivityElementType.READ_DOCUMENT_IMAGE) :
								sourceImageInfo = fichierIconVisu1;
								break;
							case ActivityElementType.valueOf(ActivityElementType.READ_DOCUMENT_VIDEO) :
								sourceImageInfo = videoIcon;
								break;
						}
						
						var sharedElementChat:SharedElementChat = new SharedElementChat();
						sharedElementChat.setElementChat(pathAvatar,name,event.info, sourceImageInfo);
						this.panelChatSession.addEventListener(FlexEvent.UPDATE_COMPLETE, onUpdateChatSession);
						this.panelChatSession.addElement(sharedElementChat);
					}
				}
			}
			
			public function loadComplete(event:Event):void
			{
				var player:YoutubePlayer = event.target as YoutubePlayer;
				if(player != null){
					trace('loadComplete');
					resizeMe(event.target);
					this.listObjectMedia.addItem(player);
				} 
				// send message to serveur(all users of current session exclus me/loggedUser) that user can see recived Document
 				var url:String= "";
				var typeInfo:int=-1;
				if(event.target.className == "ImageDocument")
				{
					url = event.target.source as String;
					typeInfo = ActivityElementType.valueOf(ActivityElementType.READ_DOCUMENT_IMAGE);
				}else{
					url = event.target.url as String;
					typeInfo = ActivityElementType.valueOf(ActivityElementType.READ_DOCUMENT_VIDEO);
				}
				var senderUserId:int = (event.target as IDocument).getSenderId();
				// get list users id without logged user
				// logged user can't partage info with himself 
				var listUsersIds:Array = Model.getInstance().getListUsersIdByRecordingSessionWithoutLoggedUser(this.currentSession.id_session);
				var sessionSharedEvent:SessionSharedEvent = new SessionSharedEvent(SessionSharedEvent.SEND_SHARED_INFO);
				sessionSharedEvent.typeInfo = typeInfo;
				// this information will add to the obsel
				sessionSharedEvent.info = event.target.toolTip;
				sessionSharedEvent.listUsers = listUsersIds;
				sessionSharedEvent.senderUserId = senderUserId;
				sessionSharedEvent.status = this.visio.status;	
				sessionSharedEvent.url = url;
				dispatchEvent(sessionSharedEvent);			
				
				
				addEventListener(FlexEvent.UPDATE_COMPLETE, scrollToBottom);
			}
			
			public function resizeMe(o:Object):void
			{
				var ratio:Number;
				if(o is Image)
				{
					ratio= o.contentWidth/o.contentHeight;
				}
				if( o is YoutubePlayer )
				{
					ratio = 4/3;
				}
				o.height =  o.width / ratio ;
				
			}
			
			public function scrollToBottom(event:Event):void
			{
				removeEventListener(FlexEvent.UPDATE_COMPLETE, scrollToBottom);
				if (scrollerPanelMediaSession != null){
					scrollerPanelMediaSession.viewport.verticalScrollPosition = 0;
				}
			}
			
			
			protected function onUpdateChatSession(event:FlexEvent):void{
				// update scroll possition
				scrollerPanelChatSession.viewport.verticalScrollPosition = scrollerPanelChatSession.viewport.contentHeight - scrollerPanelChatSession.height;
			}
			
			
			protected function shareActivityElement(event:ActivityElementEvent):void
			{
				trace("shareActivityElement");
				var sessionId:int = Model.getInstance().getCurrentSession().id_session;
				var listUsersId:Array = Model.getInstance().getListUsersIdByRecordingSession(sessionId);
				var sessionSharedEvent:SessionSharedEvent = new SessionSharedEvent(SessionSharedEvent.SEND_SHARED_INFO);
				sessionSharedEvent.typeInfo = ActivityElementType.valueOf(event.element.type_element);
				sessionSharedEvent.info = event.element.data;
				sessionSharedEvent.listUsers = listUsersId;
				sessionSharedEvent.status = this.visio.status;	
				sessionSharedEvent.url = event.element.url_element;
				dispatchEvent(sessionSharedEvent);
			}
			
			protected function startActivity(event:VisuActivityEvent):void
			{
				//dispatchEvent 
				event.stopPropagation();
				trace("TODO : start activity "+event.activity.id_activity + ":"+ event.activity.title);
			}
			
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				if(this.visio != null)
				{
					if (this.visio.status == VisuVisio.STATUS_RECORD){
						//stop recording	
						// conformation for closing the session
						Alert.yesLabel = fxgt.gettext("Oui");
						Alert.noLabel = fxgt.gettext("Non");
						//Alert.show(fxgt.gettext("Voulez-vous fermer la séance ?"),
						Alert.show(fxgt.gettext("Voulez-vous arrêter l'enregistrement ? (vous pourrez le reprendre plus tard)"),
						fxgt.gettext("Confirmation"), Alert.YES|Alert.NO, null, stopRecordingConfirmed); 	
					}else{
						//start recording
						var eventStartRecording:MessageEvent = new MessageEvent(MessageEvent.START_RECORDING);
						eventStartRecording.sessionId = this.currentSession.id_session;
						dispatchEvent(eventStartRecording);								
					}
				}
			}
			
			/**
			 * Stop recording conformation 
			 */
			protected function stopRecordingConfirmed(event:CloseEvent):void
			{
				var sessionStatus:int = -1;
				if( event.detail == Alert.YES )
				{				
					// stop recording
					sessionStatus =  SessionStatusEnum.SESSION_PAUSE;				
					var eventStopRecording:MessageEvent = new MessageEvent(MessageEvent.STOP_RECORDING);
					eventStopRecording.sessionId = this.currentSession.id_session;
					eventStopRecording.sessionStatus = sessionStatus;
					dispatchEvent(eventStopRecording);	
				}
			}
			
			
			
			/**
			 * Other tuteur close session
			 */
			protected function onCloseSession(event:SessionEvent):void
			{
				if(buttonStartRecording != null)
				{
					buttonStartRecording.enabled = false;
					buttonCloseSession.enabled = false;
				}
			}
			
			protected function updateLabelsModule(event:ApplicationMenuEvent):void
			{
				if(buttonStartRecording != null){
					if(this.visio.status == VisuVisio.STATUS_NONE)
					{				
						buttonStartRecording.label = fxgt.gettext("Démarrer la séance");									
					}else
					{
						buttonStartRecording.label = fxgt.gettext("Arreter la séance");			
					}
				}
			}
			
			/**
			 * Checking that sending the message by click on button or click by "enter"
			 */
			protected function onSendMessage(event:*):void
			{
				if(event is MouseEvent){
					this.sendMessage();
				}else if (event is KeyboardEvent) 
				{
					if(event.keyCode == Keyboard.ENTER)
					{
						this.sendMessage();
					}
				}
			}
			
			/**
			 * Sending message
			 */
			private function sendMessage():void
			{
				// TODO send message to one user by click on his video
				var listUsersId:Array;
				var sessionSharedEvent:SessionSharedEvent = new SessionSharedEvent(SessionSharedEvent.SEND_SHARED_INFO);
				var sessionId:int = Model.getInstance().getCurrentSession().id_session;
				if (this.visio.status == VisuVisio.STATUS_NONE)
				{
					// all connected users
					listUsersId = Model.getInstance().getListUsersIdByConnectedSession(sessionId);
					sessionSharedEvent.status = -1;	
				}else
				{
					// all connected users with status recording
					listUsersId = Model.getInstance().getListUsersIdByRecordingSession(sessionId);
					sessionSharedEvent.status = this.visio.status;
				}
				
				sessionSharedEvent.typeInfo = ActivityElementType.valueOf(ActivityElementType.MESSAGE);
				// remove last character from the message
				var message:String = textChatMessage.text.slice(0, textChatMessage.text.length-1);
				sessionSharedEvent.info = message;
				sessionSharedEvent.listUsers = listUsersId;
				dispatchEvent(sessionSharedEvent);
				// update text
				textChatMessage.text = "";
			}
			
			/**
			 * Checking that sending the marker by click on button or click by "enter"
			 */
			protected function onSetMyMarker(event:*):void
			{
				if(event is MouseEvent){
					this.sendMarker();
				}else if (event is KeyboardEvent) 
				{
					if(event.keyCode == Keyboard.ENTER)
					{
						this.sendMarker();
					}
				}
			}
			/**
			 *  Sending marker
			 */
			private function sendMarker():void
			{
				var sessionId:int = Model.getInstance().getCurrentSession().id_session;
				var listUsersId:Array = Model.getInstance().getListUsersIdByRecordingSession(sessionId);
				var sessionSharedEvent:SessionSharedEvent = new SessionSharedEvent(SessionSharedEvent.SEND_SHARED_INFO);
				sessionSharedEvent.typeInfo = ActivityElementType.valueOf(ActivityElementType.MARKER);
				var message:String = textChatMarker.text.slice(0, textChatMarker.text.length-1);
				sessionSharedEvent.info = message;
				sessionSharedEvent.status = this.visio.status;
				sessionSharedEvent.listUsers = listUsersId;
				dispatchEvent(sessionSharedEvent);
				// update text
				textChatMarker.text = "";
			}
			
 			protected function panelPlanSession_resizeHandler(event:ResizeEvent):void
			{
				event.target.addEventListener(FlexEvent.UPDATE_COMPLETE, resizeChildren);
			} 

 			public function resizeChildren(event:FlexEvent):void
			{
				event.target.removeEventListener(FlexEvent.UPDATE_COMPLETE, resizeChildren);
				var child:IUIComponent; 
				for each(child in  this.listObjectMedia)
				{
					resizeMe(child);
				}
			} 


			protected function buttonCloseSession_clickHandler(event:MouseEvent):void
			{
				if(this.visio != null)
				{
					// conformation for closing the session
					Alert.yesLabel = fxgt.gettext("Oui");
					Alert.noLabel = fxgt.gettext("Non");
						//Alert.show(fxgt.gettext("Voulez-vous fermer la séance ?"),
					Alert.show(fxgt.gettext("Voulez-vous fermer la séance ? (il ne sera plus possible d'y rentrer à nouveau)"),
					fxgt.gettext("Confirmation"), Alert.YES|Alert.NO, null, closeSessionConfirmed); 	
				}
			}
			
			/**
			 * Close session conformation 
			 */
			protected function closeSessionConfirmed(event:CloseEvent):void
			{
				var sessionStatus:int = -1;
				if( event.detail == Alert.YES )
				{				
					// stop recording and close session
					sessionStatus =  SessionStatusEnum.SESSION_CLOSE;	
					if(buttonStartRecording != null)
					{
						// can't start session
						buttonStartRecording.enabled = false;
						buttonCloseSession.enabled = false;
					}
					var eventStopRecording:MessageEvent = new MessageEvent(MessageEvent.STOP_RECORDING);
					eventStopRecording.sessionId = this.currentSession.id_session;
					eventStopRecording.sessionStatus = sessionStatus;
					dispatchEvent(eventStopRecording);			
				}
			}

		]]>
	</fx:Script>
	<modules:states>
		<s:State name="MainState"/>
		<s:State name="BlankState"/>
		<s:State name="StudentState"/>
	</modules:states>
	<fx:Declarations>
		<maps:TutoratMap id="tutoratMap" dispatcher="{this}"/>
		<mate:Listener type="{ApplicationMenuEvent.UPDATE_LANGUAGE}"  method="updateLabelsModule"/>
		<mate:Listener type="{VisuActivityEvent.SHOW_LIST_ACTIVITY}"  method="updateView"/>
		<mate:Listener type="{SessionEvent.NEW_USER_JOIN_SESSION}"  method="onNewUserJoinSession"/>
		<mate:Listener type="{SessionEvent.OLD_USER_OUT_SESSION}"  method="onOldUserOutSession"/>
		<mate:Listener type="{SessionEvent.START_RECORDING_SESSION}"  method="onStartRecordingSession"/>
		<mate:Listener type="{SessionEvent.STOP_RECORDING_SESSION}"  method="onStopRecordingSession"/>
		<mate:Listener type="{SessionEvent.CLOSE_SESSION}"  method="onCloseSession"/>
		<mate:Listener type="{SessionSharedEvent.RECEIVE_SHARED_INFO}"  method="onUpdateViewChatPanelSession"/>
	</fx:Declarations>
	<mx:HDividedBox width="100%" height="100%" includeIn="MainState,StudentState">
		<s:VGroup width="33%" height="100%" minWidth="200">
			<mx:Spacer height="5" />
			<s:HGroup width="100%">
				<s:Button id="buttonCloseSession" includeIn="MainState" width="50%" height="30"
						   click="buttonCloseSession_clickHandler(event)">
					<s:label>{fxgt.gettext("Fermer la séance")}</s:label>
				</s:Button>
				<s:Button  id="buttonStartRecording" width="50%" includeIn="MainState" height="30" 
						  click="button1_clickHandler(event)">
				</s:Button>
			</s:HGroup>
				<!-- Démarrer la séance -->
			<s:Panel height="100%" width="100%" id="panelPlanSession" resize="panelPlanSession_resizeHandler(event)">
				<s:title>Plan de séance</s:title>
				<s:title.StudentState>Media de la séance</s:title.StudentState>
				<s:Group includeIn="StudentState" width="100%" height="100%">
					<s:Scroller left="1" right="1" top="1" bottom="1"  id="scrollerPanelMediaSession">    
						<s:Group id="panelMediaSession"   width="100%"  height="100%">
							<s:layout>
								<s:VerticalLayout gap="15"/>
							</s:layout>
						</s:Group>
					</s:Scroller>
				</s:Group>
				<sessions:SessionPlan height="100%" width="100%" 
									  shareElement="shareActivityElement(event)"
									  startActivity="startActivity(event)"
									   includeIn="MainState"/>
			</s:Panel>
		</s:VGroup>
		 
		<mx:VDividedBox width="77%" height="100%" minHeight="400" minWidth="550">
			<mx:HDividedBox width="100%" height="55%">
				<s:Panel height="100%" width="40%" title="{'Video : '+ Model.getInstance().getLoggedUser().firstname}" minWidth="200" minHeight="200">
					<s:Group height="100%" width="100%">
						<s:layout>
							<s:VerticalLayout gap="3"/>
						</s:layout>
						<controls:VisuVisio id="visio" width="100%" top="0"
											quality="80"
											bandwidth="15000" autoPlay="True"  height="100%" />
						<s:Group width="100%" bottom="3" height="30">
							<mx:TextArea  id="textChatMarker" keyUp="onSetMyMarker(event)" enabled="true"   height="25" top="2" left="1" right="155">				
							</mx:TextArea>
							<mx:Button icon="@Embed(source='images/marqueurBlanc-bas-20px.png')" click="onSetMyMarker(event)" right="1" height="25" top="2"  width="150">
									<mx:label>{fxgt.gettext("Poser Marqueur")}</mx:label>
								</mx:Button>
						</s:Group>	
					</s:Group>
				</s:Panel>
				<s:Panel   height="100%" width="60%" minWidth="300">
					<s:title>Chat</s:title>
					<s:Group height="100%" width="100%">
						<s:layout>
							<s:VerticalLayout gap="3"/>
						</s:layout>
						<s:Group  width="100%"  height="100%">
							<s:Scroller left="1" right="1" top="1" bottom="1" id="scrollerPanelChatSession">    
								<s:Group id="panelChatSession"   width="100%"  top="0">
									<s:layout>
										<s:VerticalLayout  gap="5"/>
									</s:layout>
								</s:Group>
							</s:Scroller> 
						</s:Group>
						<s:Group width="100%" bottom="3" height="30">
							<mx:TextArea    id="textChatMessage" keyUp="onSendMessage(event)" enabled="true"   height="25" top="2" left="1" right="185">				
							</mx:TextArea>
							<mx:Button icon="@Embed(source='images/marqueurBlanc-bas-20px.png')" click="onSendMessage(event)" right="1" height="25" top="2"  width="180">
								<mx:label>{fxgt.gettext("Envoyer le message")}</mx:label>
							</mx:Button>
						</s:Group>	
					</s:Group>
				</s:Panel>
			</mx:HDividedBox>
			<s:Panel width="100%" height="45%">
				<s:title>{fxgt.gettext("Résumé de l'activité")}</s:title>
				<s:Group top="1" width="100%"  height="100%">
					<s:Scroller left="1" right="1" top="1" bottom="1" id="scrollerPanelTimeLine">    
						<s:Group id="panelTimeLine"   width="100%"  height="100%">
							<s:layout>
								<s:VerticalLayout  gap="10"/>
							</s:layout>							
						</s:Group>
					</s:Scroller> 
				</s:Group>
			</s:Panel>
		</mx:VDividedBox>	
	</mx:HDividedBox>	
	<s:Label includeIn="BlankState" text="Rejoindre séance simplement par Accueill" fontSize="22" left="50" top="50" width="474"/>

</modules:VisuModuleBase>
