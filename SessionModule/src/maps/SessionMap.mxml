<?xml version="1.0"?>
<mate:LocalEventMap 
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/halo"
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:rtmp="com.flashdevs.mateExt.rtmpService.mate.*">
	<fx:Script><![CDATA[
		import business.SessionManager;
		
		import com.asfusion.mate.utils.debug.Debugger;
		import com.flashdevs.mateExt.rtmpService.RtmpService;
		import com.ithaca.visu.controls.sessions.SessionDetailView;
		import com.ithaca.visu.controls.sessions.SessionManagerView;
		import com.ithaca.visu.events.SessionEvent;
		import com.ithaca.visu.events.SessionUserEvent;
		import com.ithaca.visu.events.VisuActivityElementEvent;
		import com.ithaca.visu.events.VisuActivityEvent;
		import com.ithaca.visu.model.Model;
		import com.ithaca.visu.view.session.controls.event.SessionEditEvent;
		
		import mx.events.FlexEvent;
		
	]]></fx:Script>	
	<fx:Declarations>
		<mate:Debugger level="{Debugger.ALL}"/>
		
		<mate:EventHandlers type="{FlexEvent.PREINITIALIZE}" debug="true">
			<mate:ObjectBuilder generator="{SessionManager}" constructorArguments="{scope.dispatcher}"/>
				<rtmp:RtmpServiceInvoker service="{RtmpService}" cache="global">
					<mate:Request action="sessionInfo.getListSessionsAndPlans" />				
					<rtmp:resultHandlers>
						<mate:MethodInvoker generator="{SessionManager}"
											method="setSessionAndPlan" 
											arguments="{[currentEvent.data]}" />
					</rtmp:resultHandlers>
					
					<rtmp:faultHandlers>
						<mate:MethodInvoker generator="{SessionManager}" 
											method="error" 
											arguments="{[currentEvent]}"/>
					</rtmp:faultHandlers>
				</rtmp:RtmpServiceInvoker>
		</mate:EventHandlers>
		
		<mate:EventHandlers type="{FlexEvent.CREATION_COMPLETE}" debug="true">
			<mate:MethodInvoker generator="{SessionManager}" method="notifyOutSession" />
		</mate:EventHandlers>
		
		<mate:EventHandlers type="{SessionEvent.OUT_SESSION}" debug="true">
			<rtmp:RtmpServiceInvoker service="{RtmpService}" cache="global">
				<mate:Request action="checkOutSession" arguments="{[event.userId]}"/>              
			</rtmp:RtmpServiceInvoker>
		</mate:EventHandlers>
<!-- REMOTE-->		
		<s:RemoteObject
			id="remoteActivity"
			endpoint="{Model.getInstance().AMFServer}"
			destination="ActivityService"
			makeObjectsBindable="true"
			showBusyCursor="true">
		</s:RemoteObject>						
		
		<s:RemoteObject
			id="remoteActivityElement"
			endpoint="{Model.getInstance().AMFServer}"
			destination="ActivityElementService"
			makeObjectsBindable="true"
			showBusyCursor="true">
		</s:RemoteObject>
		
		<s:RemoteObject
			id="remoteSession"
			endpoint="{Model.getInstance().AMFServer}"
			destination="SessionService"
			makeObjectsBindable="true"
			showBusyCursor="true">
		</s:RemoteObject>
		
		<s:RemoteObject
			id="remoteUser"
			endpoint="{Model.getInstance().AMFServer}"
			destination="UserService"
			makeObjectsBindable="true"
			showBusyCursor="true">
		</s:RemoteObject>
		
		<s:RemoteObject
			id="remoteSessionUser"
			endpoint="{Model.getInstance().AMFServer}"
			destination="SessionUserService"
			makeObjectsBindable="true"
			showBusyCursor="true">
		</s:RemoteObject>
		
		
		<mate:EventHandlers type="{VisuActivityEvent.LOAD_LIST_ACTIVITY}" useCapture="true" debug="true">
			<mate:MethodInvoker generator="{SessionManager}" method="setCurrentSessionId" arguments="{event.sessionId}"/>
			<mate:RemoteObjectInvoker  instance="{remoteActivity}" method="getSessionActivities" arguments="{event.sessionId}">
				<mate:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" method="onLoadListActivity" arguments="{[resultObject]}"/>
				</mate:resultHandlers>
				<mate:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="error" arguments="{[currentEvent]}"/>
				</mate:faultHandlers>
			</mate:RemoteObjectInvoker>
		</mate:EventHandlers>
		
		<mate:EventHandlers type="{VisuActivityElementEvent.LOAD_LIST_ACTIVITY_ELEMENTS}">
			<mate:RemoteObjectInvoker  instance="{remoteActivityElement}" method="getActivityElements" arguments="{event.activityId}">
				<mate:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" method="onLoadListActivityElement" arguments="{[resultObject, event.activityId]}"/>
				</mate:resultHandlers>
				<mate:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="error" arguments="{[currentEvent]}"/>
				</mate:faultHandlers>
			</mate:RemoteObjectInvoker>
		</mate:EventHandlers>
<!-- SESSION USERS -->
		<mate:EventHandlers type="{SessionUserEvent.ADD_SESSION_USER}" debug="true">
			<rtmp:RtmpServiceInvoker service="{RtmpService}" cache="global">
				<mate:Request action="sessionInfo.addSessionUser" arguments="{[event.newSessionUser]}"/>     				
				<rtmp:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="onUpdateSession" 
										arguments="{[currentEvent.data]}"/>
				</rtmp:resultHandlers>			
				<rtmp:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" 
										method="error" 
										arguments="{[currentEvent]}"/>
				</rtmp:faultHandlers>
			</rtmp:RtmpServiceInvoker>
		</mate:EventHandlers>
		
		<mate:EventHandlers type="{SessionUserEvent.REMOVE_SESSION_USER}" debug="true">
			<rtmp:RtmpServiceInvoker service="{RtmpService}" cache="global">
				<mate:Request action="sessionInfo.removeSessionUser" arguments="{[event.newSessionUser]}"/>     				
				<rtmp:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="onUpdateSession" 
										arguments="{[currentEvent.data]}"/>
				</rtmp:resultHandlers>			
				<rtmp:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" 
										method="error" 
										arguments="{[currentEvent]}"/>
				</rtmp:faultHandlers>
			</rtmp:RtmpServiceInvoker>
		</mate:EventHandlers>	

<!-- USERS -->
		<mate:EventHandlers type="{SessionEditEvent.LOAD_LIST_USERS}" debug="true">
			<mate:RemoteObjectInvoker  instance="{remoteUser}" method="listUsers">
				<mate:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" method="onLoadListUsers" arguments="{[resultObject]}"/>
				</mate:resultHandlers>
				<mate:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="error" arguments="{[currentEvent]}"/>
				</mate:faultHandlers>
			</mate:RemoteObjectInvoker>
		</mate:EventHandlers>
		
<!-- SESSION -->		
		<mate:EventHandlers type="{SessionEvent.UPDATE_SESSION}" debug="true">
			<rtmp:RtmpServiceInvoker service="{RtmpService}" cache="global">
				<mate:Request action="sessionInfo.updateSession" arguments="{[event.sessionWitOutListUserVO]}"/>     				
				<rtmp:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="onUpdateSession" 
										arguments="{[currentEvent.data]}"/>
				</rtmp:resultHandlers>			
				<rtmp:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" 
										method="error" 
										arguments="{[currentEvent]}"/>
				</rtmp:faultHandlers>
			</rtmp:RtmpServiceInvoker>
		</mate:EventHandlers>
		
		<mate:EventHandlers type="{SessionEvent.ADD_SESSION}" debug="true">
			<rtmp:RtmpServiceInvoker service="{RtmpService}" cache="global">
				<mate:Request action="sessionInfo.addSession" arguments="{[event.sessionWitOutListUserVO, event.userId]}"/>     				
				<rtmp:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="onAddSession" 
										arguments="{[currentEvent.data]}"/>
				</rtmp:resultHandlers>			
				<rtmp:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" 
										method="error" 
										arguments="{[currentEvent]}"/>
				</rtmp:faultHandlers>
			</rtmp:RtmpServiceInvoker>
		</mate:EventHandlers>
		
		<mate:EventHandlers type="{SessionEvent.ADD_EMPTY_SESSION}" debug="true">
			<rtmp:RtmpServiceInvoker service="{RtmpService}" cache="global">
				<mate:Request action="sessionInfo.addSession" arguments="{[event.sessionWitOutListUserVO, event.userId]}"/>     				
				<rtmp:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="onAddEmptySession" 
										arguments="{[currentEvent.data]}"/>
				</rtmp:resultHandlers>			
				<rtmp:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" 
										method="error" 
										arguments="{[currentEvent]}"/>
				</rtmp:faultHandlers>
			</rtmp:RtmpServiceInvoker>
		</mate:EventHandlers>
		
		<mate:EventHandlers type="{SessionEvent.DELETE_SESSION}" debug="true">
			<rtmp:RtmpServiceInvoker service="{RtmpService}" cache="global">
				<mate:Request action="sessionInfo.deleteSession" arguments="{[event.sessionId, Model.getInstance().getLoggedUser().id_user]}"/>     				
				<rtmp:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="onDeleteSession" 
										arguments="{[currentEvent.data]}"/>
				</rtmp:resultHandlers>			
				<rtmp:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" 
										method="error" 
										arguments="{[currentEvent]}"/>
				</rtmp:faultHandlers>
			</rtmp:RtmpServiceInvoker>
		</mate:EventHandlers>
		
<!-- ACTIVITY -->
		<mate:EventHandlers type="{SessionEvent.UPDATE_ACTIVITY}" debug="true">
			<mate:RemoteObjectInvoker  instance="{remoteActivity}" method="updateActivity" arguments="{event.activityVO}">
				<mate:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" method="onUpdateActivity" arguments="{[resultObject]}"/>
				</mate:resultHandlers>
				<mate:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="error" arguments="{[currentEvent]}"/>
				</mate:faultHandlers>
			</mate:RemoteObjectInvoker>
		</mate:EventHandlers>
		
		<mate:EventHandlers type="{SessionEvent.DELETE_ACTIVITY}" debug="true">
			<mate:RemoteObjectInvoker  instance="{remoteActivity}" method="deleteActivity" arguments="{event.activityVO}">
				<mate:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" method="onDeleteActivity" arguments="{[resultObject]}"/>
				</mate:resultHandlers>
				<mate:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="error" arguments="{[currentEvent]}"/>
				</mate:faultHandlers>
			</mate:RemoteObjectInvoker>
		</mate:EventHandlers>
		
		<mate:EventHandlers type="{SessionEvent.ADD_ACTIVITY}" debug="true">
			<mate:RemoteObjectInvoker  instance="{remoteActivity}" method="addActivity" arguments="{event.activityVO}">
				<mate:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" method="onAddActivity" arguments="{[resultObject]}"/>
				</mate:resultHandlers>
				<mate:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="error" arguments="{[currentEvent]}"/>
				</mate:faultHandlers>
			</mate:RemoteObjectInvoker>
		</mate:EventHandlers>
		
		<mate:EventHandlers type="{SessionEvent.ADD_CLONED_ACTIVITY}" debug="true">
			<mate:RemoteObjectInvoker  instance="{remoteActivity}" method="addActivity" arguments="{event.activityVO}">
				<mate:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" method="onAddClonedActivity" arguments="{[resultObject, event.activityId]}"/>
				</mate:resultHandlers>
				<mate:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="error" arguments="{[currentEvent]}"/>
				</mate:faultHandlers>
			</mate:RemoteObjectInvoker>
		</mate:EventHandlers>
		
<!-- ACTIVITY ELEMENT -->
		<mate:EventHandlers type="{SessionEvent.UPDATE_ACTIVITY_ELEMENT}" debug="true">
			<mate:RemoteObjectInvoker  instance="{remoteActivityElement}" method="updateActivityElement" arguments="{event.activityElementVO}">
				<mate:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" method="onUpdateActivityElement" arguments="{[resultObject]}"/>
				</mate:resultHandlers>
				<mate:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="error" arguments="{[currentEvent]}"/>
				</mate:faultHandlers>
			</mate:RemoteObjectInvoker>
		</mate:EventHandlers>

		<mate:EventHandlers type="{SessionEvent.DELETE_ACTIVITY_ELEMENT}" debug="true">
			<mate:RemoteObjectInvoker  instance="{remoteActivityElement}" method="deleteActivityElement" arguments="{event.activityElementVO}">
				<mate:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" method="onDeleteActivityElement" arguments="{[resultObject]}"/>
				</mate:resultHandlers>
				<mate:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="error" arguments="{[currentEvent]}"/>
				</mate:faultHandlers>
			</mate:RemoteObjectInvoker>
		</mate:EventHandlers>
		
		<mate:EventHandlers type="{SessionEvent.ADD_ACTIVITY_ELEMENT}" debug="true">
			<mate:RemoteObjectInvoker  instance="{remoteActivityElement}" method="addActivityElement" arguments="{event.activityElementVO}">
				<mate:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" method="onAddActivityElement" arguments="{[resultObject]}"/>
				</mate:resultHandlers>
				<mate:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="error" arguments="{[currentEvent]}"/>
				</mate:faultHandlers>
			</mate:RemoteObjectInvoker>
		</mate:EventHandlers>
		
		<mate:EventHandlers type="{SessionEvent.ADD_CLONED_ACTIVITY_ELEMENT}" debug="true">
			<mate:RemoteObjectInvoker  instance="{remoteActivityElement}" method="addActivityElement" arguments="{event.activityElementVO}">
				<mate:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" method="onAddClonedActivityElement" arguments="{[resultObject, event.sessionId]}"/>
				</mate:resultHandlers>
				<mate:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="error" arguments="{[currentEvent]}"/>
				</mate:faultHandlers>
			</mate:RemoteObjectInvoker>
		</mate:EventHandlers>
		
		<mate:EventHandlers type="{SessionUserEvent.GET_LIST_SESSION_USER}" debug="true">
			<rtmp:RtmpServiceInvoker service="{RtmpService}" cache="global">
				<mate:Request action="obselInfo.getListPresentUserInSession" arguments="{[event.sessionId]}" />				
				<rtmp:resultHandlers>
					<mate:MethodInvoker generator="{SessionManager}"
										method="loadListPresentUserInSession" 
										arguments="{[currentEvent.data]}" />
				</rtmp:resultHandlers>			
				<rtmp:faultHandlers>
					<mate:MethodInvoker generator="{SessionManager}" 
										method="error" 
										arguments="{[currentEvent]}"/>
				</rtmp:faultHandlers>
			</rtmp:RtmpServiceInvoker>
			
			<rtmp:RtmpServiceInvoker service="{RtmpService}" cache="global">
				<mate:Request action="obselInfo.getObselByTypeSessionExitSessionPause"   arguments="{[event.sessionId]}" />	
			</rtmp:RtmpServiceInvoker>	
			
			<rtmp:RtmpServiceInvoker service="{RtmpService}" cache="global">
				<mate:Request action="retroDocument.getRetrodocumentsBySessionIdForUser"   arguments="{[event.sessionId]}" />	
			</rtmp:RtmpServiceInvoker>	
		</mate:EventHandlers>
		
		<mate:Injectors target="{SessionManager}">
			<mate:PropertyInjector targetKey="model" source="{Model.getInstance()}" />
		</mate:Injectors>
		
		<mate:Injectors target="{SessionManagerView}" >
			<mate:PropertyInjector source="{SessionManager}"
								   sourceKey="sessions"
								   targetKey="sessions"
								   />
		</mate:Injectors>
		<mate:Injectors target="{SessionDetailView}">
			<mate:PropertyInjector source="{SessionManager}"
								   targetKey="activities" sourceKey="listActivities"/>
		</mate:Injectors>
		<mate:Injectors targets="{[SessionDetailView]}">
			<mate:PropertyInjector source="{Model.getInstance()}"
								   sourceKey="profiles"
								   targetKey="profiles"
								   />
		</mate:Injectors>
		
	</fx:Declarations>
</mate:LocalEventMap>