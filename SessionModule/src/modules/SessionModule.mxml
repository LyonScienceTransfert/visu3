<?xml version="1.0" encoding="utf-8"?>
<modules:VisuModuleBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		xmlns:modules="com.ithaca.visu.modules.*"
		xmlns:maps="maps.*"
		width="100%" height="100%" 
		configure="visumodulebase1_configureHandler(event)" 
		 creationComplete="visumodulebase1_creationCompleteHandler(event)"
		xmlns:business="business.*" xmlns:skin="com.ithaca.visu.view.session.skin.*" xmlns:session="com.ithaca.visu.view.session.*" xmlns:mate="http://mate.asfusion.com/"> 
	<fx:Script>
		<![CDATA[ 
			import com.ithaca.visu.events.SessionEvent;
			import com.ithaca.visu.events.SessionUserEvent;
			import com.ithaca.visu.events.UserEvent;
			import com.ithaca.visu.events.VisuModuleEvent;
			import com.ithaca.visu.model.Activity;
			import com.ithaca.visu.model.ActivityElement;
			import com.ithaca.visu.model.Model;
			import com.ithaca.visu.model.Session;
			import com.ithaca.visu.model.User;
			import com.ithaca.visu.model.vo.ActivityElementVO;
			import com.ithaca.visu.model.vo.ActivityVO;
			import com.ithaca.visu.model.vo.SessionVO;
			import com.ithaca.visu.model.vo.SessionWithoutListUserVO;
			import com.ithaca.visu.model.vo.UserVO;
			import com.ithaca.visu.ui.utils.SessionStatusEnum;
			import com.ithaca.visu.view.session.controls.SessionDetail;
			import com.ithaca.visu.view.session.controls.event.SessionEditEvent;
			import com.ithaca.visu.view.session.controls.event.SessionFilterEvent;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			protected function visumodulebase1_configureHandler(event:VisuModuleEvent):void
			{			
				if((event.currentTarget as SessionModule).parameters != null)
				{
					var param:Object = (event.currentTarget as SessionModule).parameters ;
					if(testLabel != null)
					{
					//	testLabel.text = param.theme + " " + param.date_session.toString();				
					}
				}
				Model.getInstance().setCurrentSessionModule(this);
			}
			
			protected function visumodulebase1_creationCompleteHandler(event:FlexEvent):void
			{
				sessionManagement.filterSession = Model.getInstance().getCurrentFilterSession();
				sessionManagement.addEventListener(SessionFilterEvent.CHANGE_FILTER, onChangeFilterSession);
				
				var sessionDetail:SessionDetail = sessionManagement.sessionDetail;
				sessionDetail.addEventListener(SessionEditEvent.DELETE_ACTIVITY, onDeleteActivity,true);
				sessionDetail.addEventListener(SessionEditEvent.UPDATE_ACTIVITY, onUpdateActivity,true);
				sessionDetail.addEventListener(SessionEditEvent.ADD_ACTIVITY, onAddActivity,true);
				sessionDetail.addEventListener(SessionEditEvent.DELETE_ACTIVITY_ELEMENT, onDeleteActivityElement,true);
				sessionDetail.addEventListener(SessionEditEvent.UPDATE_ACTIVITY_ELEMENT, onUpdateActivityElement,true);	
				sessionDetail.addEventListener(SessionEditEvent.ADD_ACTIVITY_ELEMENT, onAddActivityElement,true);
				sessionDetail.addEventListener(SessionEditEvent.UPDATE_SESSION, onUpdateSession);
				sessionDetail.addEventListener(SessionEditEvent.ADD_SESSION, onAddSession);
				sessionDetail.addEventListener(SessionEditEvent.PRE_LOAD_USERS, onPreLoadUsers);
			}
// ACTIVITY
			private function onDeleteActivity(event:SessionEditEvent):void
			{
				var activityVO:ActivityVO = this.setActivityVO(event.activity);
				var deleteActivity:SessionEvent = new SessionEvent(SessionEvent.DELETE_ACTIVITY);
				deleteActivity.activityVO = activityVO;
				this.dispatchEvent(deleteActivity);
			}
			private function onUpdateActivity(event:SessionEditEvent):void
			{	
				var activityVO:ActivityVO = this.setActivityVO(event.activity);
				var updateActivity:SessionEvent = new SessionEvent(SessionEvent.UPDATE_ACTIVITY);
				updateActivity.activityVO = activityVO;
				this.dispatchEvent(updateActivity);
				
			}
			private function onAddActivity(event:SessionEditEvent):void
			{
				var activityVO:ActivityVO = this.setActivityVO(event.activity);
				var addActivity:SessionEvent = new SessionEvent(SessionEvent.ADD_ACTIVITY);
				addActivity.activityVO = activityVO;
				this.dispatchEvent(addActivity);
			}
			private function setActivityVO(activity:Activity):ActivityVO
			{
				var activityVO:ActivityVO = new ActivityVO();
				activityVO.id_activity = activity.id_activity; 
				activityVO.id_session = Model.getInstance().getCurrentSessionId();
				activityVO.title = activity.title;
				activityVO.duration = activity.duration;
				activityVO.ind = activity.ind;
				return activityVO;
			}
// ACTIVITYELEMENT
			private function onDeleteActivityElement(event:SessionEditEvent):void
			{
				var activityElement:ActivityElement = event.activityElement;
				var activity:Activity = event.activity;
				var activityElementVO:ActivityElementVO = this.setActivityElementVO(activityElement,activity);
				
				var deleteActivtyElementEvent:SessionEvent = new SessionEvent(SessionEvent.DELETE_ACTIVITY_ELEMENT);
				deleteActivtyElementEvent.activityElementVO = activityElementVO;				
				this.dispatchEvent(deleteActivtyElementEvent);
			}
			private function onUpdateActivityElement(event:SessionEditEvent):void
			{
				var activityElement:ActivityElement = event.activityElement;
				var activity:Activity = event.activity;
				var activityElementVO:ActivityElementVO = this.setActivityElementVO(activityElement,activity);
				
				var updateActivityElement:SessionEvent = new SessionEvent(SessionEvent.UPDATE_ACTIVITY_ELEMENT);
				updateActivityElement.activityElementVO = activityElementVO;
				this.dispatchEvent(updateActivityElement);		
			}
			private function onAddActivityElement(event:SessionEditEvent):void
			{
				var activityElement:ActivityElement = event.activityElement;
				var activity:Activity = event.activity;
				var activityElementVO:ActivityElementVO = this.setActivityElementVO(activityElement,activity);
				
				var addActivityElement:SessionEvent = new SessionEvent(SessionEvent.ADD_ACTIVITY_ELEMENT);
				addActivityElement.activityElementVO = activityElementVO;
				this.dispatchEvent(addActivityElement);		
			}
			private function setActivityElementVO(activityElement:ActivityElement, activity:Activity):ActivityElementVO
			{
				if(activityElement != null)
				{
					var alm:ActivityElementVO = new ActivityElementVO();
					alm.id_element = activityElement.id_element;
					var idActivity:int;
					if(activity == null)
					{
						idActivity = 0;
					}else{
						idActivity = activity.id_activity
					}
					alm.id_activity = idActivity;
					alm.data = activityElement.data;
					alm.url_element = activityElement.url_element;
					alm.type_element = activityElement.type_element;
					alm.type_mime = activityElement.type_mime;
					alm.order_activity_element = activityElement.order_activity_element;		
					return alm;
				}
				return null;
			}
			//private function setActivityVO(activityElement:ActivityElement, 
// SESSION
			private function onUpdateSession(event:SessionEditEvent):void
			{
				var updateSession:SessionEvent = new SessionEvent(SessionEvent.UPDATE_SESSION);
				var session:Session = event.session;
				var sessionVO:SessionWithoutListUserVO = new SessionWithoutListUserVO();
				sessionVO.duration_session = session.duration_session;
				sessionVO.id_session = session.id_session;
				sessionVO.id_user = session.id_user;
				sessionVO.theme = session.theme;
				sessionVO.date_session = session.date_session;
				sessionVO.isModel = session.isModel;
				sessionVO.description = session.description;
				sessionVO.start_recording = session.date_start_recording;
				sessionVO.status_session = session.statusSession;
				sessionVO.id_currentActivity = 0;
				updateSession.sessionWitOutListUserVO = sessionVO;
				this.dispatchEvent(updateSession);
				// update dataProvider the session
//??				sessionManagement.updateSession(session);
			}
			
			private function onAddSession(event:SessionEditEvent):void
			{
				var addSession:SessionEvent = new SessionEvent(SessionEvent.ADD_SESSION);
				var session:Session = event.session;
				var sessionVO:SessionWithoutListUserVO = new SessionWithoutListUserVO();
				sessionVO.duration_session = session.duration_session;
				sessionVO.id_session = session.id_session;
				sessionVO.id_user = Model.getInstance().getLoggedUser().id_user
				sessionVO.theme = session.theme;
				sessionVO.date_session = session.date_session;
				sessionVO.isModel = event.isModel;
				sessionVO.description = session.description;
				sessionVO.start_recording = session.date_start_recording;
				var statusSession:uint = SessionStatusEnum.SESSION_OPEN;
				var userId:int = 0;
				if(event.isModel)
				{
					statusSession = SessionStatusEnum.SESSION_CLOSE; 
				}else
				{
					userId  = Model.getInstance().getLoggedUser().id_user;
				}
				sessionVO.status_session = statusSession;
				sessionVO.id_currentActivity = 0;
				addSession.sessionWitOutListUserVO = sessionVO;
				addSession.userId = userId;
				this.dispatchEvent(addSession);
			}

			private function onPreLoadUsers(event:SessionEditEvent):void
			{
				var loadUsers:SessionEditEvent = new SessionEditEvent(SessionEditEvent.LOAD_LIST_USERS);
				this.dispatchEvent(loadUsers);
			}
			private function addClonedSession(event:SessionEvent):void
			{
				var session:Session = event.session;
				sessionManagement.addSession(session);
			}
			private function onLoadedAllUsers(event:UserEvent):void
			{
				if(sessionManagement.sessionDetail)
				{
					sessionManagement.sessionDetail.allUsers = event.listUser;
				}
			}
			
			private function onShowUpdatedSession(event:SessionEvent):void
			{
				if(Model.getInstance().getCurrentSessionModule() == this)
				{
					this.sessionManagement.updateSession(event.session);
				}
			}
			
			private function setListPresentUserInSession(event:SessionUserEvent):void
			{
				if(Model.getInstance().getCurrentSessionModule() == this)
				{
					var listUser:ArrayCollection = event.listUser;
					this.sessionManagement.sessionDetail.listPresentUser = listUser;
				}
			}
			
			private function onChangeFilterSession(event:SessionFilterEvent):void
			{
				var filter:int = event.filterSession;
				Model.getInstance().setCurrentFilterSession(filter);
			}
			
			/**
			 * Remove deleted session
			 */
			public function onUpdateDeletedSession(event:SessionEvent):void
			{
				if(Model.getInstance().getCurrentSessionModule() == this)
				{
					var sessionId:int = event.sessionId;
					var userId:int = event.userId;
					var user:User = Model.getInstance().getUserPlateformeByUserId(userId);
					var nameUser:String = user.lastname + " " +user.firstname;
					sessionManagement.removeSessionView(sessionId, nameUser);
					// enabled button "salon synchrone
					if(Model.getInstance().getCurrentSession() != null &&  Model.getInstance().getCurrentSession().id_session == sessionId)
					{
						Model.getInstance().setCurrentSession(null);
						Model.getInstance().setEnabledButtonSalonSynchrone(false);
					}
				}
			}
			

		]]>
	
	</fx:Script>
	<s:VGroup  visible="false">
		<s:Label   text="Gestion des séances" fontSize="20"  fontStyle="italic"/>
		<s:Label  id="testLabel" fontSize="20" />
	</s:VGroup>
	<session:SessionManagement id="sessionManagement" loggedUser="{Model.getInstance().getLoggedUser()}" top="0" left="0" right="0" bottom="0" skinClass="com.ithaca.visu.view.session.skin.SessionManagementSkin"/>
	<fx:Declarations>
		<maps:SessionMap dispatcher="{this}"/>
		<mate:Listener type="{SessionEvent.ADD_CLONED_SESSION}"  method="addClonedSession"/>
		<mate:Listener type="{UserEvent.LOADED_ALL_USERS}"  method="onLoadedAllUsers"/>
		<mate:Listener type="{SessionEvent.SHOW_UPDATED_SESSION}"  method="onShowUpdatedSession"/>
		<mate:Listener type="{SessionUserEvent.LOAD_LIST_SESSION_USER}"  method="setListPresentUserInSession"/>
		<mate:Listener type="{SessionEvent.UPDATE_DELETED_SESSION}"  method="onUpdateDeletedSession"/>
		<mate:Listener type="{SessionEvent.SHOW_CLONED_PLAN}"  method="onShowClonedPlan"/>
		<mate:Listener type="{SessionEvent.LOAD_DURATION_SESSION}"  method="onLoadDurationSession"/>
	</fx:Declarations>
</modules:VisuModuleBase>

