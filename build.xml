<?xml version="1.0" encoding="UTF-8"?>

<!--
	Build the visu client modules and main application, 
	and put the produced swf files to the "deploy/" directory.
	(produced swf files in "deploy/" are to be deployed to
	the red5 server by the VisuServeur/build.xml script)
-->

<!-- Info: The size of memory available to the JVM may required to be extended for the
           compile tasks. You may need to extend the JVM memory space with the options "-Xms", "-Xmx" and "-XX:MaxPermSize":
           
	       Ex: -Xms768m -Xmx1024m -XX:MaxPermSize=512m

or by setting the following environment variable:

		ANT_OPTS="-Xms768m -Xmx1024m -XX:MaxPermSize=512m"

-->


<project name="Visu Client Builder" default="buil-and-deploy-all">
 

<loadproperties srcFile="build.properties"/>

   
	<property name="visu.dev.path" location="." />
	
	
	<property name="player.major.version" value="10.1" />
   	<property name="locale" value="en_US" />
	
	<!-- the value for the "debug" compiler option for compc and mxmlc -->
   	<property name="debug" value="true" />

	<!-- the value for the "debug" compiler option for compc and mxmlc -->
   	<property name="mxmlc.incremental" value="false" />
	
	<!-- the name for bot the final swf file and the mxml application source file -->
   	<property name="webapp.dir"  location="${red5.dir}/webapps/${webapp.name}" />

	<!-- The FLEX_HOME variable (with this typo) must be set to the flex sdk repository
		 for the compc and mxmlc compilers to run properly-->
   <property name="FLEX_HOME" location="${flex.sdk}"/>
   
	<!-- add flex ant task from adobe sdk-->
   <taskdef resource="flexTasks.tasks" classpath="${flex.sdk}/ant/lib/flexTasks.jar"/>

   <!-- The source folder where visuclient.mxml will be found --> 
   <property name="app.src" location="${visu.dev.path}/VisuApplication/src" />

	<!-- The temporary output folder where to place the swf files before being deployed to the server --> 
   <property name="app.deploy" location="${visu.dev.path}/${deploy.tmp}" />
	
	<!-- Visu framework related variables --> 
   <property name="framework.path" location="${visu.dev.path}/VisuFramework" />
   <property name="framework.src" location="${framework.path}/src" />
   <property name="framework.images" location="${framework.src}/images" />
   <property name="framework.bin" location="${framework.path}/bin" />
   <property name="framework.linkreport" location="${framework.bin}/link-report.xml" />
   <property name="framework.locale" location="${framework.path}/locale" />
	
	<!-- The temporary asset SWC that contains embedded ressources -->
   <property name="framework.assets.swc" value="visu_framework.assets.swc" />
	
	<!-- The Visu SWC library for compiling visu modules and application -->
   <property name="framework.swc" value="visu_framework.swc" />
	
	
	<!--  Pathes to third party libraries-->	
   <property name="thirdparty.dir" location="${visu.dev.path}/swc" />
   <property name="lib.swfaddress" value="SWFAddress.swc" />
   <property name="lib.mate" value="Mate_08_9.swc" />
   <property name="lib.rmtp" value="rtmp-service-1.0.swc" />
   <property name="lib.as3gettext" value="as3-gettext-0.4.1.swc" />

	<!--  Pathes to User Module sources -->	
   <property name="usermodule.src" location="${visu.dev.path}/UserModule/src" />
   <property name="usermodule.name" value="UserModule" />

	<!--  Pathes to Session Module sources -->	
   <property name="sessionmodule.src" location="${visu.dev.path}/SessionModule/src" />
   <property name="sessionmodule.name" value="SessionModule" />

	<!--  Pathes to Tutorat Module sources -->	
   <property name="tutoratmodule.src" location="${visu.dev.path}/TutoratModule/src" />
   <property name="tutoratmodule.name" value="TutoratModule" />

	<!--  Pathes to Home Module sources -->	
   <property name="homemodule.src" location="${visu.dev.path}/HomeModule/src" />
   <property name="homemodule.name" value="HomeModule" />

	<!--  Pathes to Retrospection Module sources -->	
   <property name="retrospectionmodule.src" location="${visu.dev.path}/RetrospectionModule/src" />
   <property name="retrospectionmodule.name" value="RetrospectionModule" />


	<!--  the name of the visu swf file -->	
	 <property name="visuclient.swf" value="visuclient"/>

	
	<!--  server project path -->	
	<property name="project.server.path"     location="${visu.dev.path}/VisuServeur/visu/"/>
	<property name="project.server.src"     location="${project.server.path}/src"/>
	<property name="server.tmp.classes"     location="${app.deploy}/tmp"/>
	
	<!--  jar properties -->	
	<property name="jar.name"     value="${webapp.name}"/>
	<property name="jar.dir"     location="${app.deploy}"/>
	<property name="jar.file"    location="${jar.dir}/${jar.name}.jar" />
		
  

	<!-- Package the visu frameworks classes and resources, and put them 
		 into a temporary library named "visu_framework.swc" (located in "./VisuFramework/bin/") 
		 that will serve as a library when building visu modules.
	-->
	<target name="build-framework" description="Builds the Framework project and put assets in a swc file">
	      <echo>Compile framework library</echo>
	       
		<!-- 
			The compc compiler creates a SWC files.
			For information about compiler options, see http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7fd2.html
		-->
		
		<!-- Create a SWC container for assets resources that are used by many components 
			 in client modules and the framework-->
	  	  <compc 
	        output="${framework.bin}/${framework.assets.swc}"
	  	  	debug="${debug}" 
	        strict="true" 
		    incremental="${mxmlc.incremental}"
	   	    warnings="true"
	        headless-server="true">
	  	  	
	  	  		<!--	Put the images that are referenced by [Embed('images/{imagename}.{ext}')] 
	  	  				in actionscript file into the library -->
	  		  	<include-file name="images/ArrowDown.png" path="${framework.images}/ArrowDown.png"/>
	  			<include-file name="images/ArrowUp.png" path="${framework.images}/ArrowUp.png"/>
	  		  	<include-file name="images/chatMessageVisu1.png" path="${framework.images}/chatMessageVisu1.png"/>
	  		  	<include-file name="images/CommentAddVer1.png" path="${framework.images}/CommentAddVer1.png"/>
	  		  	<include-file name="images/CommentVer4.png" path="${framework.images}/CommentVer4.png"/>
	  		  	<include-file name="images/consigneVisu1.png" path="${framework.images}/consigneVisu1.png"/>
	  		  	<include-file name="images/Editer.png" path="${framework.images}/Editer.png"/>
	  	  	    <include-file name="images/fichierVisu1.png" path="${framework.images}/fichierVisu1.png"/>
	  	  	    <include-file name="images/iconPlus.png" path="${framework.images}/iconPlus.png"/>
	  	  	    <include-file name="images/iconMinus.png" path="${framework.images}/iconMinus.png"/>
	  		  	<include-file name="images/marqueurBlanc-bas-20px.png" path="${framework.images}/marqueurBlanc-bas-20px.png"/>
	  		  	<include-file name="images/messageChat.png" path="${framework.images}/messageChat.png"/>
	  		  	<include-file name="images/motCleVisu1.png" path="${framework.images}/motCleVisu1.png"/>
	  		  	<include-file name="images/PauseVer4.png" path="${framework.images}/PauseVer4.png"/>
	  		  	<include-file name="images/PlayVer4.png" path="${framework.images}/PlayVer4.png"/>
	  		  	<include-file name="images/PlayWalkOutVer5.png" path="${framework.images}/PlayWalkOutVer5.png"/>
	  		  	<include-file name="images/PressSliderVer5.png" path="${framework.images}/PressSliderVer5.png"/>
	  		  	<include-file name="images/Poubelle.png" path="${framework.images}/Poubelle.png"/>
	  		  	<include-file name="images/ReleaseSliderVer5.png" path="${framework.images}/ReleaseSliderVer5.png"/>
		  	  	<include-file name="images/SharedOtherToThisRedVer1.png" path="${framework.images}/SharedOtherToThisRedVer1.png"/>
	  		  	<include-file name="images/SharedOtherToThisVer1.png" path="${framework.images}/SharedOtherToThisVer1.png"/>
	  		  	<include-file name="images/SharedThisToOtherRedVer1.png" path="${framework.images}/SharedThisToOtherRedVer1.png"/>
	  		  	<include-file name="images/SharedThisToOtherVer1.png" path="${framework.images}/SharedThisToOtherVer1.png"/>
	  		  	<include-file name="images/StopVer4.png" path="${framework.images}/StopVer4.png"/>
	  		  	<include-file name="images/video.jpg" path="${framework.images}/video.jpg"/>
	  		  	<include-file name="images/add.png" path="${framework.images}/add.png"/>

	  		  	<include-file name="images/share_icon20x20.png" path="${framework.images}/share_icon20x20.png"/>
	  		  	<include-file name="images/RetroDocumentSegmentAddVer1.png" path="${framework.images}/RetroDocumentSegmentAddVer1.png"/>
	  		  	<include-file name="images/save_edit.png" path="${framework.images}/save_edit.png"/>
	  		  	<include-file name="images/RetroDocumentAddVer1.png" path="${framework.images}/RetroDocumentAddVer1.png"/>
	  		  	<include-file name="images/Attention_yellow.png" path="${framework.images}/Attention_yellow.png"/>

	  	  		<include-file name="locale/en_US/HumanDate.properties" path="${framework.locale}/en_US/HumanDate.properties"/>
	  	  		<include-file name="locale/fr_FR/HumanDate.properties" path="${framework.locale}/fr_FR/HumanDate.properties"/>
	  	  	
	  	  	</compc>
		
		
		<!-- Create the SWC library file that will be passed as input of the compiler 
			 for client modules. The above SWC file must me prepared beforehand and passed as a library because 
			 visu framework classes that are compiled here refer to them. -->
	  	  <compc 
	         output="${framework.bin}/${framework.swc}"
	         debug="${debug}" 
	         strict="true" 
	         optimize="true" 
		     incremental="${mxmlc.incremental}"
	   	     warnings="true"
	         headless-server="true">

	         <!-- define the source path -->
	         <include-sources dir="${framework.src}" includes="*"/>
	         <source-path path-element="${framework.src}" />
	  	  	
	      	<!-- add external swc-->
	      	<external-library-path dir="${flex.sdk}/frameworks" append="true">
	      		<include name="libs/player/${player.major.version}/playerglobal.swc" />
	      		<include name="libs/textLayout.swc" />
	      		<include name="libs/osmf.swc" />
	      		<include name="libs/framework.swc" />
	      		<include name="libs/spark.swc" />
	      		<include name="libs/sparkskins.swc" />
	      		<include name="libs/rpc.swc" />
	      	</external-library-path>
	      	
	   	  	<!-- The "library-path" option adds a library swc to the path at compile time
				 and required resources are then compiled and integrated as byte code to the produced 
				 SWC file.
			-->
	      	<library-path dir="${flex.sdk}/frameworks" append="true">
	      		<include name="flash-integration.swc" />
	      	</library-path>
	  	  	
	  	  	<!-- The include-libraries option allows not only to make assets accessible 
	  	  		 at compile time (i.e. to add them to the path at compile time), but also
	  	  		 to copy them into the produced SWC library as assets (not only as byte code). 
	  	  		 
	  	  		 The specific "include" option is required for visu since some images are referenced by client modules
	  	  	 -->
	  	    <include-libraries dir="${framework.bin}" append="true">
	  	    	<include name="${framework.assets.swc}" />
	  	    </include-libraries>
	      	
	  	  <!-- Add external 3rd-party dependencies to the path -->
	         <library-path dir="${thirdparty.dir}" append="true">
				<include name="${lib.swfaddress}" />
	            <include name="${lib.mate}" />
	            <include name="${lib.rmtp}" />
	            <include name="${lib.as3gettext}" />
	         </library-path>
	         
	  	  	<include-file name="defaults.css" path="${framework.src}/defaults.css"/>
	      </compc>
	</target>
	
	<!-- Build the session module and produce a SessionModule.swf file -->
	<target name="build-session-module">
	      <echo>Build Session Module</echo>
			
		<!-- Create the SessionModule.swf from the sources
			 The combination of options "load-externs=report.xml" and optimize="true" allow
			 to use the link report produces by the Visu main application in order for SessionModule.swf to 
			 load classes at runtime that are held by visuclient.swf and not to include them into SessionModule.swf.
			 This implements the RSL (Runtime Shared Library) mechanism defined by Flex. With these two compiation options,
			 the size of SessionModule.swf is smaller and SessionModule.swf reuses resources in visuclient.swf which
			  acts as a RSL (Both SessionModule.swf and visuclient.swf must be loaded by clients) 
			  
			 Documentation about mxmlc compiler options are available here: http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7fcc.html
	    -->
		  <mxmlc 
		         file="${sessionmodule.src}/modules/${sessionmodule.name}.mxml"
		         output="${app.deploy}/${sessionmodule.name}.swf"
		         debug="${debug}"
		         strict="true" 
		         optimize="true" 
		         load-externs="${framework.linkreport}" 
		      	 incremental="${mxmlc.incremental}"
		         warnings="true"
		         headless-server="true">
		         
		         <!-- will include all files with .css, .as, .mxml extensions -->
		         <source-path path-element="${sessionmodule.src}"/>
		  	
		         <library-path dir="${framework.bin}" append="true">
		            <include name="${framework.swc}" />
		         </library-path>
		      	
		        <library-path dir="${thirdparty.dir}" append="true">
					<include name="${lib.swfaddress}" />
					<include name="${lib.mate}" />
					<include name="${lib.rmtp}" />
					<include name="${lib.as3gettext}" />
		     	</library-path>
		     	         
		      </mxmlc>
		   </target>

	<!-- 
		Build the tutorat module (salon synchrone) and produce a TutoratModule.swf file 

		This target works exactly as the "build_session_module" target, please refer to it for documentation. 
	-->
	<target name="build-tutorat-module">
	      <echo>Build Tutorat Module</echo>
	       
		      <mxmlc 
		         file="${tutoratmodule.src}/modules/${tutoratmodule.name}.mxml"
		         output="${app.deploy}/${tutoratmodule.name}.swf"
		         debug="${debug}"
		         strict="true" 
		         optimize="true" 
		      	incremental="${mxmlc.incremental}"
		        load-externs="${framework.linkreport}" 
		         warnings="true"
		         headless-server="true">
		         
		         <!-- will include all files with .css, .as, .mxml extensions -->
		         <source-path path-element="${tutoratmodule.src}"/>
		      	
		         <library-path dir="${framework.bin}" append="true">
		            <include name="${framework.swc}" />
		         </library-path>

		        <library-path dir="${thirdparty.dir}" append="true">
		     		<include name="${lib.swfaddress}" />
					<include name="${lib.mate}" />
					<include name="${lib.rmtp}" />
					<include name="${lib.as3gettext}" />
				</library-path>
		     	         

		      </mxmlc>
		   </target>
	
	<!-- 
		Build the home module (accueil) and produce a HomeModule.swf file 

		This target works exactly as the "build_session_module" target, please refer to it for documentation. 
	-->
	<target name="build-home-module">
	      <echo>Build Home Module</echo>
	       
		      <mxmlc 
		         file="${homemodule.src}/modules/${homemodule.name}.mxml"
		         output="${app.deploy}/${homemodule.name}.swf"
		         debug="${debug}"
		         strict="true" 
		      	incremental="${mxmlc.incremental}"
		        load-externs="${framework.linkreport}" 
		         optimize="true" 
		         warnings="true"
		         headless-server="true">
		         
		         <!-- define a source path (will include all files with .css, .as, .mxml extensions) -->
		         <source-path path-element="${homemodule.src}"/>
		      	
		         <library-path dir="${framework.bin}" append="true">
		            <include name="${framework.swc}" />
		         </library-path>
		      	
		        <library-path dir="${thirdparty.dir}" append="true">
					<include name="${lib.swfaddress}" />
					<include name="${lib.mate}" />
					<include name="${lib.rmtp}" />
		     		<include name="${lib.as3gettext}" />
		     	</library-path>
		     	         
		      	 
		      </mxmlc>
		   </target>
	
	<!-- 
		Build the retrospection module (salon de rétrospection) and produce a RetrospectionModule.swf file 

		This target works exactly as the "build_retrospection_module" target, please refer to it for documentation. 
	-->
	<target name="build-retrospection-module">
	      <echo>Build Retrospection Module</echo>
	       
		      <mxmlc 
		         file="${retrospectionmodule.src}/modules/${retrospectionmodule.name}.mxml"
		         output="${app.deploy}/${retrospectionmodule.name}.swf"
		         debug="${debug}"
		         strict="true" 
		         load-externs="${framework.linkreport}" 
		      	 incremental="${mxmlc.incremental}"
		         optimize="true" 
		         warnings="true"
		         headless-server="true">
		         
		         <!-- will include all files with .css, .as, .mxml extensions -->
		         <source-path path-element="${retrospectionmodule.src}"/>
		      	
		         <library-path dir="${framework.bin}" append="true">
		            <include name="${framework.swc}" />
		         </library-path>
		      	
		        <library-path dir="${thirdparty.dir}" append="true">
		     	            <include name="${lib.swfaddress}" />
		     	            <include name="${lib.mate}" />
		     	            <include name="${lib.rmtp}" />
		     	            <include name="${lib.as3gettext}" />
		     	         </library-path>
		     	         
		      
		      </mxmlc>
		   </target>
	
	<!-- 
		Build the user module (interface de gestion des utilisateurs visu) and produce a UserModule.swf file 

		This target works exactly as the "build_session_module" target, please refer to it for documentation. 
	-->
	<target name="build-user-module">
	      <echo>Build User Module</echo>
	       
		      <mxmlc 
		         file="${usermodule.src}/modules/${usermodule.name}.mxml"
		         output="${app.deploy}/${usermodule.name}.swf"
		         debug="${debug}"
		         strict="true" 
		         optimize="true" 
		      	incremental="${mxmlc.incremental}"
		         warnings="true"
		        load-externs="${framework.linkreport}" 
		         headless-server="true">
		         
		         <!-- will include all files with .css, .as, .mxml extensions -->
		         <source-path path-element="${usermodule.src}"/>
		      	
		      	<library-path dir="${framework.bin}" append="true">
					<include name="${framework.swc}" />
				</library-path>
		      	
		        <library-path dir="${thirdparty.dir}" append="true">
		     	            <include name="${lib.swfaddress}" />
		     	            <include name="${lib.mate}" />
		     	            <include name="${lib.rmtp}" />
		     	            <include name="${lib.as3gettext}" />
		     	</library-path>
		      </mxmlc>
		   </target>

	
	 <!-- 
	 	Build the visu client application, i.e. from "visuclient.mxml" to "visuclient.swf"
	 -->
	   <target name="build-visuclient-swf" description="Builds the application swf file"> 
	      <echo>Build Visu</echo>
	      
		<!-- 
			the "link-report" option creates an output xml file (the link report) where
			all classes held in the produced swf file will be indexed. This link report
			is given as input for the compilation of Visu client modules, in order not 
			to include again in the client modules classes that will be accessible at runtime 
			in the main swf file (visuclient.swf).
			
			This is the implementation of the Flex RSL (Runtime Shared Library) mechanism.
			For a complete documentation, see http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7add.html
			
		 -->	   	
	   	  <mxmlc 
	         file="${app.src}/${clientapp.name}.mxml"
	         output="${app.deploy}/${clientapp.name}.swf"
	         debug="${debug}"
	         strict="true" 
	         link-report="${framework.linkreport}" 
	         warnings="true"
			 incremental="${mxmlc.incremental}"
	         headless-server="true">
	         
	         <!-- will include all files with .css, .as, .mxml extensions -->
	         <source-path path-element="${app.src}"/>
	      	
	         <library-path dir="${framework.bin}" append="true">
	            <include name="${framework.swc}" />
	         </library-path>
	      	
	      	 <library-path dir="${thirdparty.dir}" append="true">
	      		            <include name="${lib.swfaddress}" />
	      		            <include name="${lib.mate}" />
	      		            <include name="${lib.rmtp}" />
	      		            <include name="${lib.as3gettext}" />
			</library-path>
	      	
	      </mxmlc>
	   </target>
	
	<target name="html-wrapper" description="Creates a HTML wrapper and other js files required for the application to run in an HTML page"> 
	   <html-wrapper 
	       	title="Welcome to Visu 2" 
			file="${clientapp.name}.html" 
	            application="app" 
	            swf="${clientapp.name}" 
	            history="true" 
	            express-install="true" 
	            version-detection="true" 
	            output="${app.deploy}"/> 
	</target> 
	
	
   <target name="build-client-all" description="Builds the client app, all client modules, and dependencies">
      <antcall target="build-framework" />
      <antcall target="build-visuclient-swf" />
      <antcall target="build-user-module" />
      <antcall target="build-home-module" />
      <antcall target="build-session-module" />
      <antcall target="build-retrospection-module" />
      <antcall target="build-tutorat-module" />
   </target>
	

	    <target name="build-server" description="Builds the java server classes and puts them in a jar">
	        <delete dir="${server.tmp.classes}"/>
	        <mkdir dir="${server.tmp.classes}"/>
	        <javac encoding="utf-8" srcdir="${project.server.src}" destdir="${server.tmp.classes}">
	          <compilerarg value="-Xlint:unchecked" />
	          <classpath>
	            <pathelement path="${classpath}"/>
	            <pathelement location="${red5.dir}/red5.jar"/>
	            <fileset dir="${project.server.path}/webapp/WEB-INF/lib" includes="*.jar"/>
	          </classpath>
	        </javac>
	        <mkdir dir="${jar.dir}"/>
	        <jar destfile="${jar.file}" basedir="${server.tmp.classes}" />
	        <delete dir="${server.tmp.classes}"/>
	    </target>

		<target name="build-and-deploy-client" depends="build-client-all,deploy-client" description="Builds the client app and client modules, then copies the built files to the web app directory on the server"/>
	
		<target name="build-and-deploy-server" depends="build-server,deploy-server"/>
	
		<target name="deploy-client" description="Copies the client swf files to the web app directory on the server">
	      <copy file="${app.deploy}/${visuclient.swf}.swf" todir="${webapp.dir}" />
	      <copy file="${app.deploy}/${homemodule.name}.swf" todir="${webapp.dir}/modules" />
	      <copy file="${app.deploy}/${retrospectionmodule.name}.swf" todir="${webapp.dir}/modules" />
	      <copy file="${app.deploy}/${tutoratmodule.name}.swf" todir="${webapp.dir}/modules" />
	      <copy file="${app.deploy}/${sessionmodule.name}.swf" todir="${webapp.dir}/modules" />
	      <copy file="${app.deploy}/${usermodule.name}.swf" todir="${webapp.dir}/modules" />
	    </target>

		
		<!-- Deploy the visu server jar and clien swf files to the Red5 server -->
	    <target name="deploy-server" description="Copies the server jar, configuration files, and dependencies to the web app directory on the server">

	      <mkdir dir="${webapp.dir}" />

	      <copy todir="${webapp.dir}">
	        <fileset dir="${project.server.path}/webapp" />
	      </copy>
	      
	      <copy file="${jar.file}" todir="${webapp.dir}/WEB-INF/lib" />
	    </target>
		
	    <target name="build-and-deploy-all" depends="build-and-deploy-client,build-and-deploy-server" description="Builds the client and the server, and deploy the built files to the web app directory on the server"/>

 <target name="clean" description="Removes the temporary deploy directory where built files are created from the filesystem">
	  <delete dir="${app.deploy}"/>
</target>

</project>
