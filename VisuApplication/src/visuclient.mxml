<?xml version="1.0" encoding="utf-8"?>
<core:VisuApplication
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:core="com.ithaca.visu.core.*"
	xmlns:map = "maps.*"
	xmlns:mate="http://mate.asfusion.com/"
	minWidth="900" minHeight="600"
	preinitialize="visuapplication1_preinitializeHandler(event)"
	creationComplete="visuapplication1_creationCompleteHandler(event)" xmlns:vo="com.lyon2.visu.vo.*"
	>
	<fx:Declarations>
		<map:MainMap id="mainMap"/>
		<mate:Listener type="{VisuModuleEvent.LOAD_LIST_MODULES}"  method="userLoggedIN"/>
		<mate:Listener type="{SessionEvent.JOIN_SESSION}"  method="joinSession"/>
		<mate:Listener type="{SessionEvent.EDIT_SESSION}"  method="editSession"/>
		<mate:Listener type="{SessionEvent.CANCEL_SESSION}"  method="cancelSession"/>
		<mate:Listener type="{ApplicationMenuEvent.CLOSE_CONNECTION}"  method="onCloseConnection"/>
		<mate:Listener type="{ObselEvent.SHOW_WINDOW_EDIT_OBSEL}"  method="onShowWindowEditObsel"/>
	
		<vo:ProfileDescriptionVO />
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.ithaca.traces.Obsel;
			import com.ithaca.traces.model.TraceModel;
			import com.ithaca.utils.EditObselMarkerTitleWindow;
			import com.ithaca.utils.UtilFunction;
			import com.ithaca.visu.controls.globalNavigation.event.ApplicationMenuEvent;
			import com.ithaca.visu.events.ObselEvent;
			import com.ithaca.visu.events.SessionEvent;
			import com.ithaca.visu.events.SessionSharedEvent;
			import com.ithaca.visu.events.VisuModuleEvent;
			import com.ithaca.visu.ui.utils.RoleEnum;
			import com.lyon2.visu.model.Model;
			
			import gnu.as3.gettext.FxGettext;
			import gnu.as3.gettext.ISO_3166;
			import gnu.as3.gettext.ISO_639_1;
			import gnu.as3.gettext.Locale;
			import gnu.as3.gettext._FxGettext;
			import gnu.as3.gettext.services.IGettextService;
			import gnu.as3.gettext.services.URLLoaderService;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.utils.URLUtil;
			
			import spark.components.RichText;
			
			[Bindable]
			private var fxgt:_FxGettext;
			private var currentObselEdit:Obsel = null;
			private var currentTextEdit:String="";
			
			private var listLang:ArrayCollection = new ArrayCollection();
			
			protected function visuapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				this.setListLang();
				menu.listLang = listLang;
				menu.addEventListener(ApplicationMenuEvent.CHANGE_LANGUAGE, onCnangeLanguage);
				menu.addEventListener(ApplicationMenuEvent.DISCONNECT, onDisconnect);	
				// richText component for getting new value the obsel marker
				markerEdited.addEventListener(FlexEvent.UPDATE_COMPLETE , onUpdateCompleteMarker)
			}
			
			protected function onCnangeLanguage(event:ApplicationMenuEvent):void
			{
				var language:String = event.moduleName as String;
				setlocale(Locale.LC_MESSAGES, language);
			}
			
			protected function onCloseConnection(event:ApplicationMenuEvent):void{
				Alert.show(fxgt.gettext("Vous n'etes plus connecté au serveur."),fxgt.gettext("Information"));
				this.reloadApplication();			
			}
			protected function onDisconnect(event:ApplicationMenuEvent):void
			{
				Alert.yesLabel = fxgt.gettext("Oui");
				Alert.noLabel = fxgt.gettext("Non");
				Alert.show(fxgt.gettext("Voulez-vous quitter l'application ?"),
				fxgt.gettext("Confirmation"), Alert.YES|Alert.NO, null, logOutConfirmed); 
			}		
			
			protected function logOutConfirmed(event:CloseEvent):void
			{
				if( event.detail == Alert.YES )
				{				
					// TODO : gestion the Trace
					//VisuTrace.trace("PresenceEnd");
					this.reloadApplication();				
				}
			}
			protected function reloadApplication():void
			{
				if (Capabilities.playerType == "StandAlone")
				{
					fscommand("quit");
				}
				else if (ExternalInterface.available)
				{
					try{
						// get url the instance without link on the module
						var urlPageReload:String = Model.getInstance().urlServeur;
						var commandCalling:String = "window.open("+"'"+urlPageReload+"'"+",'_self')";
						ExternalInterface.call(commandCalling);
					} catch (error:Error) {
						
						navigateToURL( new URLRequest(FlexGlobals.topLevelApplication.url), "_self" );
					}
				}
				else
				{
					navigateToURL( new URLRequest(FlexGlobals.topLevelApplication.url), "_self" );
				}		
			}
			
			protected function visuapplication1_preinitializeHandler(event:FlexEvent):void
			{	
				fxgt = FxGettext;
				var a: Array;			
				/* Initialisation de différents paramètres via
				les arguments passés dans l'URL */ 
				
				/* Initialise model.server with URL hostname */
 				 var appUrl:String = FlexGlobals.topLevelApplication.url;
				Model.getInstance().server = URLUtil.getServerName( appUrl);
				Model.getInstance().port   = URLUtil.getPort( appUrl );
				 a = appUrl.match(/\/(\w+)\/visuclient.swf/);
				if (a)
					Model.getInstance().appName = a[1];	  	 		
				
				// we set the locale for the messages category to fr_FR
				setlocale(Locale.LC_MESSAGES, mklocale(ISO_639_1.FR,ISO_3166.FR));				
				
				// prepare the service to load the translations.
				// We assume the swf is at the root 
				// of the ./FlexHelloWorld directory
				var service:IGettextService = new URLLoaderService(".");
				service.addEventListener(Event.COMPLETE, onServiceComplete);
				service.addEventListener(IOErrorEvent.IO_ERROR, onIOError);
				
				// You can listen to this event, but it is not required in 
				// MXML files: the labels are automatically updated at startup 
				// and when the locale changes
				fxgt.addEventListener(Event.COMPLETE, onComplete);
						
				// Binds the messages of the helloword domain to the 
				// default directory (locale)
				fxgt.bindtextdomain("visu2", null, service);
				
				// We select helloworld to be the default domain. 
				fxgt.textdomain("visu2");
			}
			
			private function onServiceComplete(event:Event):void
			{
				// do some stuff here, if needed.
				var eventUpdateLanguage:ApplicationMenuEvent = new ApplicationMenuEvent(ApplicationMenuEvent.UPDATE_LANGUAGE);
				this.dispatchEvent(eventUpdateLanguage);
			}
			
			private function onIOError(event:IOErrorEvent):void
			{
				// an error occured while loading the catalog
				// it probably means there is no translations for this locale
				// or the base path to the translations is incorrect.
				trace(event);
			}
			
			private function onComplete(event:Event):void
			{
				// update labels of the buttons at all modules
				this.updateListLabelModule();
			}

			private function setListLang():void
			{
				listLang.addItem({labelLang:"Français", data: "fr_FR"});
				listLang.addItem({labelLang:"Deutsch", data: "de_DE"});
				listLang.addItem({labelLang:"English", data: "en_US"});
				listLang.addItem({labelLang:"Русский", data: "ru_RU"}); 
			}
			
			private function updateListLabelModule():void{
				// FIXME : maybe other way to update the labels
				var listModulsButton:Array = menu.listModulesButton;
				if(listModulsButton.home != null)
				{
					listModulsButton.home.label = fxgt.gettext("Accueil");
					if(listModulsButton.user != null)
					{
						listModulsButton.user.label = fxgt.gettext("Utilisateurs");
					}
					if(listModulsButton.session != null)
					{
						listModulsButton.session.label = fxgt.gettext("Séances");
					}
					if(listModulsButton.tutorat != null)
					{
						listModulsButton.tutorat.label = fxgt.gettext("Salon synchrone");
					}
					if(listModulsButton.retrospection != null)
					{
						listModulsButton.retrospection.label = fxgt.gettext("Salon de rétrospection");
					}
				}
			}
			
			private function onShowWindowEditObsel(event:ObselEvent):void
			{
				// set current edit obsel 
				currentObselEdit = event.obsel;
				currentTextEdit = event.textObsel;
				var editObselMarker:EditObselMarkerTitleWindow = EditObselMarkerTitleWindow(PopUpManager.createPopUp( 
				this, EditObselMarkerTitleWindow , true) as spark.components.TitleWindow);
				// Calculate position of TitleWindow in Application's coordinates. 
				var point1:Point = new Point();
				point1.x=this.width/2;
				point1.y=this.height/2;             
				editObselMarker.x=point1.x+25;
				editObselMarker.y=point1.y+25;
				
				editObselMarker.textMarker.text = event.textObsel;
				editObselMarker.tempRichText = markerEdited;
				// set focus
				stage.focus = editObselMarker;
			}
			/**
			 * add marker "UpdateMarker" on the serveur
			 */
			private function onUpdateCompleteMarker(event:FlexEvent):void
			{
				var richText:RichText = event.currentTarget as RichText;
				var textObsel:String = richText.text;
				// update BD only if new text was edded
				if(currentTextEdit != textObsel)
				{
					var sessionId:int = Model.getInstance().getCurrentSession().id_session;
					var listUsersId:Array;
					if(Model.getInstance().getLoggedUser().role < RoleEnum.TUTEUR)
					{
						// student will shared markers only with Tuter, Responsable, Admin 
						// will shared if session paused or recording
						listUsersId = Model.getInstance().getListUsersIdByRecordingSession(sessionId, RoleEnum.STUDENT, true);
					}else
					{
						listUsersId = Model.getInstance().getListUsersIdByRecordingSession(sessionId, RoleEnum.TUTEUR, true);
					}
					var sessionSharedEvent:SessionSharedEvent = new SessionSharedEvent(SessionSharedEvent.SEND_EDITED_MARKER);
					var message:String = richText.text;
					// check if message empty
					if(UtilFunction.isEmptyMessage(message))
					{
						message = fxgt.gettext("(vide)");
					}
					sessionSharedEvent.info = message;
					sessionSharedEvent.timeStamp = this.currentObselEdit.props[TraceModel.TIMESTAMP];
					sessionSharedEvent.listUsers = listUsersId;
					dispatchEvent(sessionSharedEvent);			
				}
			}

		]]>
	</fx:Script>
	
	<fx:Script source="memory.as" />
	
	<fx:Style source="styles.css" />
	<s:RichText id="markerEdited" width="100%" color="0x323232" text="Waiting..." visible="false"/>
</core:VisuApplication>
